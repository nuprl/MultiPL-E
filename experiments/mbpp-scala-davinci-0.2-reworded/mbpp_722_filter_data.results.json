{
  "name": "mbpp_722_filter_data",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isLeft && x._2.left.get > w || x._2.isRight && x._2.right.get > h)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptod56vtw.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptod56vtw.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptod56vtw.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isLeft && x._2.left.get > h || x._2.isRight && x._2.right.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ywmg0l.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ywmg0l.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ywmg0l.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(s => s._2.right.get > h && s._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4cbn0qh.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4cbn0qh.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4cbn0qh.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.right.get > h) && (x._2.left.get > w))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfo7dhve.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfo7dhve.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfo7dhve.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(y => y > w, y => y > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqrrz4yi5.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqrrz4yi5.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqrrz4yi5.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        var filteredStudents = Map[String,Either[Long, Float]]()\n        for ((name, (height, weight)) <- students) {\n            if (height > h && weight > w) {\n                filteredStudents += (name -> (height, weight))\n            }\n        }\n        filteredStudents\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpenq33c_r.scala:8:23 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (height > h && weight > w) {\n\u001b[31m\u001b[31m  |\u001b[0m                ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of Any, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpenq33c_r.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                filteredStudents += (name -> (height, weight))\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Any, Any)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpenq33c_r.scala:15:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, x => x > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isLeft && x._2.left.get > h || x._2.isRight && x._2.right.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ywmg0l.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ywmg0l.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb_ywmg0l.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, x => x > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        // students.filter(x => x._2._1 > h && x._2._2 > w)\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps496a_n9.scala:10:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps496a_n9.scala:10:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps496a_n9.scala:10:137 ----------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(student => student._2.isRight && student._2.right.get._1 > h && student._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6kp5yoxo.scala:6:78 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mstudent\u001b[0m => student._2.isRight && student._2.right.get._1 > h && student._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                         ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6kp5yoxo.scala:6:109 ------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mstudent\u001b[0m => student._2.isRight && student._2.right.get._1 > h && student._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kp5yoxo.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6kp5yoxo.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, y => y > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i7zr1dl.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i7zr1dl.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3i7zr1dl.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get >= h && x._2.left.get >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm4jc4oac.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isLeft && x._2.left.get > w || x._2.isRight && x._2.right.get > h)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptod56vtw.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptod56vtw.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptod56vtw.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, x => x > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmploz4bnbr.scala:6:86 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 >= h && x._2.right.get._2 >= w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                       ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmploz4bnbr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0.0f) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmprzkrlxz_.scala:6:55 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0.0f\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprzkrlxz_.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprzkrlxz_.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))),",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.left.getOrElse(0) > h && x._2.right.getOrElse(0) > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9tubr8qv.scala:6:52 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.left.getOrElse(\u001b[31m0\u001b[0m) > h && x._2.right.getOrElse(\u001b[31m0\u001b[0m) > w)\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9tubr8qv.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, x => x > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => {\n            val h = x._2.left.getOrElse(0)\n            val w = x._2.right.getOrElse(0)\n            h > 0 && w > 0\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8ae6vavn.scala:9:14 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            h > \u001b[31m0\u001b[0m && w > \u001b[31m0\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue > is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Ordered.orderingToOrdered\n\u001b[31m  |\u001b[0m  import math.Ordering.Implicits.infixOrderingOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ae6vavn.scala:13:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8ae6vavn.scala:13:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.isLeft && x._2.left.get > w) || (x._2.isRight && x._2.right.get > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0rbv6ne.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0rbv6ne.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp0rbv6ne.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => {\n            val height = x._2.left.getOrElse(0L)\n            val weight = x._2.right.getOrElse(0.0f)\n            height > h && weight > w\n        })\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123779,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8pu5tjj.scala:13:72 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8pu5tjj.scala:13:105 -------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (Float, Long)\n\u001b[31m   |\u001b[0m                                           Required: Either[Long, Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu8pu5tjj.scala:13:137 ----------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.fold(x => x > w, x => x > h))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1666123780,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppvlzts8r.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510504,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:60 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _1 is not a member of Float\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuqtwiojr.scala:6:85 -------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        students.filter(\u001b[36mx\u001b[0m => x._2.isRight && x._2.right.get._1 > h && x._2.right.get._2 > w)\n\u001b[31m\u001b[31m  |\u001b[0m                                                                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                         value _2 is not a member of Float\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuqtwiojr.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => x._2.right.get > h && x._2.left.get > w)\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63qw10ik.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // The input is given as - a map with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    def filterData(students : Map[String,Either[Long, Float]], h : Float, w : Long) : Map[String,Either[Long, Float]] = {\n        students.filter(x => (x._2.right.get > h) && (x._2.left.get > w))\n    }\n    def main(args: Array[String]) = {\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (6.0f), (70l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.9f), (67l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Kierra Gentry\" -> (6.0f, 68l)))));\n    assert(filterData((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l))), (5.7f), (64l)).equals((Map[String,Either[Long, Float]](\"Cierra Vega\" -> (6.2f, 70l), \"Alden Cantrell\" -> (5.9f, 65l), \"Kierra Gentry\" -> (6.0f, 68l), \"Pierre Cox\" -> (5.8f, 66l)))));\n    }\n\n}\n",
      "timestamp": 1665510503,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfo7dhve.scala:9:72 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfo7dhve.scala:9:105 --------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(filterData((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m), \u001b[31m\"Alden Cantrell\"\u001b[0m -> (\u001b[31m5.9f\u001b[0m, \u001b[31m65l\u001b[0m), \u001b[31m\"Kierra Gentry\"\u001b[0m -> (\u001b[31m6.0f\u001b[0m, \u001b[31m68l\u001b[0m), \u001b[31m\"Pierre Cox\"\u001b[0m -> (\u001b[31m5.8f\u001b[0m, \u001b[31m66l\u001b[0m))), (\u001b[31m6.0f\u001b[0m), (\u001b[31m70l\u001b[0m)).equals((Map[\u001b[35mString\u001b[0m,\u001b[35mEither\u001b[0m[\u001b[35mLong\u001b[0m, \u001b[35mFloat\u001b[0m]](\u001b[31m\"Cierra Vega\"\u001b[0m -> (\u001b[31m6.2f\u001b[0m, \u001b[31m70l\u001b[0m)))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                         ^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Float, Long)\n\u001b[31m  |\u001b[0m                                             Required: Either[Long, Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplfo7dhve.scala:9:137 ---------------",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}