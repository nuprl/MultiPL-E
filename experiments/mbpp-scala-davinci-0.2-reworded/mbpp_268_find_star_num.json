{
  "name": "mbpp_268_find_star_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n'th star number.\n    def findStarNum(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findStarNum((3l)) == (37l));\n    assert(findStarNum((4l)) == (73l));\n    assert(findStarNum((5l)) == (121l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 1\n        var count = 0\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        i",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        i",
    "        var x = 1L\n        var count = 0L\n        while (count < n) {\n            x += 1\n            if (isStarNum(x)) count += 1\n        }\n        return x",
    "        var i = 1L\n        var j = 1L\n        var k = 1L\n        var count = 0L\n        while (count < n) {\n            if (i == j && j == k) {\n                count += 1\n                if (count == n) return i\n            }\n            i += 1\n            j = i * i\n            k = i * i * i\n        }\n        -1",
    "        var result = 0L\n        var i = 1L\n        while (i <= n) {\n            result += i\n            i += 1\n        }\n        result",
    "        var i = 1\n        var count = 0\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        i",
    "        var count = 0L\n        var i = 1L\n        while (count < n) {\n            if (isStarNum(i)) count += 1\n            i += 1\n        }\n        return i - 1",
    "        var i = 1;\n        var count = 0;\n        while (count < n) {\n            if (isStarNum(i)) count += 1;\n            i += 1;\n        }\n        return i - 1;",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        i",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        return i",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        i",
    "        var i = 1\n        var count = 0\n        while (count < n) {\n            if (isStarNum(i)) count += 1\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        var cnt = 0L\n        while (cnt < n) {\n            if (isStarNum(i)) cnt += 1\n            i += 1\n        }\n        return i - 1",
    "        var i = 1L;\n        var count = 0L;\n        while (count < n) {\n            if (isStarNum(i)) count += 1;\n            i += 1;\n        }\n        return i - 1;",
    "        var count = 0L\n        var i = 1L\n        while (count < n) {\n            if (isStarNum(i)) count += 1\n            i += 1\n        }\n        i - 1",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            if (isStarNum(i)) count += 1\n            i += 1\n        }\n        i - 1",
    "        val sqrtN = sqrt(n).toLong\n        val sqrtN2 = sqrt(sqrtN).toLong\n        val sqrtN3 = sqrt(sqrtN2).toLong\n        val sqrtN4 = sqrt(sqrtN3).toLong\n        val sqrtN5 = sqrt(sqrtN4).toLong\n        val sqrtN6 = sqrt(sqrtN5).toLong\n        val sqrtN7 = sqrt(sqrtN6).toLong\n        val sqrtN8 = sqrt(sqrtN7).toLong\n        val sqrtN9 = sqrt(sqrtN8).toLong\n        val sqrtN10 = sqrt(sqrtN9).toLong\n        val sqrtN11 = sqrt(sqrtN10).toLong\n        val sqrtN12 = sqrt(sqrtN11).toLong\n        val sqrtN13 = sqrt(sqrtN12).toLong\n        val sqrtN14 = sqrt(sqrtN13).toLong\n        val sqrtN15 = sqrt(sqrtN14).toLong\n        val sqrtN16 = sqrt(sqrtN15).toLong\n        val sqrtN17 = sqrt(sqrtN16).toLong\n        val sqrtN18 = sqrt(sqrtN17).toLong\n        val sqrtN19 = sqrt(sqrtN18).toLong\n        val sqrtN20 = sqrt(sqrtN19).toLong\n        val sqrtN21 = sqrt(sqrtN20).toLong\n        val sqrtN22 = sqrt(sqrtN21).toLong\n        val sqrtN23 = sqrt(sqrtN22).toLong\n        val sqrtN24 = sqrt(sqrtN23).toLong\n        val sqrtN25 = sqrt(sqrtN24).toLong\n        val sqrtN26 = sqrt(sqrtN25).toLong\n        val sqrtN27 = sqrt(sqrtN26).toLong\n        val sqrtN28 = sqrt(sqrtN27).toLong\n        val sqrtN29 = sqrt(sqrt",
    "        var i = 1;\n        var j = 1;\n        var count = 0;\n        while (count < n) {\n            i += 1;\n            j = i * i;\n            if (j.toString.reverse == j.toString) {\n                count += 1;\n            }\n        }\n        return j;",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            if (isStarNum(i)) {\n                count += 1\n                if (count == n) return i\n            }\n            i += 1\n        }\n        return -1",
    "        var i = 1L\n        var count = 0L\n        while (count < n) {\n            i += 1\n            if (isStarNum(i)) count += 1\n        }\n        i"
  ]
}