{
  "name": "mbpp_400_extract_freq",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map) {\n            freq_list = i._2 :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7idtwt7p.scala:27:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7idtwt7p.scala:27:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7idtwt7p.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7idtwt7p.scala:27:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            } else {\n                freq(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6hki8rr.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6hki8rr.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6hki8rr.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq6hki8rr.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq : Map[Long, Long] = Map()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        freq.values.foldLeft(0L)((x, y) => x + y * (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcw7wibb9.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcw7wibb9.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcw7wibb9.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcw7wibb9.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                result += freq_map(test_list(i))\n                freq_map(test_list(i)) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510522,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoyeof9m3.scala:24:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoyeof9m3.scala:24:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoyeof9m3.scala:24:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoyeof9m3.scala:24:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bk_xinw.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bk_xinw.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bk_xinw.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bk_xinw.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510522,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5rmjsefh.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5rmjsefh.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5rmjsefh.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5rmjsefh.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for ((key, value) <- freq_map) {\n            count += value * (value - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpg818xe6y.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            val freq = freq_map(i)\n            result += freq * (freq - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6hbclsh.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6hbclsh.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6hbclsh.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6hbclsh.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcuk4ldh.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcuk4ldh.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcuk4ldh.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcuk4ldh.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                freq_list = (test_list(i) * test_list(j)) :: freq_list\n            }\n        }\n        freq_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510520,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe8g_yy9.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe8g_yy9.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe8g_yy9.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoe8g_yy9.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_uhlvlvw.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_uhlvlvw.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_uhlvlvw.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_uhlvlvw.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var freq_list = List[Long]()\n        for ((k, v) <- freq_map) {\n            freq_list = v :: freq_list\n        }\n        freq_list.sortWith(_ > _).head\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510522,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dilo9kc.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dilo9kc.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dilo9kc.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9dilo9kc.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_b2plwr.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- test_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qiwbs7v.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qiwbs7v.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qiwbs7v.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8qiwbs7v.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8l_cpx71.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Int]\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_sum = freq_list_sorted_rev.sum\n        var freq_list_sorted_rev_sum_half = freq_list_sorted_rev_sum / 2\n        var freq_list_sorted_rev_sum_half_index = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_sum_half)\n        var freq_list_sorted_rev_sum_half_index_next = freq_list_sorted_rev_sum_half_index + 1\n        var freq_list_sorted_rev_sum_half_index_next_sum = 0\n        for (i <- freq_list_sorted_rev_sum_half_index_next until freq_list_sorted_rev.length) {\n            freq_list_sorted_rev_sum_half_index_next_sum += freq_list_sorted_rev(i)\n        }\n        var freq_list_sorted_rev_sum_half_index_next_sum_half = freq_list_sorted_rev_sum_half_index_next_sum / 2\n        var freq_list_sorted_rev_sum_half_index_next_sum_half_index = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpc3l7_baj.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc3l7_baj.scala:30:99 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mfreq_list_sorted_rev_sum_half_index_next_sum_half_index\u001b[0m = freq_list_sorted_rev.indexOf(freq_list_sorted_rev_\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                   ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Not found: freq_list_sorted_rev_\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc3l7_baj.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc3l7_baj.scala:33:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc3l7_baj.scala:33:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        test_list.foreach(x => freq_map(x) = freq_map.getOrElse(x, 0) + 1)\n        freq_map.values.map(x => x * (x - 1) / 2).sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510522,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa7sq0t5v.scala:7:70 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        test_list.foreach(\u001b[36mx\u001b[0m => freq_map(x) = freq_map.getOrElse(x, \u001b[31m0\u001b[0m) + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0mvalue + is not a member of AnyVal, but could be made available as an extension method.\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mOne of the following imports might make progress towards fixing the problem:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m  import math.Fractional.Implicits.infixFractionalOps\n\u001b[31m  |\u001b[0m  import math.Integral.Implicits.infixIntegralOps\n\u001b[31m  |\u001b[0m  import math.Numeric.Implicits.infixNumericOps\n\u001b[31m  |\u001b[0m\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa7sq0t5v.scala:11:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa7sq0t5v.scala:11:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa7sq0t5v.scala:11:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        return test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpivke4f.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpivke4f.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpivke4f.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcpivke4f.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for ((k, v) <- freq) {\n            result += (v * (v - 1)) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hzvgayl.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hzvgayl.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hzvgayl.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_hzvgayl.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            val freq = freq_map(i)\n            result += freq * (freq - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulihw5qc.scala:19:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulihw5qc.scala:19:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulihw5qc.scala:19:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulihw5qc.scala:19:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdtvb4xk.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdtvb4xk.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdtvb4xk.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxdtvb4xk.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3bqph_kq.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3bqph_kq.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3bqph_kq.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3bqph_kq.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9o2s8wz1.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list.sortWith(_ > _).head\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisxg3ynj.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisxg3ynj.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisxg3ynj.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpisxg3ynj.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppzxn7axw.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphcu9pjum.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirat0cky.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirat0cky.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirat0cky.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpirat0cky.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map) {\n            freq_list = freq_list :+ i._2\n        }\n        var result = 1L\n        for (i <- freq_list) {\n            result *= i + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzl10343y.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzl10343y.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzl10343y.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzl10343y.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            }\n            else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj0s0560.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj0s0560.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj0s0560.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfj0s0560.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jxccxvm.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jxccxvm.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jxccxvm.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6jxccxvm.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            }\n            else {\n                test_map(i) = 1\n            }\n        }\n        var result : Long = 0\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzloxubab.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzloxubab.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzloxubab.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzloxubab.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var count = 0\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) == test_list(j)) count += 1\n            }\n            if (!freq_list.contains(count)) freq_list = freq_list :+ count\n        }\n        freq_list.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dd6umjx.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dd6umjx.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dd6umjx.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7dd6umjx.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_set = test_list.toSet\n        val test_map = new HashMap[Long, Long]()\n        for (i <- test_set) {\n            test_map(i) = test_list.count(_ == i)\n        }\n        var result = 0L\n        for (i <- test_set) {\n            result += test_map(i) * (test_map(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdnz_u9d.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdnz_u9d.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdnz_u9d.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdnz_u9d.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvhp6gu6.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvhp6gu6.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvhp6gu6.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfvhp6gu6.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        freq_list.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 1L\n        for (i <- 0 until freq_list.length) {\n            result *= (freq_list(i) + 1)\n        }\n        result - 1\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprbivikdc.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprbivikdc.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprbivikdc.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprbivikdc.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        test_list.foreach(x => {\n            if (freq_map.contains(x)) freq_map(x) += 1\n            else freq_map(x) = 1\n        })\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rfx_zgu.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rfx_zgu.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rfx_zgu.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9rfx_zgu.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) == 1) {\n                result += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzc_v6wz.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzc_v6wz.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzc_v6wz.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzc_v6wz.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (test_map.contains(i)) test_map(i) += 1\n            else test_map(i) = 1\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124019,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzy8ifxwn.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzy8ifxwn.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzy8ifxwn.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzy8ifxwn.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size).values.toList\n        freq.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodst6tib.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodst6tib.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodst6tib.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpodst6tib.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.keys) {\n            result += (freq_map(i) * (freq_map(i) - 1)) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdyx52i5.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdyx52i5.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdyx52i5.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdyx52i5.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list.sortWith(_ > _)(0)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaut101z.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaut101z.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaut101z.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaut101z.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]()\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        freq_list.toList.sorted.reverse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaz7m8w5.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaz7m8w5.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaz7m8w5.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppaz7m8w5.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result : Long = 0\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1elkzywq.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1elkzywq.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1elkzywq.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1elkzywq.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 1L\n        for (i <- freq_map.values) {\n            result *= (i + 1)\n        }\n        return result - 1\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8_w1awr.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8_w1awr.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8_w1awr.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8_w1awr.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq_map.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq1pwkzam.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq1pwkzam.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq1pwkzam.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq1pwkzam.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.reduceLeft(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvqwyp83y.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvqwyp83y.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvqwyp83y.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvqwyp83y.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        return freq_list.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv83_spnk.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv83_spnk.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv83_spnk.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv83_spnk.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85d8_ca_.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85d8_ca_.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85d8_ca_.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp85d8_ca_.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[List[Long], Int]\n        for (i <- 0 until test_list.length - 2) {\n            val tuple = List(test_list(i), test_list(i + 1), test_list(i + 2))\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfh74r2f.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfh74r2f.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfh74r2f.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdfh74r2f.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uwy7end.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uwy7end.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uwy7end.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1uwy7end.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjkla7ta.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_sum = freq_list_sorted_unique.sum\n        return freq_list_sorted_unique_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmobmgwsz.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmobmgwsz.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmobmgwsz.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmobmgwsz.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq += (test_list(i) -> 1)\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox8jzqo2.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox8jzqo2.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox8jzqo2.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpox8jzqo2.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4v67p94r.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4v67p94r.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4v67p94r.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4v67p94r.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) freq(key) += 1\n            else freq(key) = 1\n        }\n        freq.values.foldLeft(0L)((x, y) => x + y * (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5r_3f5ki.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5r_3f5ki.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5r_3f5ki.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5r_3f5ki.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            } else {\n                freq(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq) {\n            result += value * (value - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2uwmt0y.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2uwmt0y.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2uwmt0y.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz2uwmt0y.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        var map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (!map.contains(test_list(i))) {\n                map(test_list(i)) = 1L\n            }\n            else {\n                map(test_list(i)) += 1L\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                if (map(test_list(i)) > 0 && map(test_list(j)) > 0) {\n                    freq += 1\n                    map(test_list(i)) -= 1\n                    map(test_list(j)) -= 1\n                }\n            }\n        }\n        return freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoei0mvre.scala:28:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoei0mvre.scala:28:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoei0mvre.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpoei0mvre.scala:28:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var count = 0\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7oo8kjf.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7oo8kjf.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7oo8kjf.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi7oo8kjf.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.distinct.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124048,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_pcygpa.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_pcygpa.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_pcygpa.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm_pcygpa.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (map.contains(key)) {\n                map(key) += 1\n            } else {\n                map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124049,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_xvct_.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_xvct_.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_xvct_.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvq_xvct_.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_unique = freq_list_sorted.distinct\n        var freq_list_sorted_unique_count = freq_list_sorted_unique.length\n        freq_list_sorted_unique_count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124050,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulf9qxuv.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulf9qxuv.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulf9qxuv.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpulf9qxuv.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124051,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi36295vd.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi36295vd.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi36295vd.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi36295vd.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) -= 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124050,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8lw2ee3u.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8lw2ee3u.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8lw2ee3u.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8lw2ee3u.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 1L\n        for (i <- freq_map.values) {\n            result *= (i + 1)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpinxmarmo.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpinxmarmo.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpinxmarmo.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpinxmarmo.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_list = test_list.groupBy(identity).mapValues(_.size)\n        freq_list.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpezdbcyrt.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124050,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa3a_a8z4.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfc45om7d.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            if (i > 1) count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9u2hyeo.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9u2hyeo.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9u2hyeo.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9u2hyeo.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124051,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr1o3e2i3.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr1o3e2i3.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr1o3e2i3.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr1o3e2i3.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124051,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                val value = freq_map(key)\n                freq_map(key) = value + 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7s33c0_m.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7s33c0_m.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7s33c0_m.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7s33c0_m.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        val freq_list = freq_map.values.toList\n        val freq_list_sorted = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- freq_list_sorted) {\n            result += i * (i - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeyxitui.scala:20:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeyxitui.scala:20:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeyxitui.scala:20:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeyxitui.scala:20:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbzks3_hv.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbmhkdfr6.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbmhkdfr6.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbmhkdfr6.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbmhkdfr6.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i == 1) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyljht10.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyljht10.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyljht10.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyljht10.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val freq = freq_map(test_list(i))\n            result += freq * (freq - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124053,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcv5lew3j.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcv5lew3j.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcv5lew3j.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcv5lew3j.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaddzui9p.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaddzui9p.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaddzui9p.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaddzui9p.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sorted\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            for (j <- i + 1 until freq_list.length) {\n                result += freq_list(i) * freq_list(j)\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7rfek7r.scala:28:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7rfek7r.scala:28:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7rfek7r.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps7rfek7r.scala:28:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124054,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5me7_9tp.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5me7_9tp.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5me7_9tp.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5me7_9tp.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var total_freq = 0L\n        for (i <- freq_map.values) {\n            total_freq += i * (i - 1) / 2\n        }\n        total_freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124052,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3vbpf2l.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3vbpf2l.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3vbpf2l.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3vbpf2l.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10rya2mk.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10rya2mk.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10rya2mk.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp10rya2mk.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124055,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1qo24wt.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1qo24wt.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1qo24wt.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1qo24wt.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph6u9v0fz.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb5bc515y.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb5bc515y.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb5bc515y.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb5bc515y.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponepvrhd.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponepvrhd.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponepvrhd.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmponepvrhd.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            }\n            else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- freq.values) {\n            sum += i * (i - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ft48rb.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ft48rb.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ft48rb.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7ft48rb.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var total_freq = 0L\n        for (i <- freq_map.values) {\n            total_freq += i * (i - 1) / 2\n        }\n        total_freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpijj0p5gh.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpijj0p5gh.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpijj0p5gh.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpijj0p5gh.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8s32mvcn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73axfgyz.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73axfgyz.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73axfgyz.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73axfgyz.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for ((key, value) <- freq_map) {\n            result += value * (value - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx3ni7mi8.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx3ni7mi8.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx3ni7mi8.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx3ni7mi8.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuux85x5g.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuux85x5g.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuux85x5g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuux85x5g.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key) - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t_kh2ln.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t_kh2ln.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t_kh2ln.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t_kh2ln.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pt_tfon.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pt_tfon.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pt_tfon.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pt_tfon.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zclepvl.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zclepvl.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zclepvl.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7zclepvl.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq.contains(tuple)) {\n                freq(tuple) += 1\n            } else {\n                freq(tuple) = 1\n            }\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124081,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprge_bcbg.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map += (i -> 1)\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx7a8oti7.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx7a8oti7.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx7a8oti7.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx7a8oti7.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var sum = 0L\n        for ((key, value) <- freq_map) {\n            sum += value * (value - 1) / 2\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i92i27.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i92i27.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i92i27.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i92i27.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv4pju1v1.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for ((k, v) <- freq_map) {\n            result += (v * (v - 1) / 2)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124084,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzx_61qly.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzx_61qly.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzx_61qly.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzx_61qly.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            if (i > 1) {\n                result += i * (i - 1)\n            }\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3pg5ru9.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3pg5ru9.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3pg5ru9.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi3pg5ru9.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        val freq_list = freq_map.values.toList\n        var count = 0\n        for (i <- 0 until freq_list.length) {\n            for (j <- i + 1 until freq_list.length) {\n                count += freq_list(i) * freq_list(j)\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124086,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73lt8_zw.scala:25:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73lt8_zw.scala:25:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73lt8_zw.scala:25:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp73lt8_zw.scala:25:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124085,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6gf_a1a.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6gf_a1a.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6gf_a1a.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb6gf_a1a.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            count += i * (i - 1) / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeucfr34.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeucfr34.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeucfr34.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeucfr34.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (key <- freq_map.keys) {\n            val freq = freq_map(key)\n            result += freq * (freq - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) = freq_map(test_list(i)) + 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count : Long = 0\n        for (i <- freq_map.keys) {\n            if (freq_map(i) > 1) {\n                count += (freq_map(i) * (freq_map(i) - 1)) / 2\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124107,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4kk9_qk1.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4kk9_qk1.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4kk9_qk1.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4kk9_qk1.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq.values) {\n            total += i * (i - 1) / 2\n        }\n        return total\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124108,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvml9p0fw.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvml9p0fw.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvml9p0fw.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvml9p0fw.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt806kd3m.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sortWith(_ > _)\n        var freq_list_sorted_set = freq_list_sorted.toSet\n        var freq_list_sorted_set_list = freq_list_sorted_set.toList\n        var freq_list_sorted_set_list_sorted = freq_list_sorted_set_list.sortWith(_ > _)\n        var freq_list_sorted_set_list_sorted_map = new HashMap[Long, Long]\n        for (i <- 0 until freq_list_sorted_set_list_sorted.length) {\n            freq_list_sorted_set_list_sorted_map(freq_list_sorted_set_list_sorted(i)) = 0\n        }\n        for (i <- 0 until freq_list_sorted.length) {\n            freq_list_sorted_set_list_sorted_map(freq_list_sorted(i)) += 1\n        }\n        var freq_list_sorted_set_list_sorted_map_list = freq_list_sorted_set_list_sorted_map.values.toList\n        var freq_list_sorted_set_list_sorted_map_list_sorted = freq_list_sorted_set_list_sorted_map_list.sortWith(_ > _)\n        var freq_list_sorted_set_list_sorted_map_list_sorted_set = freq_list_sorted_set_list_sorted_map_list_sorted.toSet\n        var fre\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpncp69l0m.scala:30:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncp69l0m.scala:30:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncp69l0m.scala:32:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncp69l0m.scala:32:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpncp69l0m.scala:32:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for ((key, value) <- freq_map) {\n            freq_list = value :: freq_list\n        }\n        freq_list.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfy2_gum9.scala:19:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        freq_list.sortWith(_ < _)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfy2_gum9.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfy2_gum9.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfy2_gum9.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Lo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_unique = freq_list_sorted_rev.distinct\n        var freq_list_sorted_rev_unique_sum = freq_list_sorted_rev_unique.sum\n        freq_list_sorted_rev_unique_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmyiyeup.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmyiyeup.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmyiyeup.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmyiyeup.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpslegwi89.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpslegwi89.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpslegwi89.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpslegwi89.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ < _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8rev9h7.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8rev9h7.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8rev9h7.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv8rev9h7.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val unique_tuples = test_list.distinct\n        unique_tuples.length\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf7lsbkr.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf7lsbkr.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf7lsbkr.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf7lsbkr.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) freq_map(key) += 1\n            else freq_map(key) = 1\n        }\n        freq_map.values.foldLeft(0L)(_ + _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_i5zvvxl.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_i5zvvxl.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_i5zvvxl.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_i5zvvxl.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_set = test_list.toSet\n        return test_set.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxh2_kb8v.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxh2_kb8v.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxh2_kb8v.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxh2_kb8v.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(x => x).map(x => x._2.length).sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppc2y70qg.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeo73ykcv.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeo73ykcv.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeo73ykcv.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpeo73ykcv.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9zwt_cqs.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) freq(test_list(i)) += 1\n            else freq(test_list(i)) = 1\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                result += freq(test_list(i))\n                freq(test_list(i)) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaqjk9n2s.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaqjk9n2s.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaqjk9n2s.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpaqjk9n2s.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1 else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwf_2hoy.scala:13:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwf_2hoy.scala:13:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwf_2hoy.scala:13:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwf_2hoy.scala:13:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val tuple = (test_list(i), test_list(j))\n                if (freq_map.contains(tuple)) freq_map(tuple) += 1\n                else freq_map(tuple) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4x36jxk4.scala:10:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mif\u001b[0m (freq_map.contains(tuple)) freq_map(tuple) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    (tuple : (Long, Long))\n\u001b[31m   |\u001b[0m                                      Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4x36jxk4.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mif\u001b[0m (freq_map.contains(tuple)) freq_map(tuple) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    (tuple : (Long, Long))\n\u001b[31m   |\u001b[0m                                        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4x36jxk4.scala:11:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m freq_map(tuple) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (tuple : (Long, Long))\n\u001b[31m   |\u001b[0m                              Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4x36jxk4.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (freq_map.contains(tuple)) {\n                freq_map(tuple) += 1\n            } else {\n                freq_map(tuple) = 1\n            }\n        }\n        return freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb702jji.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb702jji.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb702jji.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcb702jji.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq.contains(key)) {\n                freq(key) += 1\n            }\n            else {\n                freq(key) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq.keys) {\n            val value = freq(i)\n            count += value * (value - 1) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124115,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2tew15id.scala:24:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2tew15id.scala:24:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2tew15id.scala:24:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2tew15id.scala:24:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7sy9bv4x.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7sy9bv4x.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7sy9bv4x.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7sy9bv4x.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        val freq_list = freq_map.values.toList\n        val freq_list_sorted = freq_list.sorted\n        val freq_list_sorted_rev = freq_list_sorted.reverse\n        val freq_list_sorted_rev_uniq = freq_list_sorted_rev.distinct\n        val freq_list_sorted_rev_uniq_sum = freq_list_sorted_rev_uniq.sum\n        freq_list_sorted_rev_uniq_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124117,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcuprfqzf.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcuprfqzf.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcuprfqzf.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcuprfqzf.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[(Long, Long), Long]\n        for (i <- 0 until test_list.length - 1) {\n            val tuple = (test_list(i), test_list(i + 1))\n            if (freq.contains(tuple)) freq(tuple) += 1\n            else freq(tuple) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124118,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp188tdxnh.scala:15:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp188tdxnh.scala:15:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp188tdxnh.scala:15:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp188tdxnh.scala:15:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq.contains(i)) {\n                freq(i) += 1\n            } else {\n                freq(i) = 1\n            }\n        }\n        return freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124119,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpft8xo0qg.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        test_list.groupBy(identity).mapValues(_.size).values.sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124051,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:35 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                   Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:45 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                             Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:55 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m  |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                    Found:    (Long, Long)\n\u001b[31m  |\u001b[0m                                                    Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfybb9qh9.scala:9:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (!freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) = 1\n            } else {\n                freq_map(test_list(i)) += 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124138,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75xsfrft.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75xsfrft.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75xsfrft.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75xsfrft.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0L\n        for (i <- freq_map.values) {\n            count += (i * (i - 1)) / 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124137,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88022_m_.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88022_m_.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88022_m_.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp88022_m_.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Int]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_map(i) :: freq_list\n        }\n        freq_list = freq_list.sortWith(_ > _)\n        var result = 0L\n        for (i <- 0 until freq_list.length) {\n            result += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyjiym6dp.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyjiym6dp.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyjiym6dp.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyjiym6dp.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        // Write your code here\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt10wsp8u.scala:11:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt10wsp8u.scala:11:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt10wsp8u.scala:11:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt10wsp8u.scala:11:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.values.foldLeft(1L)(_ * _)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2knrgy2p.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2knrgy2p.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2knrgy2p.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2knrgy2p.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_sorted = freq_list.sorted\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_unique = freq_list_sorted_rev.distinct\n        var freq_list_sorted_rev_unique_sum = freq_list_sorted_rev_unique.sum\n        return freq_list_sorted_rev_unique_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphggri6yg.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphggri6yg.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphggri6yg.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphggri6yg.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key)\n                freq_map(key) = 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu27u_81k.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu27u_81k.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu27u_81k.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu27u_81k.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbdfsi8r4.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbdfsi8r4.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbdfsi8r4.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbdfsi8r4.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = 0L\n        var test_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_map.contains(test_list(i))) {\n                test_map(test_list(i)) += 1\n            } else {\n                test_map(test_list(i)) = 1\n            }\n        }\n        for (i <- test_map.values) {\n            freq += i * (i - 1) / 2\n        }\n        return freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv89ywhlv.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv89ywhlv.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv89ywhlv.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv89ywhlv.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq.contains(test_list(i))) {\n                freq(test_list(i)) += 1\n            } else {\n                freq(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiipwloge.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = new ListBuffer[Long]\n        for (i <- freq_map.keys) {\n            freq_list += freq_map(i)\n        }\n        freq_list.toList.sorted.reverse(0)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i82134.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i82134.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i82134.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp57i82134.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = List[Long]()\n        for (i <- freq_map.keys) {\n            freq_list = freq_list :+ freq_map(i)\n        }\n        freq_list.sorted.reverse.head\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124139,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgt9gcm2.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgt9gcm2.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgt9gcm2.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppgt9gcm2.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbc06n48.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbc06n48.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbc06n48.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphbc06n48.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124140,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsejyle92.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsejyle92.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsejyle92.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsejyle92.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        return freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124142,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqquqhau5.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqquqhau5.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqquqhau5.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqquqhau5.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) freq_map(test_list(i)) += 1\n            else freq_map(test_list(i)) = 1\n        }\n        var result = 0L\n        for ((k, v) <- freq_map) {\n            if (v > 1) result += v * (v - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124142,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dtqwd68.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dtqwd68.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dtqwd68.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2dtqwd68.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_sum = 0\n        for (i <- 0 until freq_list.length) {\n            freq_sum += freq_list(i) * (freq_list(i) - 1) / 2\n        }\n        return freq_sum\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124141,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbxhfmj84.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbxhfmj84.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbxhfmj84.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbxhfmj84.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqlxaoqd_.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpor4farjn.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- test_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124082,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbtuhlzid.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            }\n            else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124142,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2g_a1te.scala:22:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2g_a1te.scala:22:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2g_a1te.scala:22:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpe2g_a1te.scala:22:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        freq_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124077,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_3hnt62q.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- test_list) {\n            if (freq_map.contains(i)) freq_map(i) += 1\n            else freq_map(i) = 1\n        }\n        var count = 0\n        for (i <- freq_map.values) {\n            if (i > 1) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124144,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzygd51r.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzygd51r.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzygd51r.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjzygd51r.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq.contains(i)) freq(i) += 1\n            else freq(i) = 1\n        }\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124022,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqzjnbd0g.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- test_list) {\n            if (freq_map.contains(i)) {\n                freq_map(i) += 1\n            } else {\n                freq_map(i) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf24_k_hm.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.toList\n        var freq_list_sorted = freq_list.sortBy(_._2)\n        var freq_list_sorted_rev = freq_list_sorted.reverse\n        var freq_list_sorted_rev_head = freq_list_sorted_rev.head\n        var freq_list_sorted_rev_head_value = freq_list_sorted_rev_head._2\n        var freq_list_sorted_rev_head_value_count = 0\n        for (i <- 0 until freq_list_sorted_rev.length) {\n            if (freq_list_sorted_rev(i)._2 == freq_list_sorted_rev_head_value) {\n                freq_list_sorted_rev_head_value_count += 1\n            }\n        }\n        freq_list_sorted_rev_head_value_count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjk922t.scala:28:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjk922t.scala:28:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjk922t.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvnjk922t.scala:28:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val l = test_list.sorted\n        var count = 0\n        for (i <- 0 until l.length - 1) {\n            if (l(i) != l(i + 1)) count += 1\n        }\n        count + 1\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wlmz_rx.scala:14:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wlmz_rx.scala:14:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wlmz_rx.scala:14:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9wlmz_rx.scala:14:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val num = test_list(i)\n            if (freq_map.contains(num)) {\n                freq_map(num) += 1\n            } else {\n                freq_map(num) = 1\n            }\n        }\n        freq_map.values.foldLeft(0L)((a, b) => a + b * (b - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124146,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbekzm1fy.scala:18:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbekzm1fy.scala:18:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbekzm1fy.scala:18:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbekzm1fy.scala:18:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = Map[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            }\n            else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var freq_list = freq_map.values.toList\n        var freq_list_set = freq_list.toSet\n        var freq_list_set_list = freq_list_set.toList\n        var freq_list_set_list_sorted = freq_list_set_list.sortWith(_ < _)\n        var freq_list_set_list_sorted_reverse = freq_list_set_list_sorted.reverse\n        var freq_list_set_list_sorted_reverse_map = Map[Long, Long]()\n        for (i <- 0 until freq_list_set_list_sorted_reverse.length) {\n            freq_list_set_list_sorted_reverse_map(freq_list_set_list_sorted_reverse(i)) = i\n        }\n        var freq_list_sorted = freq_list.sortWith(_ < _)\n        var freq_list_sorted_reverse = freq_list_sorted.reverse\n        var freq_list_sorted_reverse_map = Map[Long, Long]()\n        for (i <- 0 until freq_list_sorted_reverse.length) {\n            freq_list_sorted_reverse_map(freq_list_sorted_reverse(i)) = i\n        }\n        var freq_list_sorted_reverse_map_list = freq_list_sorted_reverse_map.values.toList\n        var freq_list_sorted_reverse_map_list_sorted = freq_list_sorted_reverse_map_list.sortWith(_ < _)\n        var freq_list_sorted_reverse_map_list_sorted_reverse = freq\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp91cq6wxr.scala:32:63 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mfreq_list_sorted_reverse_map_list_sorted_reverse\u001b[0m = freq\n\u001b[31m\u001b[31m   |\u001b[0m                                                               ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                         Not found: freq\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91cq6wxr.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91cq6wxr.scala:35:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91cq6wxr.scala:35:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91cq6wxr.scala:35:55 --------------------\u001b[0m\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var count = 0\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                if (test_list(i) == test_list(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124147,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrld5amf.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrld5amf.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrld5amf.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfrld5amf.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]()\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (key <- freq_map.keys) {\n            val freq = freq_map(key)\n            result += freq * (freq - 1) / 2\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfs5s0x4d.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq = test_list.groupBy(identity).mapValues(_.size)\n        freq.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510521,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgj5ae2jp.scala:10:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Int]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var result = 0L\n        for (i <- freq_map.values) {\n            result += i * (i - 1) / 2\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124152,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sevtpjy.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sevtpjy.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sevtpjy.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sevtpjy.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        var freq_map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var count = 0\n        for ((k, v) <- freq_map) {\n            if (v == 1) {\n                count += 1\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pzjgvir.scala:23:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pzjgvir.scala:23:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pzjgvir.scala:23:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5pzjgvir.scala:23:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            if (freq_map.contains(test_list(i))) {\n                freq_map(test_list(i)) += 1\n            } else {\n                freq_map(test_list(i)) = 1\n            }\n        }\n        var total = 0L\n        for (i <- freq_map.values) {\n            total += i * (i - 1) / 2\n        }\n        return total\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvfdqwo34.scala:21:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvfdqwo34.scala:21:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvfdqwo34.scala:21:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvfdqwo34.scala:21:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val test_map = new HashMap[Long, Int]\n        for (i <- test_list) {\n            if (test_map.contains(i)) {\n                test_map(i) += 1\n            } else {\n                test_map(i) = 1\n            }\n        }\n        test_map.size\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmh2if3l.scala:17:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmh2if3l.scala:17:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmh2if3l.scala:17:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdmh2if3l.scala:17:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to extract the number of unique tuples in the given list.\n    def extractFreq(test_list : List[Long]) : Long = {\n        val freq_map = new HashMap[Long, Long]\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map.contains(key)) {\n                freq_map(key) += 1\n            } else {\n                freq_map(key) = 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until test_list.length) {\n            val key = test_list(i)\n            if (freq_map(key) > 1) {\n                result += freq_map(key)\n                freq_map(key) = 0\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(extractFreq((List[Long]((3l, 4l), (1l, 2l), (4l, 3l), (5l, 6l)))) == (3l));\n    assert(extractFreq((List[Long]((4l, 15l), (2l, 3l), (5l, 4l), (6l, 7l)))) == (4l));\n    assert(extractFreq((List[Long]((5l, 16l), (2l, 3l), (6l, 5l), (6l, 9l)))) == (4l));\n    }\n\n}\n",
      "timestamp": 1666124153,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7h2_x7ae.scala:26:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                   Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7h2_x7ae.scala:26:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                             Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7h2_x7ae.scala:26:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m), (\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m)))) == (\u001b[31m3l\u001b[0m));\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                  Found:    (Long, Long)\n\u001b[31m   |\u001b[0m                                                  Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7h2_x7ae.scala:26:65 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(extractFreq((List[\u001b[35mLong\u001b[0m]((\u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m), (\u001b[31m4l\u001b[0m, \u001b[31m3l\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}