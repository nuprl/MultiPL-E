{
  "name": "mbpp_793_last",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the last position of an element in a sorted list.\n    def last(arr : List[Long], x : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(last((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (1l)) == (0l));\n    assert(last((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (1l)) == (2l));\n    assert(last((List[Long](2l.toLong, 3l.toLong, 2l.toLong, 3l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (3l)) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var l = 0;\n        var r = arr.length - 1;\n        var result = -1;\n        while(l <= r) {\n            val mid = (l + r) / 2;\n            if(arr(mid) == x) {\n                result = mid;\n                l = mid + 1;\n            }\n            else if(arr(mid) < x) l = mid + 1;\n            else r = mid - 1;\n        }\n        result;",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, low, mid - 1)\n                else last(arr, x, mid + 1, high)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) == x) {\n                result = mid\n                low = mid + 1\n            }\n            else if (arr(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result",
    "        def last(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (arr(mid.toInt) == x) {\n                if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) return mid\n                else return last(arr, x, mid + 1, high)\n            }\n            else if (arr(mid.toInt) > x) return last(arr, x, low, mid - 1)\n            else return last(arr, x, mid + 1, high)\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var low = 0\n        var high = arr.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) <= x) {\n                result = mid\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n        result",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) == x) {\n                ans = m\n                l = m + 1\n            } else if (arr(m) > x) r = m - 1\n            else l = m + 1\n        }\n        ans",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        def binarySearch(arr : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) > x) mid\n                    else binarySearch(arr, x, mid + 1, high)\n                }\n                else if (arr(mid.toInt) > x) binarySearch(arr, x, low, mid - 1)\n                else binarySearch(arr, x, mid + 1, high)\n            }\n        }\n        binarySearch(arr, x, 0, arr.length - 1)",
    "        if (arr.isEmpty) -1\n        else if (arr.head == x) arr.length - 1\n        else last(arr.tail, x)",
    "        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == x) {\n                ans = mid\n                l = mid + 1\n            } else if (arr(mid) < x) {\n                l = mid + 1\n            } else {\n                r = mid - 1\n            }\n        }\n        ans",
    "        var l = 0;\n        var r = arr.length - 1;\n        var m = 0;\n        var result = -1;\n        while (l <= r) {\n            m = (l + r) / 2;\n            if (arr(m) == x) {\n                result = m;\n                l = m + 1;\n            } else if (arr(m) > x) {\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        result;",
    "        var l = 0\n        var r = arr.length - 1\n        var ans = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) {\n                ans = m\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        ans",
    "        def last(arr : List[Long], x : Long, index : Long) : Long = {\n            if (arr.isEmpty) -1\n            else if (arr.head == x) index\n            else last(arr.tail, x, index + 1)\n        }\n        last(arr, x, 0)",
    "        def last(arr : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (arr(mid.toInt) == x) {\n                    if (mid == arr.length - 1 || arr(mid.toInt + 1) != x) mid\n                    else last(arr, x, mid + 1, end)\n                }\n                else if (arr(mid.toInt) > x) last(arr, x, start, mid - 1)\n                else last(arr, x, mid + 1, end)\n            }\n        }\n        last(arr, x, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == x) {\n                if (mid == arr.length - 1 || arr(mid + 1) != x) return mid\n                else left = mid + 1\n            }\n            else if (arr(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        -1",
    "        var l = 0\n        var r = arr.length - 1\n        var m = (l + r) / 2\n        while (l < r) {\n            if (arr(m) <= x) l = m + 1\n            else r = m\n            m = (l + r) / 2\n        }\n        if (arr(l) == x) l\n        else -1",
    "        var i = 0\n        var j = arr.length - 1\n        var res = -1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == x) {\n                res = mid\n                i = mid + 1\n            } else if (arr(mid) < x) {\n                i = mid + 1\n            } else {\n                j = mid - 1\n            }\n        }\n        res",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) <= x) l = m + 1\n            else r = m\n        }\n        if (arr(l) == x) l else -1"
  ]
}