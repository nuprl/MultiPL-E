{
  "name": "mbpp_780_find_combinations",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/scalathon-combinations-of-sum-with-tuples-in-tuple-list/\n    def findCombinations(test_list : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findCombinations((List[Long]((2l, 4l), (6l, 7l), (5l, 1l), (6l, 10l)))).equals((List[Long]((8l, 11l), (7l, 5l), (8l, 14l), (11l, 8l), (12l, 17l), (11l, 11l)))));\n    assert(findCombinations((List[Long]((3l, 5l), (7l, 8l), (6l, 2l), (7l, 11l)))).equals((List[Long]((10l, 13l), (9l, 7l), (10l, 16l), (13l, 10l), (14l, 19l), (13l, 13l)))));\n    assert(findCombinations((List[Long]((4l, 6l), (8l, 9l), (7l, 3l), (8l, 12l)))).equals((List[Long]((12l, 15l), (11l, 9l), (12l, 18l), (15l, 12l), (16l, 21l), (15l, 15l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = ListBuffer[Long]()\n        for (i <- test_list.indices) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_sum = test_list_sorted_set.sum\n        val test_list_sorted_set_sum_half = test_list_sorted_set_sum / 2\n        val test_list_sorted_set_sum_half_ceil = ceil(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_floor = floor(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_ceil_index = test_list_sorted.indexOf(test_list_sorted_set_sum_half_ceil)\n        val test_list_sorted_set_sum_half_floor_index = test_list_sorted.indexOf(test_list_sorted_set_sum_half_floor)\n        val test_list_sorted_set_sum_half_ceil_index_plus_one = test_list_sorted_set_sum_half_ceil_index + 1\n        val test_list_sorted_set_sum_half_floor_index_plus_one = test_list_sorted_set_sum_half_floor_index + 1\n        val test_list_sorted_set_sum_half_ceil_index_plus_one_half = test_list_sorted_set_sum_half_ceil_index_plus_one / 2\n        val test_list_sorted_set_sum_half_floor_index_plus_one_half = test_list_sorted_set_sum_half_floor_index_plus_one / 2\n        val",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2)\n        val test_list_sorted_set_list_combinations_list = test_list_sorted_set_list_combinations.toList\n        val test_list_sorted_set_list_combinations_list_size = test_list_sorted_set_list_combinations_list.size\n        val test_list_sorted_set_list_combinations_list_sum = test_list_sorted_set_list_combinations_list.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_list_sum_set = test_list_sorted_set_list_combinations_list_sum.toSet\n        val test_list_sorted_set_list_combinations_list_sum_set_list = test_list_sorted_set_list_combinations_list_sum_set.toList\n        val test_list_sorted_set_list_combinations_list_sum_set_list_size = test_list_sorted_set_list_combinations_list_sum_set_list.size\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted = test_list_sorted_set_list_combinations_list_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted_size = test_list_sorted_set_list_combinations_list_sum_set_list_sorted.",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil = ceil(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_floor = floor(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_ceil_list = test_list_sorted_set_list.slice(0, test_list_sorted_set_list_size_half_ceil)\n        val test_list_sorted_set_list_size_half_floor_list = test_list_sorted_set_list.slice(test_list_sorted_set_list_size_half_floor, test_list_sorted_set_list_size)\n        val test_list_sorted_set_list_size_half_ceil_list_size = test_list_sorted_set_list_size_half_ceil_list.size\n        val test_list_sorted_set_list_size_half_floor_list_size = test_list_sorted_set_list_size_half_floor_list.size\n        val test_list_sorted_set_list_size_half_ceil_list_size_half = test_list_sorted_set_list_size_half_ceil_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil_list_size_",
    "        val n = test_list.length\n        val m = test_list.max\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_one = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_one = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_plus_one_half = test_list_sorted_set_list_size_half_plus_one / 2\n        val test_list_sorted_set_list_size_half_minus_one_half = test_list_sorted_set_list_size_half_minus_one / 2\n        val test_list_sorted_set_list_size_half_plus_one_half_minus_one = test_list_sorted_set_list_size_half_plus_one_half - 1\n        val test_list_sorted_set_list_size_half_minus_one_half_minus_one = test_list_sorted_set_list_size_half_minus_one_half - 1\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one = test_list_sorted_set_list_size_half_plus_one_half + 1\n        val test_list_sorted_set_list_size_half_minus_one_half_plus_one = test_list_sorted_set_list_size_half_minus_one_half + 1\n       ",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_length = test_list_sorted.length\n        val test_list_sorted_sum = test_list_sorted.sum\n        val test_list_sorted_sum_half = test_list_sorted_sum / 2\n        val test_list_sorted_sum_half_ceil = ceil(test_list_sorted_sum_half).toLong\n        val test_list_sorted_sum_half_floor = floor(test_list_sorted_sum_half).toLong\n        val test_list_sorted_sum_half_ceil_index = test_list_sorted.indexOf(test_list_sorted_sum_half_ceil)\n        val test_list_sorted_sum_half_floor_index = test_list_sorted.indexOf(test_list_sorted_sum_half_floor)\n        val test_list_sorted_sum_half_ceil_index_next = test_list_sorted_sum_half_ceil_index + 1\n        val test_list_sorted_sum_half_floor_index_next = test_list_sorted_sum_half_floor_index + 1\n        val test_list_sorted_sum_half_ceil_index_next_next = test_list_sorted_sum_half_ceil_index_next + 1\n        val test_list_sorted_sum_half_floor_index_next_next = test_list_sorted_sum_half_floor_index_next + 1\n        val test_list_sorted_sum_half_ceil_index_next_next_next = test_list_sorted_sum_half_ceil_index_next_next + 1\n        val test_list_sorted_sum_half_floor_index_next_next_next = test_list_sorted_sum_half_floor_index_next_next + 1\n        val test_list_sorted_sum_half_ceil_index_next_next_next_next = test_list_sorted_sum_half_",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_range = test_list_sorted_set_max - test_list_sorted_set_min\n        val test_list_sorted_set_range_half = test_list_sorted_set_range / 2\n        val test_list_sorted_set_range_half_floor = floor(test_list_sorted_set_range_half).toLong\n        val test_list_sorted_set_range_half_ceil = ceil(test_list_sorted_set_range_half).toLong\n        val test_list_sorted_set_range_half_floor_list = List.fill(test_list_sorted_set_size)(test_list_sorted_set_range_half_floor)\n        val test_list_sorted_set_range_half_ceil_list = List.fill(test_list_sorted_set_size)(test_list_sorted_set_range_half_ceil)\n        val test_list_sorted_set_range_half_floor_list_sum = test_list_sorted_set_range_half_floor_list.sum\n        val test_list_sorted_set_range_half_ceil_list_sum = test_list_sorted_set_range_half_ceil_list.sum\n        val test_list_sorted_set_range_half_floor_list_sum_half = test_list_sorted_set_range_half_floor_list_sum / 2\n        val test_list_sorted_set_range_half_ceil_list_sum_half = test_list_sorted_set_range_half_ceil",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]()\n        val test_list_size = test_list.size\n        for (i <- 0 until test_list_size) {\n            val current_tuple = test_list(i)\n            val current_tuple_size = current_tuple.size\n            for (j <- 0 until current_tuple_size) {\n                val current_value = current_tuple(j)\n                for (k <- i + 1 until test_list_size) {\n                    val next_tuple = test_list(k)\n                    val next_tuple_size = next_tuple.size\n                    for (l <- 0 until next_tuple_size) {\n                        val next_value = next_tuple(l)\n                        if (current_value + next_value == 0) {\n                            result += current_value\n                            result += next_value\n                        }\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_combinations = test_list_sorted_set.subsets(test_list_sorted_set_size - 1).toList\n        val test_list_sorted_set_combinations_sum = test_list_sorted_set_combinations.map(x => x.sum)\n        val test_list_sorted_set_combinations_sum_sorted = test_list_sorted_set_combinations_sum.sorted\n        test_list_sorted_set_combinations_sum_sorted",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_range = test_list_sorted_set_max - test_list_sorted_set_min\n        val test_list_sorted_set_range_half = test_list_sorted_set_range / 2\n        val test_list_sorted_set_range_half_ceil = ceil(test_list_sorted_set_range_half).toLong\n        val test_list_sorted_set_range_half_floor = floor(test_list_sorted_set_range_half).toLong\n        val test_list_sorted_set_range_half_ceil_list = List.fill(test_list_sorted_set_size)(test_list_sorted_set_range_half_ceil)\n        val test_list_sorted_set_range_half_floor_list = List.fill(test_list_sorted_set_size)(test_list_sorted_set_range_half_floor)\n        val test_list_sorted_set_range_half_ceil_list_sum = test_list_sorted_set_range_half_ceil_list.sum\n        val test_list_sorted_set_range_half_floor_list_sum = test_list_sorted_set_range_half_floor_list.sum\n        val test_list_sorted_set_range_half_ceil_list_sum_set = test_list_sorted_set_range_half_ceil_list.toSet\n        val test_list_sorted_set_range_half_floor_list_sum_set = test_list_sorted_set_range_half_floor_",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        def findCombinations(test_list : List[Long], acc : List[Long]) : List[Long] = {\n            if (test_list.isEmpty) acc\n            else {\n                val new_acc = acc ::: test_list.map(x => x + acc.last)\n                findCombinations(test_list.tail, new_acc)\n            }\n        }\n        findCombinations(test_list, List(0))",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val combinations = new ListBuffer[Long]\n        for (i <- 0 until test_list.size) {\n            for (j <- i + 1 until test_list.size) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_size = test_list_sorted_set_list_combinations.size\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_sum_size = test_list_sorted_set_list_combinations_sum.size\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_size = test_list_sorted_set_list_combinations_sum_set.size\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        val test_list_sorted_set_list_combinations_sum_set_list_size = test_list_sorted_set_list_combinations_sum_set_list.size\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted = test_list_sorted_set_list_combinations_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted_size = test_list_",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        def findCombinations(test_list : List[Long], result : List[Long]) : List[Long] = {\n            if (test_list.length == 1) result\n            else {\n                val new_result = result ::: test_list.combinations(2).map(x => x(0) + x(1)).toList\n                findCombinations(test_list.tail, new_result)\n            }\n        }\n        findCombinations(test_list, List())",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_sum = test_list_sorted_set.sum\n        val test_list_sorted_set_sum_half = test_list_sorted_set_sum / 2\n        val test_list_sorted_set_sum_half_ceil = ceil(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_floor = floor(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_ceil_diff = test_list_sorted_set_sum_half_ceil - test_list_sorted_set_sum_half\n        val test_list_sorted_set_sum_half_floor_diff = test_list_sorted_set_sum_half - test_list_sorted_set_sum_half_floor\n        val test_list_sorted_set_sum_half_ceil_diff_abs = abs(test_list_sorted_set_sum_half_ceil_diff)\n        val test_list_sorted_set_sum_half_floor_diff_abs = abs(test_list_sorted_set_sum_half_floor_diff)\n        val test_list_sorted_set_sum_half_ceil_diff_abs_min = min(test_list_sorted_set_sum_half_ceil_diff_abs, test_list_sorted_set_sum_half_floor_diff_abs)\n        val test_list_sorted_set_sum_half_ceil_diff_abs_min_index = if (test_list_",
    "        val result = ListBuffer[Long]()\n        for (i <- 1 to test_list.length) {\n            val combinations = test_list.combinations(i).toList\n            for (combination <- combinations) {\n                result += combination.sum\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_one = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_plus_one_half = test_list_sorted_set_list_size_half_plus_one / 2\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one = test_list_sorted_set_list_size_half_plus_one_half + 1\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one_half = test_list_sorted_set_list_size_half_plus_one_half_plus_one / 2\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one_half_plus_one = test_list_sorted_set_list_size_half_plus_one_half_plus_one_half + 1\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one_half_plus_one_half = test_list_sorted_set_list_size_half_plus_one_half_plus_one_half_plus_one / 2\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one_half_plus_one_half_plus_one = test_list_sorted_set",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val combinations = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val combinations = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_size = test_list_sorted_set_list_combinations.size\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_sum_size = test_list_sorted_set_list_combinations_sum.size\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_size = test_list_sorted_set_list_combinations_sum_set.size\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        val test_list_sorted_set_list_combinations_sum_set_list_size = test_list_sorted_set_list_combinations_sum_set_list.size\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted = test_list_sorted_set_list_combinations_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted_size = test_list_",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_1 = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_1 = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_plus_1_half = test_list_sorted_set_list_size_half_plus_1 / 2\n        val test_list_sorted_set_list_size_half_minus_1_half = test_list_sorted_set_list_size_half_minus_1 / 2\n        val test_list_sorted_set_list_size_half_plus_1_half_plus_1 = test_list_sorted_set_list_size_half_plus_1_half + 1\n        val test_list_sorted_set_list_size_half_minus_1_half_plus_1 = test_list_sorted_set_list_size_half_minus_1_half + 1\n        val test_list_sorted_set_list_size_half_plus_1_half_minus_1 = test_list_sorted_set_list_size_half_plus_1_half - 1\n        val test_list_sorted_set_list_size_half_minus_1_half_minus_1 = test_list_sorted_set_list_size_half_minus_1_half - 1\n       ",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_size = test_list_sorted_set_list_combinations.size\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_sum_size = test_list_sorted_set_list_combinations_sum.size\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_size = test_list_sorted_set_list_combinations_sum_set.size\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        val test_list_sorted_set_list_combinations_sum_set_list_size = test_list_sorted_set_list_combinations_sum_set_list.size\n        val test_list_sorted_set_list_combinations_sum_set_list_combinations = test_list_sorted_set_list_combinations_sum_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_sum_set_list_combinations_size",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i) * test_list(j) * test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val list = test_list.sorted\n        val result = new ListBuffer[Long]\n        for (i <- 0 until list.length) {\n            for (j <- i + 1 until list.length) {\n                for (k <- j + 1 until list.length) {\n                    if (list(i) + list(j) + list(k) == 0) result += list(i) * list(j) * list(k)\n                }\n            }\n        }\n        result.toList",
    "        val sum = test_list.sum\n        val half = sum / 2\n        val test_list_sorted = test_list.sorted\n        val test_list_sorted_reverse = test_list_sorted.reverse\n        val test_list_sorted_reverse_set = test_list_sorted_reverse.toSet\n        val test_list_sorted_reverse_set_size = test_list_sorted_reverse_set.size\n        val test_list_sorted_reverse_set_size_half = test_list_sorted_reverse_set_size / 2\n        val test_list_sorted_reverse_set_size_half_plus_one = test_list_sorted_reverse_set_size_half + 1\n        val test_list_sorted_reverse_set_size_half_plus_one_list = List.range(0, test_list_sorted_reverse_set_size_half_plus_one)\n        val test_list_sorted_reverse_set_size_half_plus_one_list_map = test_list_sorted_reverse_set_size_half_plus_one_list.map(x => x * 2)\n        val test_list_sorted_reverse_set_size_half_plus_one_list_map_filter = test_list_sorted_reverse_set_size_half_plus_one_list_map.filter(x => x <= sum)\n        val test_list_sorted_reverse_set_size_half_plus_one_list_map_filter_map = test_list_sorted_reverse_set_size_half_plus_one_list_map_filter.map(x => (x, sum - x))\n        val test_list_sorted_reverse_set_size_half_plus_one_list_map_filter_map_filter = test_list_sorted_reverse_set_size_half_plus_one_list_map_filter_map.filter(x => x._1 != x._2)\n        val test_list_sorted_reverse_set_size_half_plus_one_list_map_filter_map_filter_map = test",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        result",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val n = test_list.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) {\n            dp(i)(0) = 1\n        }\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            }\n        }\n        val result = new ListBuffer[Long]\n        for (i <- 0 to n) {\n            result += dp(n)(i)\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += (test_list(i) * test_list(j) * test_list(k))\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_max_index = test_list_sorted.indexOf(test_list_sorted_set_max)\n        val test_list_sorted_set_min_index = test_list_sorted.indexOf(test_list_sorted_set_min)\n        val test_list_sorted_set_max_count = test_list_sorted.count(_ == test_list_sorted_set_max)\n        val test_list_sorted_set_min_count = test_list_sorted.count(_ == test_list_sorted_set_min)\n        val test_list_sorted_set_max_count_index = test_list_sorted.lastIndexOf(test_list_sorted_set_max)\n        val test_list_sorted_set_min_count_index = test_list_sorted.lastIndexOf(test_list_sorted_set_min)\n        val test_list_sorted_set_max_count_index_diff = test_list_sorted_set_max_count_index - test_list_sorted_set_max_index\n        val test_list_sorted_set_min_count_index_diff = test_list_sorted_set_min_count_index - test_list_sorted_set_min_index\n        val test_list_sorted_set_max_count_index_diff_half = test_list_sorted_set_max_count_index_diff / 2\n        val test_list_sorted_set_min_count_index_diff_half = test_list_sorted_set_min_count_index_diff / 2\n",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    result += test_list(i) + test_list(j) + test_list(k)\n                }\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_combinations = test_list_sorted_set.subsets(test_list_sorted_set_size - 1).toList\n        val test_list_sorted_set_combinations_sum = test_list_sorted_set_combinations.map(x => x.sum)\n        test_list_sorted_set_combinations_sum.filter(x => test_list_sorted_set.contains(x))",
    "        val result = ListBuffer[Long]()\n        val test_list_length = test_list.length\n        for (i <- 0 until test_list_length) {\n            for (j <- i + 1 until test_list_length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val combinations = new ListBuffer[Long]\n        for (i <- 0 until test_list.length - 1) {\n            for (j <- i + 1 until test_list.length) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        result",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val list = test_list.sorted\n        val result = new ListBuffer[Long]\n        for (i <- 0 until list.length) {\n            for (j <- i + 1 until list.length) {\n                for (k <- j + 1 until list.length) {\n                    if (list(i) + list(j) + list(k) == 0) {\n                        result += list(i)\n                        result += list(j)\n                        result += list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val test_list_size = test_list.size\n        val test_list_size_half = test_list_size / 2\n        val test_list_size_half_plus_one = test_list_size_half + 1\n        val test_list_size_half_minus_one = test_list_size_half - 1\n        val test_list_size_half_minus_one_plus_one = test_list_size_half_minus_one + 1\n        val test_list_size_half_minus_one_minus_one = test_list_size_half_minus_one - 1\n        val test_list_size_half_minus_one_minus_one_plus_one = test_list_size_half_minus_one_minus_one + 1\n        val test_list_size_half_minus_one_minus_one_minus_one = test_list_size_half_minus_one_minus_one - 1\n        val test_list_size_half_minus_one_minus_one_minus_one_plus_one = test_list_size_half_minus_one_minus_one_minus_one + 1\n        val test_list_size_half_minus_one_minus_one_minus_one_minus_one = test_list_size_half_minus_one_minus_one_minus_one - 1\n        val test_list_size_half_minus_one_minus_one_minus_one_minus_one_plus_one = test_list_size_half_minus_one_minus_one_minus_one_minus_one + 1\n        val test_list_size_half_minus_one_minus_one_minus_one_minus_one_minus_one = test_list_size_half_minus_one_minus_one_minus_one_minus_one - 1\n        val test_list_size_half_minus_one_minus_one_minus_one_minus_one_minus_one_plus_one = test_list_size_half_minus_one_minus_one_minus_one_minus_one_minus_one + 1\n        val test_list_size_half_minus_one_minus",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val combinations = test_list.combinations(2)\n        val result = combinations.map(x => x.sum).toList\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                list = list :+ test_list(i) + test_list(j)\n            }\n        }\n        return list",
    "        val test_list_size = test_list.size\n        val combinations = new ListBuffer[Long]\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val map = new HashMap[Long, List[Long]]\n        for (i <- 0 until test_list.length) {\n            val list = new ListBuffer[Long]\n            for (j <- i + 1 until test_list.length) {\n                val sum = test_list(i) + test_list(j)\n                list += sum\n            }\n            map += (test_list(i) -> list.toList)\n        }\n        map.values.flatten.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            val current = test_list(i)\n            for (j <- i + 1 until test_list.length) {\n                val next = test_list(j)\n                result += current + next\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        return result",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result_list = result_list :+ (test_list(i) + test_list(j))\n            }\n        }\n        return result_list",
    "        val result = new ListBuffer[Long]\n        val n = test_list.length\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        def helper(test_list : List[Long], acc : List[Long]) : List[Long] = {\n            if (test_list.isEmpty) acc\n            else {\n                val new_acc = acc.map(x => x + test_list.head) ::: acc\n                helper(test_list.tail, new_acc)\n            }\n        }\n        helper(test_list, List(0))",
    "        val sum_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                sum_list += test_list(i) + test_list(j)\n            }\n        }\n        return sum_list.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2).toList\n        val test_list_sorted_set_list_combinations_size = test_list_sorted_set_list_combinations.size\n        val test_list_sorted_set_list_combinations_sum = test_list_sorted_set_list_combinations.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_sum_size = test_list_sorted_set_list_combinations_sum.size\n        val test_list_sorted_set_list_combinations_sum_set = test_list_sorted_set_list_combinations_sum.toSet\n        val test_list_sorted_set_list_combinations_sum_set_size = test_list_sorted_set_list_combinations_sum_set.size\n        val test_list_sorted_set_list_combinations_sum_set_list = test_list_sorted_set_list_combinations_sum_set.toList\n        val test_list_sorted_set_list_combinations_sum_set_list_size = test_list_sorted_set_list_combinations_sum_set_list.size\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted = test_list_sorted_set_list_combinations_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_sum_set_list_sorted_size = test_list_",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    result += test_list(i) + test_list(j) + test_list(k)\n                }\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sortWith(_ < _)\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_size_half = test_list_sorted_set_size / 2\n        val test_list_sorted_set_size_half_plus_one = test_list_sorted_set_size_half + 1\n        val test_list_sorted_set_size_half_minus_one = test_list_sorted_set_size_half - 1\n        val test_list_sorted_set_size_half_plus_one_half = test_list_sorted_set_size_half_plus_one / 2\n        val test_list_sorted_set_size_half_minus_one_half = test_list_sorted_set_size_half_minus_one / 2\n        val test_list_sorted_set_size_half_plus_one_half_plus_one = test_list_sorted_set_size_half_plus_one_half + 1\n        val test_list_sorted_set_size_half_minus_one_half_plus_one = test_list_sorted_set_size_half_minus_one_half + 1\n        val test_list_sorted_set_size_half_plus_one_half_minus_one = test_list_sorted_set_size_half_plus_one_half - 1\n        val test_list_sorted_set_size_half_minus_one_half_minus_one = test_list_sorted_set_size_half_minus_one_half - 1\n        val test_list_sorted_set_size_half_plus_one_half_plus_one_half = test_list_sorted_set_size_half_plus_one_half_plus_one / 2\n        val test_list_sorted_set_size_half_minus_one_half_plus_one_half = test_list_sorted_",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val test_list_size = test_list.size\n        val test_list_size_half = test_list_size / 2\n        val test_list_size_half_plus_one = test_list_size_half + 1\n        val test_list_size_half_minus_one = test_list_size_half - 1\n        val test_list_size_half_plus_one_half = test_list_size_half_plus_one / 2\n        val test_list_size_half_minus_one_half = test_list_size_half_minus_one / 2\n        val test_list_size_half_plus_one_half_plus_one = test_list_size_half_plus_one_half + 1\n        val test_list_size_half_minus_one_half_plus_one = test_list_size_half_minus_one_half + 1\n        val test_list_size_half_plus_one_half_minus_one = test_list_size_half_plus_one_half - 1\n        val test_list_size_half_minus_one_half_minus_one = test_list_size_half_minus_one_half - 1\n        val test_list_size_half_plus_one_half_plus_one_half = test_list_size_half_plus_one_half_plus_one / 2\n        val test_list_size_half_minus_one_half_plus_one_half = test_list_size_half_minus_one_half_plus_one / 2\n        val test_list_size_half_plus_one_half_minus_one_half = test_list_size_half_plus_one_half_minus_one / 2\n        val test_list_size_half_minus_one_half_minus_one_half = test_list_size_half_minus_one_half_minus_one / 2\n        val test_list_size_half_plus_one_half_plus_one_half_plus_one = test_list_size_half_plus_one_half_plus_one_half + 1\n        val test_list_size_half_minus",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n - 1) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        val test_list_size = test_list.size\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val res = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                res += test_list(i) + test_list(j)\n            }\n        }\n        return res.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val list = test_list.sorted\n        val len = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until len) {\n            for (j <- i + 1 until len) {\n                for (k <- j + 1 until len) {\n                    if (list(i) + list(j) + list(k) == 0) result += list(i) + list(j) + list(k)\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_size = test_list.size\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_sum = test_list_sorted_set.sum\n        val test_list_sorted_set_sum_half = test_list_sorted_set_sum / 2\n        val test_list_sorted_set_sum_half_ceil = ceil(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_floor = floor(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_ceil_diff = test_list_sorted_set_sum_half_ceil - test_list_sorted_set_sum_half\n        val test_list_sorted_set_sum_half_floor_diff = test_list_sorted_set_sum_half - test_list_sorted_set_sum_half_floor\n        val test_list_sorted_set_sum_half_ceil_diff_abs = abs(test_list_sorted_set_sum_half_ceil_diff)\n        val test_list_sorted_set_sum_half_floor_diff_abs = abs(test_list_sorted_set_sum_half_floor_diff)\n        val test_list_sorted_set_sum_half_ceil_diff_abs_min = min(test_list_sorted_set_sum_half_ceil_diff_abs, test_list_sorted_set_sum_half_floor_diff_abs)\n        val test_list_sorted_set_sum_half_ceil_diff_abs_min_index = if (test_list_",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_sum = test_list_sorted_set.sum\n        val test_list_sorted_set_sum_half = test_list_sorted_set_sum / 2\n        val test_list_sorted_set_sum_half_max = min(test_list_sorted_set_max, test_list_sorted_set_sum_half)\n        val test_list_sorted_set_sum_half_min = max(test_list_sorted_set_min, test_list_sorted_set_sum_half - test_list_sorted_set_max)\n        val test_list_sorted_set_sum_half_range = test_list_sorted_set_sum_half_max - test_list_sorted_set_sum_half_min + 1\n        val test_list_sorted_set_sum_half_range_half = test_list_sorted_set_sum_half_range / 2\n        val test_list_sorted_set_sum_half_range_half_max = test_list_sorted_set_sum_half_min + test_list_sorted_set_sum_half_range_half - 1\n        val test_list_sorted_set_sum_half_range_half_min = test_list_sorted_set_sum_half_min\n        val test_list_sorted_set_sum_half_range_half_sum = test_list_sorted_set_sum_half_range_half_max * test_list_sorted_set_sum_half_range_half + (test_list_sorted_set_sum_half_range_half -",
    "        val list = test_list.sorted\n        val len = list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 until len) {\n            for (j <- i + 1 until len) {\n                for (k <- j + 1 until len) {\n                    if (list(i) + list(j) + list(k) == 0) {\n                        result += list(i) * list(j) * list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        def findCombinations(test_list_sorted_set_list : List[Long], test_list_sorted : List[Long]) : List[Long] = {\n            if (test_list_sorted_set_list.isEmpty) return List()\n            else {\n                val head = test_list_sorted_set_list.head\n                val tail = test_list_sorted_set_list.tail\n                val head_count = test_list_sorted.count(_ == head)\n                val head_combinations = (0 to head_count).map(i => pow(2, i).toInt).toList\n                val tail_combinations = findCombinations(tail, test_list_sorted)\n                val combinations = head_combinations.flatMap(i => tail_combinations.map(j => i * j))\n                combinations\n            }\n        }\n        findCombinations(test_list_sorted_set_list, test_list_sorted)",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2)\n        val test_list_sorted_set_list_combinations_list = test_list_sorted_set_list_combinations.toList\n        val test_list_sorted_set_list_combinations_list_size = test_list_sorted_set_list_combinations_list.size\n        val test_list_sorted_set_list_combinations_list_sum = test_list_sorted_set_list_combinations_list.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_list_sum_set = test_list_sorted_set_list_combinations_list_sum.toSet\n        val test_list_sorted_set_list_combinations_list_sum_set_list = test_list_sorted_set_list_combinations_list_sum_set.toList\n        val test_list_sorted_set_list_combinations_list_sum_set_list_size = test_list_sorted_set_list_combinations_list_sum_set_list.size\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted = test_list_sorted_set_list_combinations_list_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted_size = test_list_sorted_set_list_combinations_list_sum_set_list_sorted.",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_max_index = test_list_sorted.indexOf(test_list_sorted_set_max)\n        val test_list_sorted_set_min_index = test_list_sorted.indexOf(test_list_sorted_set_min)\n        val test_list_sorted_set_max_index_rev = test_list_sorted.lastIndexOf(test_list_sorted_set_max)\n        val test_list_sorted_set_min_index_rev = test_list_sorted.lastIndexOf(test_list_sorted_set_min)\n        val test_list_sorted_set_max_count = test_list_sorted_set_max_index_rev - test_list_sorted_set_max_index + 1\n        val test_list_sorted_set_min_count = test_list_sorted_set_min_index_rev - test_list_sorted_set_min_index + 1\n        val test_list_sorted_set_max_count_odd = test_list_sorted_set_max_count % 2 == 1\n        val test_list_sorted_set_min_count_odd = test_list_sorted_set_min_count % 2 == 1\n        val test_list_sorted_set_max_count_even = test_list_sorted_set_max_count % 2 == 0\n        val test_list_sorted_set_min_count_even = test_list_sorted_set_min_count % 2 == 0\n        val test_list_sorted_set_max_count_even_odd = test_list",
    "        val sum = test_list.sum\n        val list = test_list.sorted\n        val n = list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            val first = list(i)\n            val second = sum - first\n            val index = list.indexOf(second)\n            if (index != -1) {\n                result += first\n                result += second\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_length = test_list.length\n        for (i <- 0 until test_list_length) {\n            for (j <- i + 1 until test_list_length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val list = test_list.sorted\n        val n = list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (list(i) + list(j) + list(k) == 0) result += list(i) * list(j) * list(k)\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += (test_list(i) + test_list(j))\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2)\n        val test_list_sorted_set_list_combinations_list = test_list_sorted_set_list_combinations.toList\n        val test_list_sorted_set_list_combinations_list_size = test_list_sorted_set_list_combinations_list.size\n        val test_list_sorted_set_list_combinations_list_sum = test_list_sorted_set_list_combinations_list.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_list_sum_set = test_list_sorted_set_list_combinations_list_sum.toSet\n        val test_list_sorted_set_list_combinations_list_sum_set_list = test_list_sorted_set_list_combinations_list_sum_set.toList\n        val test_list_sorted_set_list_combinations_list_sum_set_list_size = test_list_sorted_set_list_combinations_list_sum_set_list.size\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted = test_list_sorted_set_list_combinations_list_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted_size = test_list_sorted_set_list_combinations_list_sum_set_list_sorted.",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val sum = test_list.sum\n        val n = test_list.length\n        val result = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == sum) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        val test_list_size = test_list.size\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val n = test_list.length\n        val result = new ListBuffer[Long]()\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == 0) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_plus_minus = test_list_sorted_set_list_size_half_plus - test_list_sorted_set_list_size_half_minus\n        val test_list_sorted_set_list_size_half_plus_minus_half = test_list_sorted_set_list_size_half_plus_minus / 2\n        val test_list_sorted_set_list_size_half_plus_minus_half_plus = test_list_sorted_set_list_size_half_plus_minus_half + 1\n        val test_list_sorted_set_list_size_half_plus_minus_half_minus = test_list_sorted_set_list_size_half_plus_minus_half - 1\n        val test_list_sorted_set_list_size_half_plus_minus_half_plus_minus = test_list_sorted_set_list_size_half_plus_minus_half_plus - test_list_sorted_set_list_size_half_plus_minus_half_minus\n        val test_list_sorted_set_list_size_half_plus_minus_half_plus_",
    "        val list = test_list.sorted\n        val result = ListBuffer[Long]()\n        for (i <- 0 until list.length - 1) {\n            for (j <- i + 1 until list.length) {\n                result += list(i) + list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val list = test_list.sorted\n        val result = new ListBuffer[Long]\n        for (i <- 0 until list.length - 1) {\n            for (j <- i + 1 until list.length) {\n                val sum = list(i) + list(j)\n                if (list.contains(sum)) result += sum\n            }\n        }\n        result.toList",
    "        val list = test_list.sorted\n        val set = new HashSet[Long]\n        for (i <- 0 until list.length) {\n            for (j <- i + 1 until list.length) {\n                set.add(list(i) + list(j))\n            }\n        }\n        set.toList.sorted",
    "        val sum = test_list.sum\n        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until pow(2, n).toInt) {\n            var s = 0L\n            for (j <- 0 until n) {\n                if ((i & (1 << j)) > 0) {\n                    s += test_list(j)\n                }\n            }\n            if (s == sum) result += s\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val combinations = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result.append(test_list(i) + test_list(j))\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_size_half = test_list_sorted_set_size / 2\n        val test_list_sorted_set_size_half_plus_1 = test_list_sorted_set_size_half + 1\n        val test_list_sorted_set_size_half_minus_1 = test_list_sorted_set_size_half - 1\n        val test_list_sorted_set_size_half_minus_1_plus_1 = test_list_sorted_set_size_half_minus_1 + 1\n        val test_list_sorted_set_size_half_minus_1_plus_1_half = test_list_sorted_set_size_half_minus_1_plus_1 / 2\n        val test_list_sorted_set_size_half_minus_1_plus_1_half_plus_1 = test_list_sorted_set_size_half_minus_1_plus_1_half + 1\n        val test_list_sorted_set_size_half_minus_1_plus_1_half_minus_1 = test_list_sorted_set_size_half_minus_1_plus_1_half - 1\n        val test_list_sorted_set_size_half_minus_1_plus_1_half_minus_1_plus_1 = test_list_sorted_set_size_half_minus_1_plus_1_half_minus_1 + 1\n        val test_list_sorted_set_size_half_minus_1_plus_1_half_minus_1_plus_1_half = test_list_sorted_set_size_half_minus_1_plus_1_half_minus_1_plus_1 / 2\n        val test_list_sorted_set_size_half_minus_1_plus_1_half_minus",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        val test_list_size = test_list.size\n        for (i <- 0 until test_list_size) {\n            for (j <- i + 1 until test_list_size) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_one = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_one = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one = test_list_sorted_set_list_size_half_minus_one + 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half = test_list_sorted_set_list_size_half_minus_one_plus_one / 2\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half_plus_one = test_list_sorted_set_list_size_half_minus_one_plus_one_half + 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half_minus_one = test_list_sorted_set_list_size_half_minus_one_plus_one_half - 1\n        val test_list_sorted_set_list_size_half_minus_one_plus_one_half_minus_one_plus_one = test_list_sorted_set_list_size_half_minus_one_plus_one_half_minus_one + 1\n        val test_list_sorted_",
    "        val combinations = new ListBuffer[Long]\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val sum = test_list.sum\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                for (k <- j + 1 until n) {\n                    if (test_list(i) + test_list(j) + test_list(k) == sum) {\n                        result += test_list(i)\n                        result += test_list(j)\n                        result += test_list(k)\n                    }\n                }\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- test_list.indices) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]()\n        val map = new HashMap[Long, Int]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val sum = test_list(i) + test_list(j)\n                if (map.contains(sum)) {\n                    map(sum) += 1\n                } else {\n                    map(sum) = 1\n                }\n            }\n        }\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                val sum = test_list(i) + test_list(j)\n                if (map.contains(sum)) {\n                    result += sum\n                }\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_one = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_one = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_minus_two = test_list_sorted_set_list_size_half - 2\n        val test_list_sorted_set_list_size_half_minus_three = test_list_sorted_set_list_size_half - 3\n        val test_list_sorted_set_list_size_half_minus_four = test_list_sorted_set_list_size_half - 4\n        val test_list_sorted_set_list_size_half_minus_five = test_list_sorted_set_list_size_half - 5\n        val test_list_sorted_set_list_size_half_minus_six = test_list_sorted_set_list_size_half - 6\n        val test_list_sorted_set_list_size_half_minus_seven = test_list_sorted_set_list_size_half - 7\n        val test_list_sorted_set_list_size_half_minus_eight = test_list_sorted_set_list_size_half - 8\n        val test_list_sorted_set_list_size_half_minus_nine = test_",
    "        val sum = test_list.sum\n        val n = test_list.length\n        val result = ListBuffer[Long]()\n        for (i <- 1 to n) {\n            val combinations = test_list.combinations(i)\n            for (combination <- combinations) {\n                if (combination.sum == sum) result += combination.product\n            }\n        }\n        result.toList",
    "        val combinations = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                combinations += test_list(i) + test_list(j)\n            }\n        }\n        combinations.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val n = test_list.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                if (j >= test_list(i - 1)) dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - test_list(i - 1).toInt)\n                else dp(i)(j) = dp(i - 1)(j)\n            }\n        }\n        val result = new ListBuffer[Long]\n        for (i <- 1 to n) result += dp(n)(i)\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val list = test_list.sorted\n        val n = list.length\n        val result = ListBuffer[Long]()\n        for (i <- 0 until n - 2) {\n            var l = i + 1\n            var r = n - 1\n            while (l < r) {\n                val sum = list(i) + list(l) + list(r)\n                if (sum == 0) {\n                    result += list(i) * list(l) * list(r)\n                    l += 1\n                    r -= 1\n                }\n                else if (sum < 0) l += 1\n                else r -= 1\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList"
  ]
}