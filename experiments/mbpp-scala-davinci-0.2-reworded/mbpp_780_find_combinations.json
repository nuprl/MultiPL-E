{
  "name": "mbpp_780_find_combinations",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/scalathon-combinations-of-sum-with-tuples-in-tuple-list/\n    def findCombinations(test_list : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findCombinations((List[Long]((2l, 4l), (6l, 7l), (5l, 1l), (6l, 10l)))).equals((List[Long]((8l, 11l), (7l, 5l), (8l, 14l), (11l, 8l), (12l, 17l), (11l, 11l)))));\n    assert(findCombinations((List[Long]((3l, 5l), (7l, 8l), (6l, 2l), (7l, 11l)))).equals((List[Long]((10l, 13l), (9l, 7l), (10l, 16l), (13l, 10l), (14l, 19l), (13l, 13l)))));\n    assert(findCombinations((List[Long]((4l, 6l), (8l, 9l), (7l, 3l), (8l, 12l)))).equals((List[Long]((12l, 15l), (11l, 9l), (12l, 18l), (15l, 12l), (16l, 21l), (15l, 15l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = ListBuffer[Long]()\n        for (i <- test_list.indices) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            for (j <- i + 1 to test_list.length - 1) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ test_list(i) + test_list(j)\n            }\n        }\n        result",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_max = test_list_sorted_set.max\n        val test_list_sorted_set_min = test_list_sorted_set.min\n        val test_list_sorted_set_sum = test_list_sorted_set.sum\n        val test_list_sorted_set_sum_half = test_list_sorted_set_sum / 2\n        val test_list_sorted_set_sum_half_ceil = ceil(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_floor = floor(test_list_sorted_set_sum_half).toLong\n        val test_list_sorted_set_sum_half_ceil_index = test_list_sorted.indexOf(test_list_sorted_set_sum_half_ceil)\n        val test_list_sorted_set_sum_half_floor_index = test_list_sorted.indexOf(test_list_sorted_set_sum_half_floor)\n        val test_list_sorted_set_sum_half_ceil_index_plus_one = test_list_sorted_set_sum_half_ceil_index + 1\n        val test_list_sorted_set_sum_half_floor_index_plus_one = test_list_sorted_set_sum_half_floor_index + 1\n        val test_list_sorted_set_sum_half_ceil_index_plus_one_half = test_list_sorted_set_sum_half_ceil_index_plus_one / 2\n        val test_list_sorted_set_sum_half_floor_index_plus_one_half = test_list_sorted_set_sum_half_floor_index_plus_one / 2\n        val",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_combinations = test_list_sorted_set_list.combinations(2)\n        val test_list_sorted_set_list_combinations_list = test_list_sorted_set_list_combinations.toList\n        val test_list_sorted_set_list_combinations_list_size = test_list_sorted_set_list_combinations_list.size\n        val test_list_sorted_set_list_combinations_list_sum = test_list_sorted_set_list_combinations_list.map(x => x.sum)\n        val test_list_sorted_set_list_combinations_list_sum_set = test_list_sorted_set_list_combinations_list_sum.toSet\n        val test_list_sorted_set_list_combinations_list_sum_set_list = test_list_sorted_set_list_combinations_list_sum_set.toList\n        val test_list_sorted_set_list_combinations_list_sum_set_list_size = test_list_sorted_set_list_combinations_list_sum_set_list.size\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted = test_list_sorted_set_list_combinations_list_sum_set_list.sorted\n        val test_list_sorted_set_list_combinations_list_sum_set_list_sorted_size = test_list_sorted_set_list_combinations_list_sum_set_list_sorted.",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil = ceil(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_floor = floor(test_list_sorted_set_list_size_half).toInt\n        val test_list_sorted_set_list_size_half_ceil_list = test_list_sorted_set_list.slice(0, test_list_sorted_set_list_size_half_ceil)\n        val test_list_sorted_set_list_size_half_floor_list = test_list_sorted_set_list.slice(test_list_sorted_set_list_size_half_floor, test_list_sorted_set_list_size)\n        val test_list_sorted_set_list_size_half_ceil_list_size = test_list_sorted_set_list_size_half_ceil_list.size\n        val test_list_sorted_set_list_size_half_floor_list_size = test_list_sorted_set_list_size_half_floor_list.size\n        val test_list_sorted_set_list_size_half_ceil_list_size_half = test_list_sorted_set_list_size_half_ceil_list_size / 2\n        val test_list_sorted_set_list_size_half_ceil_list_size_",
    "        val n = test_list.length\n        val m = test_list.max\n        val result = new ListBuffer[Long]\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result += test_list(i) + test_list(j)\n            }\n        }\n        result.toList",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_set = test_list_sorted.toSet\n        val test_list_sorted_set_size = test_list_sorted_set.size\n        val test_list_sorted_set_list = test_list_sorted_set.toList\n        val test_list_sorted_set_list_size = test_list_sorted_set_list.size\n        val test_list_sorted_set_list_size_half = test_list_sorted_set_list_size / 2\n        val test_list_sorted_set_list_size_half_plus_one = test_list_sorted_set_list_size_half + 1\n        val test_list_sorted_set_list_size_half_minus_one = test_list_sorted_set_list_size_half - 1\n        val test_list_sorted_set_list_size_half_plus_one_half = test_list_sorted_set_list_size_half_plus_one / 2\n        val test_list_sorted_set_list_size_half_minus_one_half = test_list_sorted_set_list_size_half_minus_one / 2\n        val test_list_sorted_set_list_size_half_plus_one_half_minus_one = test_list_sorted_set_list_size_half_plus_one_half - 1\n        val test_list_sorted_set_list_size_half_minus_one_half_minus_one = test_list_sorted_set_list_size_half_minus_one_half - 1\n        val test_list_sorted_set_list_size_half_plus_one_half_plus_one = test_list_sorted_set_list_size_half_plus_one_half + 1\n        val test_list_sorted_set_list_size_half_minus_one_half_plus_one = test_list_sorted_set_list_size_half_minus_one_half + 1\n       ",
    "        val test_list_sorted = test_list.sorted\n        val test_list_sorted_length = test_list_sorted.length\n        val test_list_sorted_sum = test_list_sorted.sum\n        val test_list_sorted_sum_half = test_list_sorted_sum / 2\n        val test_list_sorted_sum_half_ceil = ceil(test_list_sorted_sum_half).toLong\n        val test_list_sorted_sum_half_floor = floor(test_list_sorted_sum_half).toLong\n        val test_list_sorted_sum_half_ceil_index = test_list_sorted.indexOf(test_list_sorted_sum_half_ceil)\n        val test_list_sorted_sum_half_floor_index = test_list_sorted.indexOf(test_list_sorted_sum_half_floor)\n        val test_list_sorted_sum_half_ceil_index_next = test_list_sorted_sum_half_ceil_index + 1\n        val test_list_sorted_sum_half_floor_index_next = test_list_sorted_sum_half_floor_index + 1\n        val test_list_sorted_sum_half_ceil_index_next_next = test_list_sorted_sum_half_ceil_index_next + 1\n        val test_list_sorted_sum_half_floor_index_next_next = test_list_sorted_sum_half_floor_index_next + 1\n        val test_list_sorted_sum_half_ceil_index_next_next_next = test_list_sorted_sum_half_ceil_index_next_next + 1\n        val test_list_sorted_sum_half_floor_index_next_next_next = test_list_sorted_sum_half_floor_index_next_next + 1\n        val test_list_sorted_sum_half_ceil_index_next_next_next_next = test_list_sorted_sum_half_",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            for (j <- i + 1 until test_list.length) {\n                result = result :+ (test_list(i) + test_list(j))\n            }\n        }\n        result"
  ]
}