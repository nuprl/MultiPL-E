{
  "name": "mbpp_443_largest_neg",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the largest negative number from the given list.\n    def largestNeg(list1 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -4l.toLong, -6l.toLong))) == (-6l));\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, -8l.toLong, -9l.toLong))) == (-9l));\n    assert(largestNeg((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, -1l.toLong))) == (-1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1.filter(_ < 0).max",
    "        var max = 0L\n        for (i <- list1) {\n            if (i < 0 && i > max) {\n                max = i\n            }\n        }\n        max",
    "        list1.filter(_ < 0).max",
    "        var max = 0L\n        for (i <- list1) {\n            if (i < 0 && i > max) max = i\n        }\n        max",
    "        var max = 0L\n        for (i <- list1) {\n            if (i < 0 && i > max) max = i\n        }\n        return max",
    "        var negList = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                negList = negList :+ i\n            }\n        }\n        if (negList.length == 0) {\n            return 0\n        }\n        negList.max",
    "        var max = 0L\n        for (i <- list1) {\n            if (i < 0 && i > max) max = i\n        }\n        max",
    "        var max = 0L\n        for(i <- list1) {\n            if(i < 0 && i > max) max = i\n        }\n        return max",
    "        var negList = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                negList = i :: negList\n            }\n        }\n        if (negList.length == 0) {\n            return 0\n        }\n        return negList.max",
    "        var largestNeg = 0L\n        for (i <- list1) {\n            if (i < 0 && i > largestNeg) largestNeg = i\n        }\n        return largestNeg",
    "        val list2 = list1.filter(x => x < 0)\n        if (list2.length == 0) return 0\n        list2.reduceLeft((x, y) => if (x > y) x else y)",
    "        var max = 0L\n        for (i <- list1) {\n            if (i < 0) {\n                if (i > max) max = i\n            }\n        }\n        max",
    "        var largestNeg = 0L\n        for (i <- list1) {\n            if (i < 0 && i > largestNeg) largestNeg = i\n        }\n        largestNeg",
    "        list1.filter(x => x < 0).max",
    "        var max = Long.MinValue\n        for (i <- list1) {\n            if (i < 0 && i > max) max = i\n        }\n        return max",
    "        var max = 0L\n        for (i <- list1) {\n            if (i < 0 && i > max) max = i\n        }\n        return max",
    "        list1.filter(_ < 0).max",
    "        var negList = List[Long]()\n        for (i <- list1) {\n            if (i < 0) {\n                negList = i :: negList\n            }\n        }\n        if (negList.length == 0) {\n            return 0\n        }\n        else {\n            return negList.max\n        }",
    "        list1.filter(x => x < 0).max",
    "        list1.filter(_ < 0).max"
  ]
}