{
  "name": "mbpp_748_capital_words_spaces",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to put spaces between words starting with capital letters in a given string.\n    def capitalWordsSpaces(str1 : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(capitalWordsSpaces((\"Python\")).equals((\"Python\")));\n    assert(capitalWordsSpaces((\"PythonProgrammingExamples\")).equals((\"Python Programming Examples\")));\n    assert(capitalWordsSpaces((\"GetReadyToBeCodingFreak\")).equals((\"Get Ready To Be Coding Freak\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (i == 0) {\n                str2 += str1(i)\n            } else if (str1(i).isUpper && str1(i - 1).isLower) {\n                str2 += \" \" + str1(i)\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2",
    "        val str2 = str1.split(\"(?=[A-Z])\").mkString(\" \")\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (i == 0) {\n                str2 += str1(i).toString.toUpperCase\n            } else if (str1(i).isUpper) {\n                str2 += \" \" + str1(i).toString\n            } else {\n                str2 += str1(i).toString\n            }\n        }\n        str2",
    "        // split the string into an array of words\n        val words = str1.split(\" \")\n        // iterate through the array of words\n        for (i <- 0 until words.length) {\n            // if the first letter of the word is capital\n            if (words(i)(0).isUpper) {\n                // add a space before the word\n                words(i) = \" \" + words(i)\n            }\n        }\n        // return the array of words joined together\n        return words.mkString(\"\")",
    "        val str2 = str1.split(\"(?=[A-Z])\").mkString(\" \")\n        str2",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")",
    "        val str2 = str1.split(\"(?=[A-Z])\").mkString(\" \")\n        str2",
    "        val str2 = str1.split(\"(?=[A-Z])\").mkString(\" \")\n        str2",
    "        val str2 = str1.replaceAll(\"([A-Z])\", \" $1\")\n        str2.trim()",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (i == 0) {\n                str2 += str1(i)\n            } else {\n                if (str1(i).isUpper) {\n                    str2 += \" \" + str1(i)\n                } else {\n                    str2 += str1(i)\n                }\n            }\n        }\n        return str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (i == 0) {\n                str2 += str1(i).toUpper\n            } else if (str1(i).isUpper) {\n                str2 += \" \" + str1(i)\n            } else {\n                str2 += str1(i)\n            }\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (i == 0) {\n                str2 += str1(i)\n            } else {\n                if (str1(i).isUpper) {\n                    str2 += \" \"\n                }\n                str2 += str1(i)\n            }\n        }\n        str2",
    "        var str2 = \"\"\n        for (i <- 0 until str1.length) {\n            if (i == 0) {\n                str2 += str1(i)\n            } else if (str1(i).isUpper && str1(i - 1).isLower) {\n                str2 += \" \" + str1(i)\n            } else {\n                str2 += str1(i)\n            }\n        }\n        return str2",
    "        val str2 = str1.split(\"(?=[A-Z])\").mkString(\" \")\n        str2",
    "        val str2 = str1.split(\"(?=[A-Z])\")\n        str2.mkString(\" \")"
  ]
}