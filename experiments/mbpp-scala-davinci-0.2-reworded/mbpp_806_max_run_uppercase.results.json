{
  "name": "mbpp_806_max_run_uppercase",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 to test_str.length - 1) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max_run = max(max_run, run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            }\n            else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_len = 0\n        var cur_len = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_len += 1\n                max_len = max(max_len, cur_len)\n            }\n            else cur_len = 0\n        }\n        max_len\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            }\n            else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max_run = max(max_run, cur_run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_len = 0\n        var cur_len = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_len += 1\n                max_len = max(max_len, cur_len)\n            } else {\n                cur_len = 0\n            }\n        }\n        return max_len\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n            } else {\n                max_run = max(max_run, current_run)\n                current_run = 0\n            }\n        }\n        max(max_run, current_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n            }\n            else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            }\n            else run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8vncit36.scala:20)\n\tat Problem.main(tmp8vncit36.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n            } else {\n                max_run = max(max_run, current_run)\n                current_run = 0\n            }\n        }\n        max_run = max(max_run, current_run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max_run = max(max_run, cur_run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            }\n            else run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toLowerCase()\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i) >= 'a' && str(i) <= 'z') {\n                max_run = max(max_run, run)\n                run = 0\n            } else {\n                run += 1\n            }\n        }\n        max_run = max(max_run, run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6uzlxuhz.scala:21)\n\tat Problem.main(tmp6uzlxuhz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                current_run += 1\n            } else {\n                max_run = max(max_run, current_run)\n                current_run = 0\n            }\n        }\n        max_run = max(max_run, current_run)\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        // Write your code here\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp56uw0ol0.scala:19)\n\tat Problem.main(tmp56uw0ol0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_count = 0\n        var count = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                count += 1\n            } else {\n                max_count = max(max_count, count)\n                count = 0\n            }\n        }\n        max(max_count, count)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var curr_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                curr_run += 1\n                if (curr_run > max_run) max_run = curr_run\n            }\n            else curr_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run = 0\n        var curr_run = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                curr_run += 1\n                if (curr_run > max_run) max_run = curr_run\n            }\n            else curr_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (c <- str) {\n            if (c >= 'A' && c <= 'Z') {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgm6e5mjy.scala:20)\n\tat Problem.main(tmpgm6e5mjy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_len = 0\n        var cur_len = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_len += 1\n                if (cur_len > max_len) max_len = cur_len\n            }\n            else cur_len = 0\n        }\n        max_len\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                if (cur_run > max_run) {\n                    max_run = cur_run\n                }\n                cur_run = 0\n            }\n        }\n        if (cur_run > max_run) {\n            max_run = cur_run\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            }\n            else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) cur_run += 1\n            else {\n                if (cur_run > max_run) max_run = cur_run\n                cur_run = 0\n            }\n        }\n        if (cur_run > max_run) max_run = cur_run\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max : Long = 0\n        var cur : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur += 1\n                max = max max cur\n            }\n            else cur = 0\n        }\n        max\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123323,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n            } else {\n                max_run = max(max_run, current_run)\n                current_run = 0\n            }\n        }\n        max(max_run, current_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase()\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 to str.length - 1) {\n            if (str(i).isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123323,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2ewyzman.scala:20)\n\tat Problem.main(tmp2ewyzman.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123323,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n            }\n            else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max_run = max(max_run, cur_run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpc7lj2cke.scala:20)\n\tat Problem.main(tmpc7lj2cke.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123323,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6r994jeq.scala:20)\n\tat Problem.main(tmp6r994jeq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n            } else {\n                max_run = max(max_run, current_run)\n                current_run = 0\n            }\n        }\n        max_run = max(max_run, current_run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp56uw0ol0.scala:19)\n\tat Problem.main(tmp56uw0ol0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6r994jeq.scala:20)\n\tat Problem.main(tmp6r994jeq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                current_run += 1\n            } else {\n                max_run = max(max_run, current_run)\n                current_run = 0\n            }\n        }\n        max(max_run, current_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf4k53gxd.scala:20)\n\tat Problem.main(tmpf4k53gxd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var curr_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                curr_run += 1\n                if (curr_run > max_run) max_run = curr_run\n            }\n            else curr_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else {\n                run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var current_run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkrxwwsa0.scala:19)\n\tat Problem.main(tmpkrxwwsa0.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max(max_run, cur_run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfc4cmz2d.scala:20)\n\tat Problem.main(tmpfc4cmz2d.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123323,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6r994jeq.scala:20)\n\tat Problem.main(tmp6r994jeq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) run += 1\n            else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val test_str_arr = test_str.toCharArray\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str_arr.length) {\n            if (test_str_arr(i).isUpper) {\n                cur_run += 1\n            } else {\n                if (cur_run > max_run) max_run = cur_run\n                cur_run = 0\n            }\n        }\n        if (cur_run > max_run) max_run = cur_run\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            }\n            else current_run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123314,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            } else {\n                run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                if (current_run > max_run) max_run = current_run\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123313,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        val len = str.length\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until len) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9g449ur5.scala:21)\n\tat Problem.main(tmp9g449ur5.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n            } else {\n                max_run = max(max_run, cur_run)\n                cur_run = 0\n            }\n        }\n        max_run = max(max_run, cur_run)\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else run = 0\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                if (run > max_run) max_run = run\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123324,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp6r994jeq.scala:20)\n\tat Problem.main(tmp6r994jeq.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until str.length) {\n            if (str(i) >= 'A' && str(i) <= 'Z') {\n                current_run += 1\n                max_run = max(max_run, current_run)\n            } else {\n                current_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwkyi7kj3.scala:20)\n\tat Problem.main(tmpwkyi7kj3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                if (cur_run > max_run) max_run = cur_run\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var cur_run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510554,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            }\n            else {\n                run = 0\n            }\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var current_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                current_run += 1\n            } else {\n                if (current_run > max_run) max_run = current_run\n                current_run = 0\n            }\n        }\n        if (current_run > max_run) max_run = current_run\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123304,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max_run = 0\n        var run = 0\n        for (i <- 0 until str.length) {\n            if (str(i).isUpper) {\n                run += 1\n            } else {\n                max_run = max(max_run, run)\n                run = 0\n            }\n        }\n        max(max_run, run)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123303,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8vncit36.scala:20)\n\tat Problem.main(tmp8vncit36.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        val str = test_str.toUpperCase\n        var max = 0\n        var current = 0\n        for (i <- 0 until str.length) {\n            if (str(i) >= 'A' && str(i) <= 'Z') {\n                current += 1\n            } else {\n                max = max.max(current)\n                current = 0\n            }\n        }\n        max.max(current)\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123328,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpytq0n74h.scala:20)\n\tat Problem.main(tmpytq0n74h.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            } else {\n                cur_run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run : Long = 0\n        var run : Long = 0\n        for (c <- test_str) {\n            if (c.isUpper) {\n                run += 1\n                max_run = max(max_run, run)\n            } else {\n                run = 0\n            }\n        }\n        return max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1666123327,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find maximum run of uppercase characters in the given string.\n    def maxRunUppercase(test_str : String) : Long = {\n        var max_run = 0\n        var cur_run = 0\n        for (i <- 0 until test_str.length) {\n            if (test_str(i).isUpper) {\n                cur_run += 1\n                max_run = max(max_run, cur_run)\n            }\n            else cur_run = 0\n        }\n        max_run\n    }\n    def main(args: Array[String]) = {\n    assert(maxRunUppercase((\"GeMKSForGERksISBESt\")) == (5l));\n    assert(maxRunUppercase((\"PrECIOusMOVemENTSYT\")) == (6l));\n    assert(maxRunUppercase((\"GooGLEFluTTER\")) == (4l));\n    }\n\n}\n",
      "timestamp": 1665510553,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}