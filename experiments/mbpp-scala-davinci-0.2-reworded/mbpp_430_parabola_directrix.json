{
  "name": "mbpp_430_parabola_directrix",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the directrix of a parabola.\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return -a / b",
    "        return -c / b",
    "        return -a / b",
    "        // The directrix is the line y = -b / (2a)\n        -b / (2 * a)",
    "        return -b / (2 * a)",
    "        -a / b",
    "        val p = b / (2 * a)\n        val q = c - a * p * p\n        -q / p",
    "        val d = (a * a + b * b) / (2 * a)\n        return -(c - d) / b",
    "        // The directrix is the line y = -b / (2a)\n        -b / (2 * a)",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        -b / (2 * a)",
    "        return -a / b",
    "        return -a / b",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        val d = -(b * b) / (4 * a)\n        d - c",
    "        -a / (2 * b)",
    "        return -(4 * a * c) / (b * b)",
    "        -b / (2 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val d = -(y - c) / a\n        d.toLong",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        return -c / b",
    "        return -a / b",
    "        return b * b - 4 * a * c",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        -a / b",
    "        -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val d = -4 * a * c + b * b\n        val k = -b / (2 * a)\n        val l = y - d / (4 * a)\n        val m = -b / a\n        val n = -d / (4 * a)\n        val p = -b / (2 * a)\n        val q = c - d / (4 * a)\n        val r = -b / (2 * a)\n        val s = -c - d / (4 * a)\n        val t = -b / (2 * a)\n        val u = -c + d / (4 * a)\n        val v = -b / (2 * a)\n        val w = -c - d / (4 * a)\n        val x1 = -b / (2 * a)\n        val y1 = c - d / (4 * a)\n        val z = -b / (2 * a)\n        val z1 = c + d / (4 * a)\n        val z2 = -b / (2 * a)\n        val z3 = -c + d / (4 * a)\n        val z4 = -b / (2 * a)\n        val z5 = -c - d / (4 * a)\n        val z6 = -b / (2 * a)\n        val z7 = c + d / (4 * a)\n        val z8 = -b / (2 * a)\n        val z9 = c - d / (4 * a)\n        val z10 = -b / (2 * a)\n        val z11 = -c - d / (4 * a)\n        val z12 = -b / (2 * a)\n        val z13 = -c + d / (4 * a)\n        val z14 = -b / (2 * a)\n        val z15 = c + d / (4 * a)\n        val z16 = -b / (2 * a)\n        val z17 = c - d / (4 * a)\n        val z18 = -b / (2 * a)\n",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val m = -a / b\n        val n = y - m * x\n        val p = -m\n        val q = n\n        val r = -p / 2\n        val s = q\n        val t = r * r - s\n        t",
    "        val d = 2 * a\n        val e = -b\n        val f = c\n        val x = -e / d\n        val y = f - e * e / (4 * d)\n        y",
    "        -(a * a) / (4 * b) + c",
    "        return -(a * a * a * c - a * b * b) / (a * a)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -a / b",
    "        -a / b",
    "        -(b * b) / (4 * a) + c",
    "        val d = -b / (2 * a)\n        val k = c - a * d * d\n        return k",
    "        -a / b",
    "        -a / b",
    "        -(a * a) / (4 * b) + c",
    "        -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        -(a * a) / (4 * b) + c",
    "        -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        -y / a",
    "        -a / b",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        val d = (a * a) / 4 - b\n        return d",
    "        return -(a * a) / (4 * b) + c",
    "        // Directrix is the line perpendicular to the axis of symmetry and passing through the focus.\n        // The axis of symmetry is the line x = -b / 2a.\n        // The focus is the point (x, y) where x = -b / 2a and y = -4ac / (4a)^2.\n        // The directrix is the line y = -4ac / (4a)^2 - b^2 / (4a)\n        -4 * a * c / (4 * a * a) - b * b / (4 * a)",
    "        -a / b",
    "        return -4 * a * c / b",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val m = -a / b\n        val n = y - m * x\n        val x0 = -n / m\n        val y0 = m * x0 + n\n        val d = sqrt(x0 * x0 + y0 * y0)\n        return (d * 2).toLong",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val d = -y / a\n        d.toLong",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val m = -a / b\n        val k = y - m * x\n        val x1 = -b / (2 * a)\n        val y1 = m * x1 + k\n        val x2 = x1 + 1\n        val y2 = m * x2 + k\n        val m1 = -1 / m\n        val k1 = y2 - m1 * x2\n        val x3 = (k1 - k) / (m - m1)\n        val y3 = m * x3 + k\n        val x4 = x3 + 1\n        val y4 = m1 * x4 + k1\n        val m2 = -1 / m1\n        val k2 = y4 - m2 * x4\n        val x5 = (k2 - k1) / (m1 - m2)\n        val y5 = m1 * x5 + k1\n        val x6 = x5 + 1\n        val y6 = m2 * x6 + k2\n        val m3 = -1 / m2\n        val k3 = y6 - m3 * x6\n        val x7 = (k3 - k2) / (m2 - m3)\n        val y7 = m2 * x7 + k2\n        val x8 = x7 + 1\n        val y8 = m3 * x8 + k3\n        val m4 = -1 / m3\n        val k4 = y8 - m4 * x8\n        val x9 = (k4 - k3) / (m3 - m4)\n        val y9 = m3 * x9 + k3\n        val x10 = x9 + 1\n        val y10 = m4 * x10 + k4\n        val m5 = -1 / m4\n        val k5 = y10 - m5 * x10\n        val x11 = (k5 - k4) / (m4 - m5)\n        val y11 = m4 * x11 + k4\n        val x12 = x11 + 1\n        val y12 = m5 * x12 + k5\n",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        // The directrix is a line perpendicular to the axis of symmetry and passing through the focus.\n        // The focus is at (b, c) and the axis of symmetry is the line x = b.\n        // The directrix is the line y = -c - (x - b)^2 / (4a)\n        // The directrix is the line y = -c - (x^2 - 2xb + b^2) / (4a)\n        // The directrix is the line y = -c - x^2 / (4a) + bx / (2a)\n        // The directrix is the line y = -c - x^2 / (4a) + bx / (2a) + b^2 / (4a)\n        // The directrix is the line y = -c - x^2 / (4a) + bx / (2a) + b^2 / (4a) + c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a) + bx / (2a) + b^2 / (4a) + 2c\n        // The directrix is the line y = -x^2 / (4a)",
    "        -a / b",
    "        val d = 2 * a\n        val e = -b\n        val f = c\n        val x = -e / d\n        val y = f - e * e / (4 * d)\n        val k = -d / (2 * e)\n        val y0 = k * x + y\n        return y0",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -a / b",
    "        -a / b",
    "        -b / (2 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        return -(a * a) / (4 * b) + c",
    "        -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -a / b",
    "        return -(a * a + b * b) / (4 * a) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return -d / k",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / b",
    "        return -(4 * a * c) / (b * b)",
    "        -a / b",
    "        -4 * a * c / b",
    "        return -(a * a) / (4 * b) + c",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val slope = -a * 2 * x\n        val yIntercept = y - slope * x\n        return yIntercept",
    "        -a / b",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        val d = (4 * a * c - b * b)\n        if (d < 0) throw new IllegalArgumentException\n        return (b * b - 4 * a * c) / (4 * a)",
    "        -a / b",
    "        return -a / b",
    "        -a / b",
    "        -(a * a) / (4 * b) + c",
    "        -(4 * a * c) / (b * b)",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -b / (2 * a)",
    "        -a / b",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        -(a * a) / (4 * b) + c",
    "        // The directrix is the line y = -b / (2a)\n        -b / (2 * a)",
    "        return -b / (2 * a)",
    "        -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -b / (2 * a)",
    "        -a / b",
    "        -a / b",
    "        return -4 * a * c / b",
    "        -a / b",
    "        return -a / b",
    "        return -a / (2 * b)",
    "        return -a / b",
    "        return -a / b",
    "        -a / (2 * b)",
    "        return -4 * a * c / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / (b * b)",
    "        return -(a * a) / (4 * b) + c",
    "        return -(a * a) / (4 * b) + c",
    "        val d = (a * a - 4 * b * c).toDouble\n        if (d < 0) throw new Exception(\"No real solution\")\n        val x = (-a + sqrt(d)) / (2 * b)\n        val y = a * x + b * x * x + c\n        val m = -a / (2 * b)\n        val k = y - m * x\n        val directrix = m * m + 4 * b\n        directrix.toLong",
    "        return -(a * a) / (4 * b) + c",
    "        -b / (2 * a)",
    "        -(a * a * a * c + a * b * b * b - 3 * a * a * b * c) / (3 * a * a)",
    "        return -(4 * a * c) / (b * b)",
    "        val d = 2 * a\n        return -b / d",
    "        return -(a * a) / (4 * b) + c",
    "        -b / (2 * a)",
    "        return -b / (2 * a)",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val d = y / a\n        return -d",
    "        return -(4 * a * c) / b",
    "        return -(4 * a * c) / (b * b)",
    "        return -b / (2 * a)",
    "        -a / b",
    "        return -a / b",
    "        val d = 2 * a\n        return -(b * b) / d + c",
    "        return -(a * a + b * b) / (4 * a) + c",
    "        return -a / b",
    "        return -a / b",
    "        return -b / (2 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return -d / k",
    "        -(a * a * a * c + a * b * b * b - 3 * a * a * b * c) / (3 * a * a)",
    "        return -b / (2 * a)",
    "        return -b / (2 * a)",
    "        -4 * a * c / b",
    "        return -c / b",
    "        -a / b",
    "        return -a / b",
    "        return -a / b",
    "        return -(4 * a * c) / (b * b)",
    "        -a / b",
    "        return -b / (2 * a)",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val m = -a / b\n        val k = y - m * x\n        val d = -k / m\n        d.toLong",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return -d / k",
    "        return -b / (2 * a)",
    "        -b / (2 * a)",
    "        return -(a * a) / (4 * b) + c",
    "        -(a * a) / (4 * b) + c",
    "        -a / b",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        val x = -b / (2 * a)\n        val y = a * x * x + b * x + c\n        val k = -a / b\n        val d = y - k * x\n        return d.toLong",
    "        return -b / (2 * a)",
    "        -(a * a + b * b) / (4 * a) + c",
    "        return -a / b",
    "        -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        -a / b",
    "        -(a * a * a * c + a * b * b * b - 3 * a * a * b * c) / (3 * a * a)",
    "        return -(4 * a * c) / (b * b)",
    "        return -a / b",
    "        -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -(4 * a * c) / b",
    "        return -(4 * a * c) / (b * b)",
    "        -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -b / (2 * a)"
  ]
}