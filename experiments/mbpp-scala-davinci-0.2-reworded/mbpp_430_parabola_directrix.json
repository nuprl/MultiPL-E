{
  "name": "mbpp_430_parabola_directrix",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the directrix of a parabola.\n    def parabolaDirectrix(a : Long, b : Long, c : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(parabolaDirectrix((5l), (3l), (2l)) == (-198l));\n    assert(parabolaDirectrix((9l), (8l), (4l)) == (-2336l));\n    assert(parabolaDirectrix((2l), (4l), (6l)) == (-130l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        return -a / b",
    "        return -c / b",
    "        return -a / b",
    "        // The directrix is the line y = -b / (2a)\n        -b / (2 * a)",
    "        return -b / (2 * a)",
    "        -a / b",
    "        val p = b / (2 * a)\n        val q = c - a * p * p\n        -q / p",
    "        val d = (a * a + b * b) / (2 * a)\n        return -(c - d) / b",
    "        // The directrix is the line y = -b / (2a)\n        -b / (2 * a)",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        -b / (2 * a)",
    "        return -a / b",
    "        return -a / b",
    "        return -a / b",
    "        return -(a * a) / (4 * b) + c",
    "        return -a / b",
    "        val d = -(b * b) / (4 * a)\n        d - c",
    "        -a / (2 * b)",
    "        return -(4 * a * c) / (b * b)"
  ]
}