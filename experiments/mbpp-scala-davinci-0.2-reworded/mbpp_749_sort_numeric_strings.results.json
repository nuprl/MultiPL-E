{
  "name": "mbpp_749_sort_numeric_strings",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp2k40sv7g.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp2k40sv7g.scala:6)\n\tat Problem$.main(tmp2k40sv7g.scala:12)\n\tat Problem.main(tmp2k40sv7g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(_.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpybz1y8v1.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpybz1y8v1.scala:6)\n\tat Problem$.main(tmpybz1y8v1.scala:11)\n\tat Problem.main(tmpybz1y8v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(_.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpybz1y8v1.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpybz1y8v1.scala:6)\n\tat Problem$.main(tmpybz1y8v1.scala:11)\n\tat Problem.main(tmpybz1y8v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(s => s.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpwx6f109a.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpwx6f109a.scala:6)\n\tat Problem$.main(tmpwx6f109a.scala:11)\n\tat Problem.main(tmpwx6f109a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(_.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpybz1y8v1.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpybz1y8v1.scala:6)\n\tat Problem$.main(tmpybz1y8v1.scala:11)\n\tat Problem.main(tmpybz1y8v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(_.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpybz1y8v1.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpybz1y8v1.scala:6)\n\tat Problem$.main(tmpybz1y8v1.scala:11)\n\tat Problem.main(tmpybz1y8v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(_.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpybz1y8v1.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpybz1y8v1.scala:6)\n\tat Problem$.main(tmpybz1y8v1.scala:11)\n\tat Problem.main(tmpybz1y8v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(_.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpybz1y8v1.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpybz1y8v1.scala:6)\n\tat Problem$.main(tmpybz1y8v1.scala:11)\n\tat Problem.main(tmpybz1y8v1.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmp2k40sv7g.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp2k40sv7g.scala:6)\n\tat Problem$.main(tmp2k40sv7g.scala:12)\n\tat Problem.main(tmp2k40sv7g.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sortWith(_ < _)\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmp947jl7gr.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmp947jl7gr.scala:6)\n\tat Problem$.main(tmp947jl7gr.scala:11)\n\tat Problem.main(tmp947jl7gr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        val nums = nums_str.map(x => x.toLong)\n        nums.sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.$anonfun$1(tmpkppcce2e.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpkppcce2e.scala:6)\n\tat Problem$.main(tmpkppcce2e.scala:12)\n\tat Problem.main(tmpkppcce2e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/scalathon-sort-numeric-strings-in-a-list/\n    def sortNumericStrings(nums_str : List[String]) : List[Long] = {\n        nums_str.map(x => x.toLong).sorted\n    }\n    def main(args: Array[String]) = {\n    assert(sortNumericStrings((List[String](\"4\", \"12\", \"45\", \"7\", \"0\", \"100\", \"200\", \"-12\", \"-500\"))).equals((List[Long](-500l.toLong, -12l.toLong, 0l.toLong, 4l.toLong, 7l.toLong, 12l.toLong, 45l.toLong, 100l.toLong, 200l.toLong))));\n    assert(sortNumericStrings((List[String](\"2\", \"3\", \"8\", \"4\", \"7\", \"9\", \"8\", \"2\", \"6\", \"5\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"6\", \"9\", \"1\", \"2\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 9l.toLong))));\n    assert(sortNumericStrings((List[String](\"1\", \"3\", \"5\", \"7\", \"1\", \"3\", \"13\", \"15\", \"17\", \"5\", \"7 \", \"9\", \"1\", \"11\"))).equals((List[Long](1l.toLong, 1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 9l.toLong, 11l.toLong, 13l.toLong, 15l.toLong, 17l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665510075,
      "stdout": "",
      "stderr": "java.lang.NumberFormatException: For input string: \"7 \"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\tat java.base/java.lang.Long.parseLong(Long.java:711)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.sortNumericStrings$$anonfun$1(tmpeukmhpo4.scala:6)\n\tat scala.collection.immutable.List.map(List.scala:250)\n\tat Problem$.sortNumericStrings(tmpeukmhpo4.scala:6)\n\tat Problem$.main(tmpeukmhpo4.scala:11)\n\tat Problem.main(tmpeukmhpo4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}