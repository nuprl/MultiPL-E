{
  "name": "mbpp_733_find_first_occurrence",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0; var high = A.length - 1\n        while (low < high) {\n            val mid = (low + high) / 2\n            if (A(mid) < x) low = mid + 1\n            else high = mid\n        }\n        if (A(low) == x) low else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) binarySearch(A, x, mid + 1, high)\n                else binarySearch(A, x, low, mid - 1)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) == x) {\n                result = mid\n                high = mid - 1\n            } else if (A(mid) < x) low = mid + 1\n            else high = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            }\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, end)\n                else findFirstOccurrence(A, x, start, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                result = mid\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0;\n        var r = A.length - 1;\n        while (l < r) {\n            val m = (l + r) / 2;\n            if (A(m) < x) l = m + 1;\n            else r = m;\n        }\n        if (A(l) == x) l else -1;\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) binarySearch(A, x, mid + 1, high)\n                else binarySearch(A, x, low, mid - 1)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) < x) return m\n                else r = m - 1\n            }\n            else if (A(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, left : Long, right : Long) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, left, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, left, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, right)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var (lo, hi) = (0L, A.length - 1)\n        while (lo <= hi) {\n            val mid = (lo + hi) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else hi = mid - 1\n            }\n            else if (A(mid.toInt) < x) lo = mid + 1\n            else hi = mid - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplshdjddr.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33melse\u001b[0m hi = mid - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Long\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplshdjddr.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33melse\u001b[0m hi = mid - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Long\n\u001b[31m   |\u001b[0m                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start == end) {\n                if (A(start.toInt) == x) start else -1\n            } else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    var i = mid\n                    while (i >= start && A(i.toInt) == x) i -= 1\n                    i + 1\n                } else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1) else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n            else findFirstOccurrence(A, x, mid + 1, high)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n            if (A(mid) == x) result = mid\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, left : Long, right : Long) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, left, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, left, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, right)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return findFirstOccurrence(A, x, start, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return findFirstOccurrence(A, x, start, mid - 1)\n            else return findFirstOccurrence(A, x, mid + 1, end)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x && (mid == 0 || A(mid.toInt - 1) != x)) mid\n                else if (A(mid.toInt) >= x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, end)\n                else findFirstOccurrence(A, x, start, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (A(m) < x) l = m + 1\n            else r = m\n        }\n        if (A(l) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0;\n        var high = A.length - 1;\n        var result = -1;\n        while (low <= high) {\n            val mid = (low + high) / 2;\n            if (A(mid) >= x) {\n                result = mid;\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        return result;\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, i : Long) : Long = {\n            if (i == A.length) -1\n            else if (A(i.toInt) == x) i\n            else findFirstOccurrence(A, x, i + 1)\n        }\n        findFirstOccurrence(A, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return binarySearch(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return binarySearch(A, x, low, mid - 1)\n            else return binarySearch(A, x, mid + 1, high)\n        }\n        return binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var (l, r) = (0L, A.length - 1)\n        while (l < r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) < x) l = m + 1\n            else r = m\n        }\n        if (A(l.toInt) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_03s74ft.scala:10:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m r = m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (m : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = A.length - 1\n        var m = 0L\n        var result = -1L\n        while (l <= r) {\n            m = (l + r) / 2\n            if (A(m.toInt) == x) {\n                result = m\n                r = m - 1\n            } else if (A(m.toInt) > x) {\n                r = m - 1\n            } else {\n                l = m + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpltanrf_m.scala:14:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpltanrf_m.scala:16:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, left : Long, right : Long) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, left, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, left, mid - 1)\n                else binarySearch(A, x, mid + 1, right)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return findFirstOccurrence(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return findFirstOccurrence(A, x, low, mid - 1)\n            else return findFirstOccurrence(A, x, mid + 1, high)\n        }\n        return findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                if (mid == 0 || A(mid - 1) != x) return mid\n                else right = mid - 1\n            }\n            else if (A(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = A.length - 1\n        var result = -1L\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) == x) {\n                result = m\n                r = m - 1\n            } else if (A(m.toInt) > x) r = m - 1\n            else l = m + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122545,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjmvir9t.scala:13:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsjmvir9t.scala:14:43 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            } \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (A(m.toInt) > x) r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    Long\n\u001b[31m   |\u001b[0m                                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (A(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (A(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (A(m) < x) l = m + 1\n            else r = m\n        }\n        if (A(l) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0; var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                result = mid\n                right = mid - 1\n            } else left = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, left : Long, right : Long) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, left, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, right)\n                else findFirstOccurrence(A, x, left, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return binarySearch(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return binarySearch(A, x, low, mid - 1)\n            else return binarySearch(A, x, mid + 1, high)\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                if (mid == 0 || A(mid - 1) != x) return mid\n                else right = mid - 1\n            }\n            else if (A(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (A(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (A(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return binarySearch(A, x, start, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return binarySearch(A, x, start, mid - 1)\n            else return binarySearch(A, x, mid + 1, end)\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = A.length - 1\n        var result = -1L\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) == x) {\n                result = m\n                r = m - 1\n            } else if (A(m.toInt) > x) {\n                r = m - 1\n            } else {\n                l = m + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpma71ox_g.scala:13:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpma71ox_g.scala:15:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m                r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Long\n\u001b[31m   |\u001b[0m                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (A(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (A(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def search(low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else search(low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) search(low, mid - 1)\n                else search(mid + 1, high)\n            }\n        }\n        search(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) < x) l = m + 1\n            else r = m - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                result = mid\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid) > x) {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrenceRec(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrenceRec(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrenceRec(A, x, low, mid - 1)\n                else findFirstOccurrenceRec(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrenceRec(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else search(l, m - 1)\n                }\n                else if (A(m.toInt) < x) search(m + 1, r)\n                else search(l, m - 1)\n            }\n        }\n        search(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else search(l, m - 1)\n                }\n                else if (A(m.toInt) < x) search(m + 1, r)\n                else search(l, m - 1)\n            }\n        }\n        search(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = low + (high - low) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            }\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            }\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) < x) return m\n                else r = m - 1\n            }\n            else if (A(m) < x) l = m + 1\n            else r = m - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n            else findFirstOccurrence(A, x, mid + 1, high)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid) > x) {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) < x) l = m + 1\n            else if (A(m) > x) r = m - 1\n            else {\n                if (m == 0 || A(m - 1) < x) return m\n                else r = m - 1\n            }\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def find(low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0) mid\n                    else if (A(mid.toInt - 1) < x) mid\n                    else find(low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) find(low, mid - 1)\n                else find(mid + 1, high)\n            }\n        }\n        find(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def find(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else find(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) find(A, x, mid + 1, high)\n                else find(A, x, low, mid - 1)\n            }\n        }\n        find(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                result = mid\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid) > x) right = mid - 1\n            else left = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0\n        var r = A.length - 1\n        var result = -1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                result = m\n                r = m - 1\n            } else if (A(m) < x) {\n                l = m + 1\n            } else {\n                r = m - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            }\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = low + (high - low) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = low + (high - low) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return binarySearch(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return binarySearch(A, x, low, mid - 1)\n            else return binarySearch(A, x, mid + 1, high)\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122555,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        var m = 0\n        while (l <= r) {\n            m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) < x) l = m + 1\n            else r = m - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, left : Long, right : Long) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, left, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, left, mid - 1)\n                else binarySearch(A, x, mid + 1, right)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (A(mid) < x) left = mid + 1\n            else right = mid\n        }\n        if (A(left) == x) left else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def search(l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else search(l, m - 1)\n                }\n                else if (A(m.toInt) > x) search(l, m - 1)\n                else search(m + 1, r)\n            }\n        }\n        search(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def find(low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else find(low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) find(mid + 1, high)\n                else find(low, mid - 1)\n            }\n        }\n        find(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def search(low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else search(low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) search(mid + 1, high)\n                else search(low, mid - 1)\n            }\n        }\n        search(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var mid = 0\n        var result = -1\n        while (low <= high) {\n            mid = (low + high) / 2\n            if (A(mid) == x) {\n                result = mid\n                high = mid - 1\n            } else if (A(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return findFirstOccurrence(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return findFirstOccurrence(A, x, low, mid - 1)\n            else return findFirstOccurrence(A, x, mid + 1, high)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def search(start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else search(start, mid - 1)\n                }\n                else if (A(mid.toInt) < x) search(mid + 1, end)\n                else search(start, mid - 1)\n            }\n        }\n        search(0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val m = (l + r) / 2\n            if (A(m.toInt) == x) {\n                if (m == 0 || A(m.toInt - 1) != x) return m\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n            else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n            else findFirstOccurrence(A, x, m + 1, r)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) < x) left = mid + 1\n            else if (A(mid) > x) right = mid - 1\n            else {\n                result = mid\n                right = mid - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                if (mid == 0 || A(mid - 1) != x) return mid\n                else right = mid - 1\n            }\n            else if (A(mid) < x) left = mid + 1\n            else right = mid - 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122546,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        var m = (l + r) / 2\n        while (l <= r) {\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) < x) return m\n                else r = m - 1\n            }\n            else if (A(m) < x) l = m + 1\n            else r = m - 1\n            m = (l + r) / 2\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, start, mid - 1)\n                else binarySearch(A, x, mid + 1, end)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) == x) {\n                result = mid\n                high = mid - 1\n            } else if (A(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n            if (A(mid) == x) result = mid\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x) {\n                if (mid == 0 || A(mid.toInt - 1) != x) return mid\n                else return findFirstOccurrence(A, x, low, mid - 1)\n            }\n            else if (A(mid.toInt) > x) return findFirstOccurrence(A, x, low, mid - 1)\n            else return findFirstOccurrence(A, x, mid + 1, high)\n        }\n        return findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (A(mid.toInt) == x && (mid == 0 || A(mid.toInt - 1) < x)) return mid\n            if (A(mid.toInt) < x) return findFirstOccurrence(A, x, mid + 1, end)\n            else return findFirstOccurrence(A, x, start, mid - 1)\n        }\n        return findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            }\n            else low = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var (l, r) = (0L, A.length - 1)\n        while (l < r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) < x) l = m + 1\n            else r = m\n        }\n        if (A(l.toInt) == x) l\n        else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp91gj34e9.scala:10:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m r = m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (m : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, end)\n                else findFirstOccurrence(A, x, start, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) == x) {\n                if (mid == 0 || A(mid - 1) != x) return mid\n                else high = mid - 1\n            }\n            else if (A(mid) > x) high = mid - 1\n            else low = mid + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var lo = 0; var hi = A.length - 1\n        while (lo < hi) {\n            val mid = (lo + hi) / 2\n            if (A(mid) < x) lo = mid + 1\n            else hi = mid\n        }\n        if (A(lo) == x) lo else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var lo = 0\n        var hi = A.length - 1\n        var result = -1\n        while (lo <= hi) {\n            val mid = (lo + hi) / 2\n            if (A(mid) == x) {\n                result = mid\n                hi = mid - 1\n            }\n            else if (A(mid) > x) hi = mid - 1\n            else lo = mid + 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0L; var r = A.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) < x) l = m + 1\n            else r = m\n        }\n        if (A(l.toInt) == x) l else -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122556,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqke0cm1t.scala:10:21 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33melse\u001b[0m r = m\n\u001b[31m\u001b[31m   |\u001b[0m                     ^\u001b[0m\n\u001b[31m   |\u001b[0m                     Found:    (m : Long)\n\u001b[31m   |\u001b[0m                     Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) >= x) {\n                right = mid - 1\n            } else {\n                left = mid + 1\n            }\n            if (A(mid) == x) result = mid\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, start : Long, end : Long) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, start, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, start, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, end)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122536,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var low = 0\n        var high = A.length - 1\n        var result = -1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (A(mid) >= x) {\n                result = mid\n                high = mid - 1\n            } else {\n                low = mid + 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0L\n        var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m.toInt) == x) {\n                if (m == 0 || A(m.toInt - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m.toInt) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4oezu3s.scala:12:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33melse\u001b[0m r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4oezu3s.scala:14:41 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (A(m.toInt) > x) r = m - \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         Found:    Long\n\u001b[31m   |\u001b[0m                                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (A(mid.toInt) == x && (mid == 0 || A(mid.toInt - 1) != x)) return mid\n            if (A(mid.toInt) >= x) return findFirstOccurrence(A, x, low, mid - 1)\n            else return findFirstOccurrence(A, x, mid + 1, high)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122557,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) < x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) < x) findFirstOccurrence(A, x, m + 1, r)\n                else findFirstOccurrence(A, x, l, m - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var left = 0\n        var right = A.length - 1\n        var result = -1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (A(mid) == x) {\n                result = mid\n                right = mid - 1\n            } else if (A(mid) < x) {\n                left = mid + 1\n            } else {\n                right = mid - 1\n            }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122558,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var start = 0\n        var end = A.length - 1\n        var result = -1\n        while (start <= end) {\n            val mid = (start + end) / 2\n            if (A(mid) == x) {\n                result = mid\n                end = mid - 1\n            }\n            else if (A(mid) < x) start = mid + 1\n            else end = mid - 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122559,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else binarySearch(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (A(m.toInt) == x) {\n                    if (m == 0 || A(m.toInt - 1) != x) m\n                    else findFirstOccurrence(A, x, l, m - 1)\n                }\n                else if (A(m.toInt) > x) findFirstOccurrence(A, x, l, m - 1)\n                else findFirstOccurrence(A, x, m + 1, r)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        var l = 0; var r = A.length - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (A(m) == x) {\n                if (m == 0 || A(m - 1) != x) return m\n                else r = m - 1\n            }\n            else if (A(m) > x) r = m - 1\n            else l = m + 1\n        }\n        -1\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) < x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) < x) findFirstOccurrence(A, x, mid + 1, high)\n                else findFirstOccurrence(A, x, low, mid - 1)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1665509931,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, l : Long, r : Long) : Long = {\n            if (l > r) return -1\n            val m = (l + r) / 2\n            if (A(m.toInt) == x) {\n                if (m == 0 || A(m.toInt - 1) != x) return m\n                else return findFirstOccurrence(A, x, l, m - 1)\n            }\n            else if (A(m.toInt) < x) return findFirstOccurrence(A, x, m + 1, r)\n            else return findFirstOccurrence(A, x, l, m - 1)\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122560,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def findFirstOccurrence(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = low + (high - low) / 2\n                if (A(mid.toInt) == x) {\n                    if (mid == 0 || A(mid.toInt - 1) != x) mid\n                    else findFirstOccurrence(A, x, low, mid - 1)\n                }\n                else if (A(mid.toInt) > x) findFirstOccurrence(A, x, low, mid - 1)\n                else findFirstOccurrence(A, x, mid + 1, high)\n            }\n        }\n        findFirstOccurrence(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122547,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the index of the first occurrence of a given number in a sorted list.\n    def findFirstOccurrence(A : List[Long], x : Long) : Long = {\n        def binarySearch(A : List[Long], x : Long, low : Long, high : Long) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (A(mid.toInt) == x) mid\n                else if (A(mid.toInt) > x) binarySearch(A, x, low, mid - 1)\n                else binarySearch(A, x, mid + 1, high)\n            }\n        }\n        binarySearch(A, x, 0, A.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(findFirstOccurrence((List[Long](2l.toLong, 5l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (1l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (5l)) == (2l));\n    assert(findFirstOccurrence((List[Long](2l.toLong, 4l.toLong, 1l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong)), (6l)) == (4l));\n    }\n\n}\n",
      "timestamp": 1666122560,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}