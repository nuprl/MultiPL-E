{
  "name": "mbpp_752_jacobsthal_num",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    def jacobsthalNum(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(jacobsthalNum((5l)) == (11l));\n    assert(jacobsthalNum((2l)) == (1l));\n    assert(jacobsthalNum((4l)) == (5l));\n    assert(jacobsthalNum((13l)) == (2731l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) 0\n        else if (n == 1) 1\n        else jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)",
    "        if (n == 0) return 0\n        if (n == 1) return 1\n        return jacobsthalNum(n - 1) + 2 * jacobsthalNum(n - 2)"
  ]
}