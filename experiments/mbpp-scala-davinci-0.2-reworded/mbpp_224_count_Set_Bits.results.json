{
  "name": "mbpp_224_count_Set_Bits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqmihadwm.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa95c4b3y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i != 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp > 0) {\n            if ((temp & 1) == 1) count += 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            if ((temp & 1) == 1) count += 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if (i % 2 == 1) count += 1\n            i /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x != 0) {\n            count += (x & 1)\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppfkaj04x.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (x & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var m = n\n        while (m > 0) {\n            count += m & 1\n            m >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp42oimc9v.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += m & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa95c4b3y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x = x >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnt6dbdj3.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa95c4b3y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn > 0) {\n            if ((nn & 1) == 1) count += 1\n            nn = nn >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpomfisv1t.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp > 0) {\n            if (temp % 2 == 1) count += 1\n            temp /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        // Write your code here\n        var count = 0\n        var num = n\n        while(num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpxfnitji7.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x != 0) {\n            count += x & 1\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpwqqds41k.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdrxeqro2.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var i : Long = 0\n        while (i < 64) {\n            if (((n >> i) & 1) == 1) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if (i % 2 == 1) count += 1\n            i /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var i : Long = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjz1u3plz.scala:15)\n\tat Problem.main(tmpjz1u3plz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var i : Long = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num != 0) {\n            count += 1\n            num = num & (num - 1)\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqmihadwm.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        var num = n\n        while (i < 64) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            count += temp & 1\n            temp >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpm8bboy10.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += temp & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmphpieaz8t.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var n2 = n\n        while (n2 > 0) {\n            if ((n2 & 1) == 1) count += 1\n            n2 >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var i : Long = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((n & (1L << i)) != 0) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var m = n\n        while(m > 0) {\n            if((m & 1) == 1) count += 1\n            m = m >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var num : Long = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x != 0) {\n            count += 1\n            x &= (x - 1)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var n1 = n\n        while (n1 > 0) {\n            if ((n1 & 1) == 1) count += 1\n            n1 = n1 >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp > 0) {\n            if (temp % 2 == 1) count += 1\n            temp /= 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa95c4b3y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn > 0) {\n            if ((nn & 1) == 1) count += 1\n            nn = nn >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += (x & 1)\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2yek8cpa.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (x & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num != 0) {\n            count += 1\n            num &= (num - 1)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x = x >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var x : Long = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var n1 = n\n        while (n1 > 0) {\n            if (n1 % 2 == 1) count += 1\n            n1 /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var n2 = n\n        while (n2 > 0) {\n            if ((n2 & 1) == 1) count += 1\n            n2 = n2 >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp > 0) {\n            count += temp & 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa7nhi7v7.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += temp & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += (i & 1)\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb5oew9ai.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (i & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgj_6inq0.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += x & 1\n            x = x >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptfzvmr84.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp > 0) {\n            if (temp % 2 == 1) count += 1\n            temp /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn > 0) {\n            if (nn % 2 == 1) count += 1\n            nn /= 2\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var num : Long = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn > 0) {\n            if ((nn & 1) == 1) count += 1\n            nn = nn >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i != 0) {\n            count += i & 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5nc_vubo.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var c = 0\n        var nn = n\n        while (nn > 0) {\n            c += (nn & 1)\n            nn >>= 1\n        }\n        c\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpl3dnvjra.scala:9:14 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            c += (nn & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num != 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp48boot68.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn != 0) {\n            if ((nn & 1) == 1) count += 1\n            nn >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa95c4b3y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            if ((temp & 1) == 1) count += 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn > 0) {\n            count += nn & 1\n            nn = nn >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjkwx89yc.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += nn & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while(nn > 0) {\n            count += (nn & 1)\n            nn = nn >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy5_9nfvt.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (nn & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        for (i <- 0 to 63) {\n            if ((n & (1L << i)) != 0) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123331,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += (x & 1)\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2yek8cpa.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (x & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgj_6inq0.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            if ((temp & 1) == 1) count += 1\n            temp >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x = x >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) count += 1\n            x /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if (((n >> i) & 1) == 1) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += (x & 1)\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2yek8cpa.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (x & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpomfisv1t.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while(i > 0) {\n            if((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += (x & 1)\n            x = x >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr21smybq.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (x & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num != 0) {\n            count += 1\n            num &= (num - 1)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if (i % 2 == 1) count += 1\n            i = i / 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpa95c4b3y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        // Fill in the code here\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if (num % 2 == 1) count += 1\n            num /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            count += temp & 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrio9lhp.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += temp & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var m = n\n        while (m > 0) {\n            if ((m & 1) == 1) count += 1\n            m >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var temp : Long = n\n        while (temp != 0) {\n            count += temp & 1\n            temp >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i != 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0729bzpg.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 1\n        while (i <= n) {\n            if ((i & n) != 0) count += 1\n            i <<= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var nn = n\n        while (nn > 0) {\n            count += nn & 1\n            nn = nn >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123330,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjkwx89yc.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += nn & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i != 0) {\n            count += i & 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0729bzpg.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += x & 1\n            x = x >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvc4o20wk.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += x & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnt6dbdj3.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            count += num & 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp37kotkf4.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += num & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if (((n >> i) & 1) == 1) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            if ((temp & 1) == 1) count += 1\n            temp = temp >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += (i & 1)\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9nvzd18p.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (i & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += i & 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2t2qz5_g.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += i & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        // Write your code here\n        var count = 0\n        var temp = n\n        while(temp != 0) {\n            if((temp & 1) == 1) count += 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num != 0) {\n            count += 1\n            num = num & (num - 1)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var m = n\n        while (m > 0) {\n            if ((m & 1) == 1) count += 1\n            m >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var temp = n\n        while (temp != 0) {\n            count += temp & 1\n            temp = temp >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmrio9lhp.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += temp & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            if ((x & 1) == 1) count += 1\n            x >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0L\n        var i = 0L\n        while (i < 32) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var temp : Long = n\n        while (temp != 0) {\n            count += temp & 1\n            temp >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var i : Long = 1\n        while (i <= n) {\n            if ((n & i) != 0) count += 1\n            i <<= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123340,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0L\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123342,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        // Fill in the code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123342,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp5h26cln6.scala:10)\n\tat Problem.main(tmp5h26cln6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x != 0) {\n            count += 1\n            x &= x - 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123342,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            count += (i & 1)\n            i = i >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb5oew9ai.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (i & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123320,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x > 0) {\n            count += (x & 1)\n            x = x >> 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123339,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpr21smybq.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += (x & \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1 << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3sfgze4_.scala:15)\n\tat Problem.main(tmp3sfgze4_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i != 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var num = n\n        while (num > 0) {\n            if ((num & 1) == 1) count += 1\n            num = num >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var n1 = n\n        while (n1 != 0) {\n            count += n1 & 1\n            n1 >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123342,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpi4wcs42b.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            count += n1 & \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var x : Long = n\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123342,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i = i >> 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count : Long = 0\n        var i : Long = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123319,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var x = n\n        while (x != 0) {\n            count += 1\n            x &= (x - 1)\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123329,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while (i > 0) {\n            if ((i & 1) == 1) count += 1\n            i >>= 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = 0\n        while (i < 64) {\n            if ((n & (1L << i)) != 0) count += 1\n            i += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510493,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of set bits (binary digits with value 1) in a given number.\n    def countSetBits(n : Long) : Long = {\n        var count = 0\n        var i = n\n        while(i > 0) {\n            if(i % 2 == 1) count += 1\n            i /= 2\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(countSetBits((2l)) == (1l));\n    assert(countSetBits((4l)) == (1l));\n    assert(countSetBits((6l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666123342,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}