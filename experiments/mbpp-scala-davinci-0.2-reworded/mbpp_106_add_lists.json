{
  "name": "mbpp_106_add_lists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to append the given list to the given tuples.\n    def addLists(test_list : List[Long], test_tup : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addLists((List[Long](5l.toLong, 6l.toLong, 7l.toLong)), (9l, 10l)) == (9l, 10l, 5l, 6l, 7l));\n    assert(addLists((List[Long](6l.toLong, 7l.toLong, 8l.toLong)), (10l, 11l)) == (10l, 11l, 6l, 7l, 8l));\n    assert(addLists((List[Long](7l.toLong, 8l.toLong, 9l.toLong)), (11l, 12l)) == (11l, 12l, 7l, 8l, 9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var result : Long = 0\n        for (i <- test_list) {\n            result += i\n        }\n        result += test_tup\n        return result",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        return sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum = 0L\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum = 0L\n        for (i <- 0 until test_list.length) {\n            sum += test_list(i) * pow(10, test_list.length - i - 1).toLong\n        }\n        sum + test_tup",
    "        var sum = 0L\n        for (i <- test_list) {\n            sum += i\n        }\n        return sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        return sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum = 0L\n        for (i <- test_list) {\n            sum += i\n        }\n        return sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum = 0L\n        for (i <- test_list) {\n            sum += i\n        }\n        return sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        var sum : Long = 0\n        for (i <- test_list) {\n            sum += i\n        }\n        sum + test_tup",
    "        test_list.map(x => x + test_tup).sum",
    "        var sum = 0L\n        for (i <- test_list) {\n            sum += i\n        }\n        return sum + test_tup",
    "        var sum : Long = 0\n        for (i <- 0 until test_list.length) {\n            sum += test_list(i) * test_tup\n            test_tup *= 10\n        }\n        return sum"
  ]
}