{
  "name": "mbpp_262_split_two_parts",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    def splitTwoParts(list1 : Any, L : Long) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(splitTwoParts((Any(1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((Any(1l.toLong, 1l.toLong, 2l.toLong), List[Long](3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)))));\n    assert(splitTwoParts((Any(\"a\", \"b\", \"c\", \"d\")), (2l)).equals((Any(\"a\", \"b\"), List[String](\"c\", \"d\")))));\n    assert(splitTwoParts((Any(\"p\", \"y\", \"t\", \"h\", \"o\", \"n\")), (4l)).equals((Any(\"p\", \"y\", \"t\", \"h\"), List[String](\"o\", \"n\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = list.splitAt(L.toInt)\n        list2",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.take(L.toInt)\n        var list4 = list2.drop(L.toInt)\n        var tuple = (list3, list4)\n        return tuple",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.splitAt(L.toInt)\n        list3",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.splitAt(L.toInt)\n        list3",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var i = 0\n        for (i <- 0 to list2.length - 1) {\n            if (i < L) {\n                list3 = list3 :+ list2(i)\n            }\n            else {\n                list4 = list4 :+ list2(i)\n            }\n        }\n        return (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Int]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.slice(0, L.toInt)\n        val list4 = list2.slice(L.toInt, list2.length)\n        val tuple = (list3, list4)\n        tuple",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.slice(0, L.toInt)\n        val list4 = list2.slice(L.toInt, list2.length)\n        (list3, list4)",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.splitAt(L.toInt)\n        return list3",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = List[Any]()\n        var list4 = List[Any]()\n        var i = 0\n        while (i < L) {\n            list3 = list3 :+ list2(i)\n            i += 1\n        }\n        i = L.toInt\n        while (i < list2.length) {\n            list4 = list4 :+ list2(i)\n            i += 1\n        }\n        (list3, list4)",
    "        val list2 = list1.asInstanceOf[List[Any]]\n        val list3 = list2.take(L.toInt)\n        val list4 = list2.drop(L.toInt)\n        (list3, list4)",
    "        val list = list1.asInstanceOf[List[Any]]\n        val list2 = list.take(L.toInt)\n        val list3 = list.drop(L.toInt)\n        (list2, list3)"
  ]
}