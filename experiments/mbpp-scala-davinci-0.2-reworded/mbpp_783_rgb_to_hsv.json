{
  "name": "mbpp_783_rgb_to_hsv",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    def rgbToHsv(r : Long, g : Long, b : Long) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(rgbToHsv((255l), (255l), (255l)).equals((Any((0l, 0.0f, 100.0f)))));\n    assert(rgbToHsv((0l), (215l), (0l)).equals((Any((120.0f, 100.0f, 84.31372549019608f)))));\n    assert(rgbToHsv((10l), (215l), (110l)).equals((Any((149.26829268292684f, 95.34883720930233f, 84.31372549019608f)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val rr = r / 255.0\n        val gg = g / 255.0\n        val bb = b / 255.0\n        val cmax = max(max(rr, gg), bb)\n        val cmin = min(min(rr, gg), bb)\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rr) 60 * ((gg - bb) / delta % 6) else if (cmax == gg) 60 * ((bb - rr) / delta + 2) else 60 * ((rr - gg) / delta + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(rf, max(gf, bf))\n        val cmin = min(rf, min(gf, bf))\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rf) 60 * ((gf - bf) / delta) % 360 else if (cmax == gf) 60 * ((bf - rf) / delta) + 120 else 60 * ((rf - gf) / delta) + 240\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(rf, max(gf, bf))\n        val cmin = min(rf, min(gf, bf))\n        val delta = cmax - cmin\n        val hue = if (delta == 0) 0 else if (cmax == rf) 60 * (((gf - bf) / delta) % 6) else if (cmax == gf) 60 * ((bf - rf) / delta + 2) else 60 * ((rf - gf) / delta + 4)\n        val saturation = if (cmax == 0) 0 else delta / cmax\n        val value = cmax\n        (hue, saturation, value)",
    "        val rr = r / 255.0\n        val gg = g / 255.0\n        val bb = b / 255.0\n        val cmax = max(max(rr, gg), bb)\n        val cmin = min(min(rr, gg), bb)\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rr) 60 * (((gg - bb) / delta) % 6) else if (cmax == gg) 60 * (((bb - rr) / delta) + 2) else 60 * (((rr - gg) / delta) + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(rf, max(gf, bf))\n        val cmin = min(rf, min(gf, bf))\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rf) 60 * ((gf - bf) / delta) % 360 else if (cmax == gf) 60 * ((bf - rf) / delta) + 120 else 60 * ((rf - gf) / delta) + 240\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val r1 = r / 255.0\n        val g1 = g / 255.0\n        val b1 = b / 255.0\n        val cmax = max(r1, max(g1, b1))\n        val cmin = min(r1, min(g1, b1))\n        val delta = cmax - cmin\n        val hue = if (delta == 0) 0 else if (cmax == r1) 60 * (((g1 - b1) / delta) % 6) else if (cmax == g1) 60 * (((b1 - r1) / delta) + 2) else 60 * (((r1 - g1) / delta) + 4)\n        val saturation = if (cmax == 0) 0 else delta / cmax\n        val value = cmax\n        (hue, saturation, value)",
    "        val rr = r / 255.0\n        val gg = g / 255.0\n        val bb = b / 255.0\n        val cmax = max(max(rr, gg), bb)\n        val cmin = min(min(rr, gg), bb)\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rr) 60 * (((gg - bb) / delta) % 6) else if (cmax == gg) 60 * ((bb - rr) / delta + 2) else 60 * ((rr - gg) / delta + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rr = r / 255.0\n        val gg = g / 255.0\n        val bb = b / 255.0\n        val max = max(max(rr, gg), bb)\n        val min = min(min(rr, gg), bb)\n        val diff = max - min\n        val h = if (max == rr) {\n            60 * ((gg - bb) / diff)\n        } else if (max == gg) {\n            60 * (2 + (bb - rr) / diff)\n        } else {\n            60 * (4 + (rr - gg) / diff)\n        }\n        val s = if (max == 0) {\n            0\n        } else {\n            diff / max\n        }\n        val v = max\n        (h, s, v)",
    "        val rr = r / 255.0\n        val gg = g / 255.0\n        val bb = b / 255.0\n        val cmax = max(max(rr, gg), bb)\n        val cmin = min(min(rr, gg), bb)\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rr) 60 * (((gg - bb) / delta) % 6) else if (cmax == gg) 60 * ((bb - rr) / delta + 2) else 60 * ((rr - gg) / delta + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val max = List(rf, gf, bf).max\n        val min = List(rf, gf, bf).min\n        val h = if (max == min) 0 else if (max == rf) 60 * ((gf - bf) / (max - min)) else if (max == gf) 60 * (2 + (bf - rf) / (max - min)) else 60 * (4 + (rf - gf) / (max - min))\n        val s = if (max == 0) 0 else (max - min) / max\n        val v = max\n        (h, s, v)",
    "        val r1 = r / 255.0\n        val g1 = g / 255.0\n        val b1 = b / 255.0\n        val cmax = max(r1, max(g1, b1))\n        val cmin = min(r1, min(g1, b1))\n        val delta = cmax - cmin\n        val hue = if (delta == 0) 0 else if (cmax == r1) 60 * ((g1 - b1) / delta) else if (cmax == g1) 60 * ((b1 - r1) / delta + 2) else 60 * ((r1 - g1) / delta + 4)\n        val saturation = if (cmax == 0) 0 else delta / cmax\n        val value = cmax\n        (hue, saturation, value)",
    "        val r1 = r / 255.0\n        val g1 = g / 255.0\n        val b1 = b / 255.0\n        val cmax = max(r1, max(g1, b1))\n        val cmin = min(r1, min(g1, b1))\n        val delta = cmax - cmin\n        val hue = if (delta == 0) 0 else if (cmax == r1) 60 * (((g1 - b1) / delta) % 6) else if (cmax == g1) 60 * (((b1 - r1) / delta) + 2) else 60 * (((r1 - g1) / delta) + 4)\n        val saturation = if (cmax == 0) 0 else delta / cmax\n        val value = cmax\n        (hue, saturation, value)",
    "        val cmax = max(r, max(g, b))\n        val cmin = min(r, min(g, b))\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == r) 60 * ((g - b) / delta) % 360 else if (cmax == g) 60 * ((b - r) / delta) + 120 else 60 * ((r - g) / delta) + 240\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax / 255.0\n        (h, s, v)",
    "        val cmax = max(r, max(g, b))\n        val cmin = min(r, min(g, b))\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == r) 60 * (((g - b) / delta) % 6) else if (cmax == g) 60 * ((b - r) / delta + 2) else 60 * ((r - g) / delta + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax / 255.0\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(max(rf, gf), bf)\n        val cmin = min(min(rf, gf), bf)\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rf) 60 * (((gf - bf) / delta) % 6) else if (cmax == gf) 60 * ((bf - rf) / delta + 2) else 60 * ((rf - gf) / delta + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(rf, max(gf, bf))\n        val cmin = min(rf, min(gf, bf))\n        val delta = cmax - cmin\n        val hue = if (delta == 0) 0 else if (cmax == rf) 60 * (((gf - bf) / delta) % 6) else if (cmax == gf) 60 * (((bf - rf) / delta) + 2) else 60 * (((rf - gf) / delta) + 4)\n        val saturation = if (cmax == 0) 0 else delta / cmax\n        val value = cmax\n        (hue, saturation, value)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(rf, max(gf, bf))\n        val cmin = min(rf, min(gf, bf))\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rf) 60 * (((gf - bf) / delta) % 6) else if (cmax == gf) 60 * (((bf - rf) / delta) + 2) else 60 * (((rf - gf) / delta) + 4)\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val cmax = max(rf, max(gf, bf))\n        val cmin = min(rf, min(gf, bf))\n        val delta = cmax - cmin\n        val hue = if (delta == 0) 0 else if (cmax == rf) 60 * ((gf - bf) / delta) else if (cmax == gf) 60 * ((bf - rf) / delta) + 120 else 60 * ((rf - gf) / delta) + 240\n        val saturation = if (cmax == 0) 0 else delta / cmax\n        val value = cmax\n        (hue, saturation, value)",
    "        val rr = r / 255.0\n        val gg = g / 255.0\n        val bb = b / 255.0\n        val cmax = max(max(rr, gg), bb)\n        val cmin = min(min(rr, gg), bb)\n        val delta = cmax - cmin\n        val h = if (delta == 0) 0 else if (cmax == rr) 60 * ((gg - bb) / delta) else if (cmax == gg) 60 * ((bb - rr) / delta) + 120 else 60 * ((rr - gg) / delta) + 240\n        val s = if (cmax == 0) 0 else delta / cmax\n        val v = cmax\n        (h, s, v)",
    "        val rf = r / 255.0\n        val gf = g / 255.0\n        val bf = b / 255.0\n        val max = max(max(rf, gf), bf)\n        val min = min(min(rf, gf), bf)\n        val diff = max - min\n        val h = if (max == min) 0 else if (max == rf) 60 * ((gf - bf) / diff) else if (max == gf) 60 * (2 + (bf - rf) / diff) else 60 * (4 + (rf - gf) / diff)\n        val s = if (max == 0) 0 else diff / max\n        val v = max\n        (h, s, v)"
  ]
}