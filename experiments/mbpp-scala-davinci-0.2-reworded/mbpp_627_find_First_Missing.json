{
  "name": "mbpp_627_find_First_Missing",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the smallest missing number from a sorted list of natural numbers.\n    def findFirstMissing(array : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong))) == (4l));\n    assert(findFirstMissing((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 6l.toLong, 9l.toLong))) == (3l));\n    assert(findFirstMissing((List[Long](2l.toLong, 3l.toLong, 5l.toLong, 8l.toLong, 9l.toLong))) == (0l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        var missing = 1\n        for (i <- array) {\n            if (i == missing) missing += 1\n        }\n        missing",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i + 1) return i + 1\n            i += 1\n        }\n        return i + 1",
    "        var i = 0\n        while (i < array.length - 1) {\n            if (array(i + 1) - array(i) > 1) return array(i) + 1\n            i += 1\n        }\n        return array(i) + 1",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        var i = 0\n        while (i < array.length - 1) {\n            if (array(i + 1) - array(i) > 1) return array(i) + 1\n            i += 1\n        }\n        return array(array.length - 1) + 1",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i + 1) return i + 1\n            i += 1\n        }\n        return array.length + 1",
    "        val n = array.length\n        val max = array(n - 1)\n        val min = array(0)\n        val range = max - min + 1\n        val count = new Array[Int](range.toInt)\n        for (i <- 0 until n) {\n            count(array(i).toInt - min.toInt) += 1\n        }\n        for (i <- 0 until range.toInt) {\n            if (count(i) == 0) return min + i\n        }\n        return max + 1",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        var first = 0\n        var last = array.length - 1\n        while (first <= last) {\n            val mid = (first + last) / 2\n            if (array(mid) == mid) first = mid + 1\n            else last = mid - 1\n        }\n        first",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i + 1) return i + 1\n            i += 1\n        }\n        return i + 1",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        if (array.isEmpty) return 1\n        var i = 0\n        while (i < array.length - 1) {\n            if (array(i + 1) - array(i) > 1) return array(i) + 1\n            i += 1\n        }\n        return array(array.length - 1) + 1",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        return i",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i + 1) return i + 1\n            i += 1\n        }\n        return array.length + 1",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        return i",
    "        var i = 0\n        while (i < array.length) {\n            if (array(i) != i) return i\n            i += 1\n        }\n        i",
    "        var i = 0\n        while (i < array.length - 1) {\n            if (array(i + 1) - array(i) > 1) return array(i) + 1\n            i += 1\n        }\n        return -1"
  ]
}