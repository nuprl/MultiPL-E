{
  "name": "mbpp_6_differ_At_One_Bit_Pos",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the two numbers differ at one bit position only or not.\n    def differAtOneBitPos(a : Long, b : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(differAtOneBitPos((13l), (9l)) == (true));\n    assert(differAtOneBitPos((15l), (8l)) == (false));\n    assert(differAtOneBitPos((2l), (4l)) == (false));\n    assert(differAtOneBitPos((2l), (3l)) == (true));\n    assert(differAtOneBitPos((5l), (1l)) == (true));\n    assert(differAtOneBitPos((1l), (5l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var c = a ^ b\n        var count = 0\n        while(c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1",
    "        var diff = a ^ b\n        var count = 0\n        while (diff != 0) {\n            diff &= (diff - 1)\n            count += 1\n        }\n        return count == 1",
    "        var count = 0\n        for (i <- 0 to 63) {\n            if (((a >> i) & 1) != ((b >> i) & 1)) count += 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1",
    "        var x = a ^ b\n        var count = 0\n        while (x > 0) {\n            count += x & 1\n            x >>= 1\n        }\n        count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1",
    "        var count = 0\n        var x = a ^ b\n        while (x != 0) {\n            x &= (x - 1)\n            count += 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1",
    "        var count = 0\n        var c = a ^ b\n        while (c != 0) {\n            count += 1\n            c &= c - 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            count += c & 1\n            c >>= 1\n        }\n        count == 1",
    "        var c : Long = a ^ b\n        var count : Int = 0\n        while (c != 0) {\n            c = c & (c - 1)\n            count += 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += c & 1\n            c >>= 1\n        }\n        return count == 1",
    "        val diff = a ^ b\n        return (diff & (diff - 1)) == 0",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c = c >> 1\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c != 0) {\n            count += 1\n            c = c & (c - 1)\n        }\n        return count == 1",
    "        var c = a ^ b\n        var count = 0\n        while (c > 0) {\n            if ((c & 1) == 1) count += 1\n            c >>= 1\n        }\n        return count == 1"
  ]
}