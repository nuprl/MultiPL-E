{
  "name": "mbpp_9_find_Rotations",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the minimum number of rotations (greater than 0) required to get the same string.\n    def findRotations(str : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findRotations((\"aaaa\")) == (1l));\n    assert(findRotations((\"ab\")) == (2l));\n    assert(findRotations((\"abc\")) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) != str((i + 1) % n)) count += 1\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') {\n                count += 1\n            }\n        }\n        val result = min(n - count, count)\n        return result",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            suffixes(i) = str.substring(i) + str.substring(0, i)\n        }\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val minSuffix = sortedSuffixes(0)\n        val minSuffixIndex = str.indexOf(minSuffix)\n        minSuffixIndex",
    "        var count = 0\n        var str1 = str\n        while (str1 != str.substring(str.length - count, str.length) + str.substring(0, str.length - count)) {\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0)\n        var l = 0; var r = 0; var k = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = r = i\n                while (r < n && s(r - l) == s(r)) r += 1\n                z(i) = r - l; r -= 1\n            } else {\n                k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && s(r - l) == s(r)) r += 1\n                    z(i) = r - l; r -= 1\n                }\n            }\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            if (z(i) == n) min = min min i\n        }\n        min",
    "        val len = str.length\n        val str2 = str + str\n        val suffixes = str2.sliding(len).toList\n        val sortedSuffixes = suffixes.sortWith((a, b) => a < b)\n        val index = sortedSuffixes.indexOf(str)\n        if (index == -1) -1 else index",
    "        var rotations = 0\n        for (i <- 0 until str.length) {\n            var s = str.substring(i) + str.substring(0, i)\n            if (s < str) rotations += 1\n        }\n        rotations",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        var j = 0\n        val lps = new Array[Int](n)\n        while (i < n) {\n            if (str2(i) == str2(j)) {\n                lps(i) = j + 1\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) j = lps(j - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 1 until n) {\n            if (arr(i) < arr(i - 1)) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        suffixArray.sortWith((i, j) => str.substring(i) < str.substring(j))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = suffixArray(i - 1)\n            var k = suffixArray(i)\n            var len = 0\n            while (j < n && k < n && str(j) == str(k)) {\n                j += 1\n                k += 1\n                len += 1\n            }\n            lcp(i) = len\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (n - suffixArray(i) - lcp(i))\n        }\n        result",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        for (i <- 0 until n) {\n            if (str1.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            suffixes(i) = str.substring(i) + str.substring(0, i)\n        }\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str) return i\n        }\n        -1",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0)\n        var l = 0\n        var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = 0\n        for (i <- 1 until n) {\n            if (z(i) == n - i) ans = i\n        }\n        ans",
    "        val n = str.length\n        val suffixes = str.indices.map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.sorted.zipWithIndex.find(x => x._1 == str).get._2",
    "        val n = str.length\n        val suffixes = str.sliding(n).toList\n        val sortedSuffixes = suffixes.sortWith((a, b) => a < b)\n        val suffixIndex = sortedSuffixes.indexOf(str)\n        val rotations = suffixIndex + 1\n        rotations",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 1\n        while (i < n) {\n            var j = 0\n            while (j < n && str1(i + j) == str(j)) {\n                j += 1\n            }\n            if (j == n) return i\n            if (str1(i + j) > str(j)) {\n                count = i\n            }\n            i += 1\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var lps = new Array[Int](n)\n        while (i < n) {\n            if (str2(i) == str2(j)) {\n                j += 1\n                lps(i) = j\n                i += 1\n            } else {\n                if (j != 0) {\n                    j = lps(j - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        return lps(n - 1)",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            var j = 0\n            var k = i\n            while (j < n) {\n                arr2(j) = arr(k)\n                j += 1\n                k += 1\n                if (k == n) k = 0\n            }\n            if (arr2.mkString == str) return count\n            count += 1\n        }\n        -1",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else if (j == 0) {\n                i += 1\n            } else {\n                j = k\n            }\n            if (s(i) != s(j)) {\n                k = j\n            }\n        }\n        j",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        while (i < n && j < n) {\n            var k = 0\n            while (k < n && s(i + k) == s(j + k)) k += 1\n            if (k == n) return j\n            if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i == j) i += 1\n            } else {\n                j += k + 1\n                if (i == j) j += 1\n            }\n        }\n        if (i < n) i else j",
    "        val s = str + str\n        val n = str.length\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            var count = 0\n            for (j <- 0 until n) {\n                if (s(i + j) != str(j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var count = 0\n        var i = 1\n        var j = 0\n        var arr = Array.fill(n + 1)(0)\n        while (i < n) {\n            if (str1(i) == str1(j)) {\n                arr(i) = j + 1\n                i += 1\n                j += 1\n            }\n            else {\n                if (j != 0) {\n                    j = arr(j - 1)\n                }\n                else {\n                    arr(i) = 0\n                    i += 1\n                }\n            }\n        }\n        arr(n)",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        for (i <- 0 until n) {\n            suffixes(i) = str.substring(i) + str.substring(0, i)\n        }\n        val sortedSuffixes = suffixes.sorted\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) == str) return i\n        }\n        -1",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        val suffixesSorted = suffixes.sortWith((i1, i2) => str.substring(i1) < str.substring(i2))\n        for (i <- 0 until n) {\n            val suffix = suffixesSorted(i)\n            if (suffix == 0) return i\n        }\n        0",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j == k || j == 0 || s(i) == s(j)) {\n                i += 1\n                j += 1\n                if (s(i) != s(j)) k = j\n                else b(i) = k\n            }\n            k = b(k)\n        }\n        j",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for(i <- 0 until len) {\n            var j = 0\n            while(j < len && str(i + j) == str2(j)) j += 1\n            if(j < min) min = j\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else if (j == 0) {\n                i += 1\n            } else {\n                j = k\n            }\n            k = j\n        }\n        j",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            suffixes(i) = i\n        }\n        suffixes.sortWith((a, b) => str.substring(a) < str.substring(b))\n        for (i <- 0 until n - 1) {\n            var j = 0\n            while (str(i + j) == str(suffixes(i + 1) + j)) {\n                j += 1\n            }\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n - 1) {\n            result += n - suffixes(i + 1) - lcp(i)\n        }\n        result",
    "        def findRotations(str : String, i : Int) : Long = {\n            if (i == str.length) return 0\n            val s = str.substring(0, i) + str.substring(i + 1) + str(i)\n            if (s == str) return 0\n            else return 1 + findRotations(s, i)\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            val r = findRotations(str, i)\n            if (r < min) min = r\n        }\n        return min",
    "        val n = str.length\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str(i + k) - str(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = new SuffixArray(str2)\n        val lcp = new LCP(str2, suffixArray)\n        var min = n\n        for (i <- 1 until n) {\n            val l = lcp.lcp(i)\n            if (l < min) min = l\n        }\n        n - min",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith((s1, s2) => s1 < s2)\n        var minRotations = Long.MaxValue\n        for (i <- 0 until n) {\n            val suffix = sortedSuffixes(i)\n            val rotations = suffixes.indexOf(suffix)\n            if (rotations < minRotations) minRotations = rotations\n        }\n        minRotations",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        if (index == n - 1) 0 else n - index",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val suffixArr = Array.ofDim[Int](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr(i) = i\n        }\n        val suffixArrSorted = suffixArr.sortWith((x, y) => str.substring(x) < str.substring(y))\n        var lcp = Array.ofDim[Int](strLen)\n        for (i <- 1 until strLen) {\n            var j = 0\n            while (strArr(suffixArrSorted(i) + j) == strArr(suffixArrSorted(i - 1) + j)) {\n                j += 1\n            }\n            lcp(i) = j\n        }\n        var minRotations = strLen\n        for (i <- 0 until strLen) {\n            val rotations = suffixArrSorted(i) + strLen - suffixArrSorted(i + 1)\n            if (rotations < minRotations) minRotations = rotations\n        }\n        return minRotations",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var count = 0\n            for (j <- 0 until len) {\n                if (str2(i + j) != str(j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val suffixArr = ArrayBuffer[String]()\n        for (i <- 0 until strLen) {\n            suffixArr += str.substring(i, strLen)\n        }\n        val sortedSuffixArr = suffixArr.sortWith(_ < _)\n        val strIndex = sortedSuffixArr.indexOf(str)\n        val nextStr = sortedSuffixArr(strIndex + 1)\n        val nextStrLen = nextStr.length\n        val nextStrArr = nextStr.toCharArray\n        var i = 0\n        while (i < nextStrLen && nextStrArr(i) == strArr(i)) {\n            i += 1\n        }\n        return nextStrLen - i",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val suffixesSorted = suffixes.sorted\n        val index = suffixesSorted.indexOf(str)\n        if (index == 0) return 0\n        else return suffixesSorted(index - 1).length",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            val rotated = str.substring(i) + str.substring(0, i)\n            val count = rotated.zip(str).count(x => x._1 != x._2)\n            if (count < min) min = count\n        }\n        min",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixArraySorted = suffixArray.sortWith((x, y) => str.substring(x) < str.substring(y))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str(suffixArraySorted(i - 1) + j) == str(suffixArraySorted(i) + j)) j += 1\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) result += (n - suffixArraySorted(i) - lcp(i))\n        result",
    "        val n = str.length\n        val str2 = str + str\n        val z = Array.ofDim[Int](n)\n        z(0) = n\n        var l = 0; var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = r = i\n                while (r < n && str2(r) == str2(r - l)) r += 1\n                z(i) = r - l; r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && str2(r) == str2(r - l)) r += 1\n                    z(i) = r - l; r -= 1\n                }\n            }\n        }\n        var min = n\n        for (i <- 1 until n) {\n            if (z(i) == n) min = min min i\n        }\n        min",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        val suffixesSorted = suffixes.sortWith(str.substring(_, n) < str.substring(_, n))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str(suffixesSorted(i) + j) == str(suffixesSorted(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            val l = lcp(i)\n            val r = n - suffixesSorted(i)\n            result += min(l, r)\n        }\n        result",
    "        var rotations = 0\n        for (i <- 0 until str.length) {\n            val char = str(i)\n            val nextChar = str((i + 1) % str.length)\n            if (char == nextChar) {\n                rotations += 1\n            }\n        }\n        rotations",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var count = 0\n            for (j <- 0 until len) {\n                if (str2(i + j) != str(j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        while (i < n) {\n            j = i\n            k = 0\n            while (j < n && s(j) == s(k)) {\n                j += 1\n                k += 1\n            }\n            if (j == n) return i\n            if (k > l) {\n                l = k\n                m = i\n            }\n            i += 1\n        }\n        m",
    "        val n = str.length\n        val str1 = str + str\n        val suffixArray = new SuffixArray(str1)\n        val lcp = new LCP(str1, suffixArray)\n        var min = n\n        for (i <- 0 until n) {\n            val l = lcp.lcp(i)\n            if (l < min) min = l\n        }\n        return n - min",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var j = i\n            var k = 0\n            while (j < len + i && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == len + i) min = min min (len - k)\n        }\n        min",
    "        val len = str.length\n        val suffixes = str.tails.toList\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        val suffixesSortedIndexes = suffixesSorted.map(suffixes.indexOf(_))\n        val rotations = suffixesSortedIndexes.map(index => if (index == 0) len - 1 else len - index)\n        rotations.min",
    "        val n = str.length\n        val str2 = str + str\n        val suffixes = str2.sliding(n).toList\n        val suffixesSorted = suffixes.sortWith((s1, s2) => s1 < s2)\n        val suffixesSortedIndex = suffixesSorted.zipWithIndex\n        val suffixesSortedIndexMap = suffixesSortedIndex.toMap\n        val suffixesSortedIndexMapInv = suffixesSortedIndexMap.map(_.swap)\n        val suffixesSortedIndexMapInvList = suffixesSortedIndexMapInv.toList\n        val suffixesSortedIndexMapInvListSorted = suffixesSortedIndexMapInvList.sortWith((s1, s2) => s1._1 < s2._1)\n        val suffixesSortedIndexMapInvListSortedMap = suffixesSortedIndexMapInvListSorted.toMap\n        val suffixesSortedIndexMapInvListSortedMapList = suffixesSortedIndexMapInvListSortedMap.toList\n        val suffixesSortedIndexMapInvListSortedMapListSorted = suffixesSortedIndexMapInvListSortedMapList.sortWith((s1, s2) => s1._1 < s2._1)\n        val suffixesSortedIndexMapInvListSortedMapListSortedMap = suffixesSortedIndexMapInvListSortedMapListSorted.toMap\n        val suffixesSortedIndexMapInvListSortedMapListSortedMapList = suffixesSortedIndexMapInvListSortedMapListSortedMap.toList\n        val suffixesSortedIndexMapInvListSortedMapListSortedMapListSorted = suffixesSortedIndexMapInvListSortedMapListSortedMapList.sortWith((s1, s2) => s1._1 < s2._1)\n        val suffixesSortedIndexMapInvListSortedMapListSortedMapListSortedMap = suffixesSortedIndexMapInvListSortedMapListSortedMapListSorted.toMap\n        val suffixesSortedIndexMapInvListSortedMapListSortedMapListSortedMapList = suffixesSortedIndexMapInvListSortedMapListSortedMapListSorted",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixes = suffixArray.map(i => str.substring(i, n))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val sortedSuffixArray = sortedSuffixes.map(s => str.indexOf(s))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = 0\n            var k = sortedSuffixArray(i)\n            var l = sortedSuffixArray(i - 1)\n            while (k < n && l < n && str(k) == str(l)) {\n                j += 1\n                k += 1\n                l += 1\n            }\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) result += n - suffixArray(i) - lcp(i)\n        result",
    "        def findRotations(str : String, index : Int) : Long = {\n            if (index == str.length) return 0\n            val c = str(index)\n            val rotations = str.length - index\n            val newStr = str.substring(index) + str.substring(0, index)\n            if (newStr == str) return rotations\n            return findRotations(newStr, index + 1)\n        }\n        return findRotations(str, 1)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        while (i < n && str2(i) <= str2(i - 1)) i += 1\n        i",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i, n)\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        for (i <- 0 until n) {\n            if (suffixesSorted(i) == str) return i\n        }\n        return -1",
    "        val n = str.length\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str(i + k) - str(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        var count = 0\n        var str1 = str\n        var str2 = str\n        while(str1 != str2) {\n            str1 = str1.tail + str1.head\n            str2 = str2.last + str2.init\n            count += 1\n        }\n        count",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        return index",
    "        val n = str.length\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (str(i + k) == str(j + k)) k += 1\n            else if (str(i + k) > str(j + k)) {\n                i = j + 1\n                j = i + 1\n                k = 0\n            } else {\n                j += k + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffix = Array.fill(n)(0)\n        for (i <- 0 until n) suffix(i) = str.substring(i)\n        val suffixes = suffix.sorted\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            val diff = suffixes(i).length - suffixes(0).length\n            if (diff < min) min = diff\n        }\n        min",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sorted = suffixes.sortWith(_ < _)\n        val first = sorted.head\n        val index = str.indexOf(first)\n        if (index == 0) 0 else n - index",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0)\n        var l = 0; var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i; r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l; r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i;\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l; r -= 1\n                }\n            }\n        }\n        for (i <- 1 until n) if (z(i) == n) return i\n        -1",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val suffixesSorted = suffixes.sorted\n        var minRotations = 0\n        for (i <- 0 until n) {\n            if (suffixesSorted(i) == str.substring(i)) minRotations = i\n        }\n        minRotations",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val strArr2 = str.toCharArray\n        var rotations = 0\n        var i = 0\n        while(i < strLen) {\n            var j = 0\n            while(j < strLen) {\n                strArr2(j) = strArr(j + 1)\n                j += 1\n            }\n            strArr2(strLen - 1) = strArr(0)\n            if(strArr2.mkString == str) {\n                rotations += 1\n                return rotations\n            }\n            strArr2.copyToArray(strArr)\n            i += 1\n        }\n        rotations",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val suffixArr = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr(i) = str.substring(i)\n        }\n        val sortedSuffixArr = suffixArr.sortWith(_ < _)\n        var minRotations = Long.MaxValue\n        for (i <- 0 until strLen) {\n            val suffix = sortedSuffixArr(i)\n            val suffixLen = suffix.length\n            val suffixArr = suffix.toCharArray\n            var rotations = 0\n            for (j <- 0 until suffixLen) {\n                if (strArr(j) != suffixArr(j)) rotations += 1\n            }\n            minRotations = min(minRotations, rotations)\n        }\n        minRotations",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val suffixesSorted = suffixes.sorted\n        for (i <- 0 until n) if (suffixesSorted(i) == str) return i\n        -1",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val suffixArr = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr(i) = str.substring(i, strLen)\n        }\n        val sortedSuffixArr = suffixArr.sortWith(_ < _)\n        val lcpArr = new Array[Int](strLen)\n        for (i <- 0 until strLen - 1) {\n            var j = 0\n            while (j < strLen && sortedSuffixArr(i)(j) == sortedSuffixArr(i + 1)(j)) {\n                j += 1\n            }\n            lcpArr(i) = j\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until strLen - 1) {\n            val lcp = lcpArr(i)\n            val len = strLen - sortedSuffixArr(i).length\n            val rotations = len + lcp\n            if (rotations < min) min = rotations\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixArray2 = suffixArray.sortWith((i, j) => str2.substring(i) < str2.substring(j))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str2(i + j) == str2(suffixArray2(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        var min = n\n        for (i <- 0 until n) {\n            val len = n - suffixArray2(i)\n            val l = lcp(i)\n            if (len > l && len < min) min = len\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = new SuffixArray(str2)\n        val lcp = suffixArray.lcp\n        var min = n\n        for (i <- 0 until n) {\n            val l = lcp(i)\n            val r = lcp(i + 1)\n            val len = min(n - l, r)\n            if (len < min) min = len\n        }\n        return n - min",
    "        // Fill in the code here\n        return 0",
    "        val s = str + str\n        val l = str.length\n        var min = Long.MaxValue\n        for (i <- 0 until l) {\n            val t = s.substring(i, i + l)\n            val r = t.reverse\n            val d = t.zip(r).map(x => if (x._1 == x._2) 0 else 1).sum\n            min = min min d\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i, n)\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        for (i <- 0 until n) {\n            if (suffixesSorted(i) == str) return i\n        }\n        return -1",
    "        val s = str + str\n        val n = str.length\n        val suffixArray = SuffixArray.buildSuffixArray(s)\n        val lcp = SuffixArray.buildLCP(s, suffixArray)\n        val min = lcp.min\n        if (min == n) n else min",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) len = lps(len - 1)\n                else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        val res = lps(n - 1)\n        if (res == 0) n else n - res",
    "        var rotations = 0\n        for (i <- 1 until str.length) {\n            if (str.charAt(i) < str.charAt(i - 1)) {\n                rotations = i\n                break\n            }\n        }\n        return rotations",
    "        val n = str.length\n        val s = str + str\n        val z = Array.ofDim[Int](2 * n)\n        var l = 0\n        var r = 0\n        for (i <- 1 until 2 * n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < 2 * n && s(r - l) == s(r)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < 2 * n && s(r - l) == s(r)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = n\n        for (i <- 1 until n) {\n            if (z(i) == n) ans = min(ans, i)\n        }\n        ans",
    "        var rotations = 0\n        for (i <- 1 until str.length) {\n            if (str.substring(0, i) == str.substring(str.length - i, str.length)) rotations += 1\n        }\n        rotations",
    "        def findRotations(str : String, i : Int) : Long = {\n            if (i == str.length) return 0\n            val str1 = str.substring(i, str.length) + str.substring(0, i)\n            if (str1 == str) return i\n            findRotations(str, i + 1)\n        }\n        findRotations(str, 1)",
    "        val n = str.length\n        val str2 = str + str\n        val z = new Array[Long](2 * n)\n        var l = 0\n        var r = 0\n        for (i <- 1 until 2 * n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < 2 * n && str2(r - l) == str2(r)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < 2 * n && str2(r - l) == str2(r)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            if (z(i) == n) min = min min (n - i)\n        }\n        min",
    "        val len = str.length\n        val suffixes = Array.fill(len)(0)\n        for (i <- 0 until len) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        var minRotations = 0\n        for (i <- 0 until len) {\n            if (sortedSuffixes(i) == str.substring(i)) {\n                minRotations = i\n                break\n            }\n        }\n        minRotations",
    "        val n = str.length\n        val str2 = str + str\n        val lps = Array.fill(n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str2(i) == str2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        var count = 0\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) != str.substring(i)) count += 1\n        }\n        count",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) != str(0)) count += 1\n        }\n        return count",
    "        val len = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < len && j < len && k < len) {\n            val t = s(i + k)\n            if (t == s(j + k)) {\n                k += 1\n            } else if (t > s(j + k)) {\n                i = i + k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j = j + k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val z = new Array[Int](n)\n        var l = 0\n        var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < n && str2(r) == str2(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && str2(r) == str2(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = n\n        for (i <- 1 until n) {\n            if (z(i) == n) ans = min(ans, i)\n        }\n        ans",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var s = str.substring(i) + str.substring(0, i)\n            if (s < min) min = s\n        }\n        return min",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        while (i < n && s(i) <= s(i - 1)) i += 1\n        while (i < n && s(i) >= s(i - 1)) i += 1\n        i",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            var count = 0\n            var j = i\n            var k = 0\n            while (k < str.length) {\n                if (str(j) != str(k)) count += 1\n                j = (j + 1) % str.length\n                k += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str1 = str + str\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            var count = 0\n            for (j <- 0 until n) {\n                if (str1(i + j) != str(j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) {\n            arr2(i) = arr(i) - 'a'\n        }\n        val lps = new Array[Int](n)\n        lps(0) = 0\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (arr2(i) == arr2(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        val rotations = n - lps(n - 1)\n        rotations",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val minSuffix = sortedSuffixes.head\n        val minSuffixIndex = suffixes.indexOf(minSuffix)\n        minSuffixIndex",
    "        var rotations = 0\n        var str2 = str\n        while (str2 != str) {\n            str2 = str2.tail + str2.head\n            rotations += 1\n        }\n        rotations",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i = i + k + 1\n                else j = j + k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = str.zipWithIndex.map(x => (x._1, x._2 + 1)).sortWith((x, y) => x._1 < y._1 || (x._1 == y._1 && x._2 < y._2))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = suffixes(i - 1)._2\n            var k = suffixes(i)._2\n            while (j < n && k < n && str(j) == str(k)) {\n                lcp(i) += 1\n                j += 1\n                k += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            val x = suffixes(i)._2\n            val y = if (i == n - 1) 0 else suffixes(i + 1)._2\n            val z = lcp(i + 1)\n            result += min(x, n - y) - z\n        }\n        result",
    "        val n = str.length\n        val arr = str.toCharArray\n        var count = 0\n        for (i <- 0 until n) {\n            if (arr(i) == '1') count += 1\n        }\n        val ones = count\n        var zeros = n - ones\n        var min = ones\n        for (i <- 0 until n) {\n            if (arr(i) == '0') zeros -= 1\n            else ones -= 1\n            min = min min (zeros + ones)\n        }\n        min",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        val suffixesSorted = suffixes.sortWith((x, y) => str.substring(x) < str.substring(y))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str(suffixesSorted(i) + j) == str(suffixesSorted(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (n - suffixesSorted(i) - lcp(i))\n        }\n        result",
    "        var min = Long.MaxValue\n        for (i <- 0 until str.length) {\n            val s = str.substring(i) + str.substring(0, i)\n            if (s < min) min = s\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(2 * n)(0)\n        var l = 0\n        var r = 0\n        for (k <- 1 until 2 * n) {\n            if (k > r) {\n                l = r = k\n                while (r < 2 * n && s(r) == s(r - l)) r += 1\n                z(k) = r - l\n                r -= 1\n            } else {\n                val k1 = k - l\n                if (z(k1) < r - k + 1) z(k) = z(k1)\n                else {\n                    l = k\n                    while (r < 2 * n && s(r) == s(r - l)) r += 1\n                    z(k) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = Long.MaxValue\n        for (i <- 0 until n) {\n            if (z(i) == n) ans = min(ans, i)\n        }\n        ans",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str.charAt(i) != str.charAt(0)) count += 1\n        }\n        return count",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val suffixes = str2.sliding(n).toList.zipWithIndex\n        val sortedSuffixes = suffixes.sortBy(_._1)\n        val rotations = sortedSuffixes.map(_._2)\n        val minRotation = rotations.min\n        return minRotation",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val suffixesSorted = suffixes.sorted\n        val index = suffixesSorted.indexOf(str)\n        if (index == 0) n else index",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) arr2(i) = arr(i) - 'a'\n        val suffixes = new Array[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        val suffixes2 = new Array[Int](n)\n        for (i <- 0 until n) suffixes2(i) = arr2(i)\n        val cmp = new Comparator[Int] {\n            def compare(x : Int, y : Int) : Int = {\n                var i = 0\n                while (i < n) {\n                    if (arr2(x + i) != arr2(y + i)) return arr2(x + i) - arr2(y + i)\n                    i += 1\n                }\n                0\n            }\n        }\n        java.util.Arrays.sort(suffixes, cmp)\n        val lcp = new Array[Int](n)\n        var k = 0\n        for (i <- 0 until n) {\n            if (k > 0) k -= 1\n            if (suffixes(i) == n - 1) {\n                lcp(n - 1) = -1\n                k = 0\n            } else {\n                var j = suffixes(i + 1)\n                while (max(i + k, j + k) < n && arr2(i + k) == arr2(j + k)) k += 1\n                lcp(suffixes(i)) = k\n            }\n        }\n        var ans = n - suffixes(0)\n        for (i <- 1 until n) {\n            ans += n - suffixes(i) - lcp(suffixes(i - 1))\n        }\n        ans",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) != str(0)) count += 1\n        }\n        val rotations = min(count, n - count)\n        rotations",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        index + 1",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val strArr2 = str.toCharArray\n        var count = 0\n        for (i <- 0 until strLen) {\n            var j = 0\n            while (j < strLen) {\n                strArr2(j) = strArr((i + j) % strLen)\n                j += 1\n            }\n            if (strArr2.mkString == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val str2 = str + str\n        val z = new Array[Int](n)\n        z(0) = n\n        var l = 0\n        var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = r = i\n                while (r < n && str2(r) == str2(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && str2(r) == str2(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var min = n\n        for (i <- 0 until n) {\n            if (z(i) == n) {\n                min = i\n                break\n            }\n        }\n        min",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixes = suffixArray.map(i => str.substring(i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val rotations = suffixArray.map(i => sortedSuffixes.indexOf(str.substring(i)))\n        rotations.min",
    "        val strLen = str.length\n        val strLen1 = strLen - 1\n        val strLen2 = strLen - 2\n        val strLen3 = strLen - 3\n        val strLen4 = strLen - 4\n        val strLen5 = strLen - 5\n        val strLen6 = strLen - 6\n        val strLen7 = strLen - 7\n        val strLen8 = strLen - 8\n        val strLen9 = strLen - 9\n        val strLen10 = strLen - 10\n        val strLen11 = strLen - 11\n        val strLen12 = strLen - 12\n        val strLen13 = strLen - 13\n        val strLen14 = strLen - 14\n        val strLen15 = strLen - 15\n        val strLen16 = strLen - 16\n        val strLen17 = strLen - 17\n        val strLen18 = strLen - 18\n        val strLen19 = strLen - 19\n        val strLen20 = strLen - 20\n        val strLen21 = strLen - 21\n        val strLen22 = strLen - 22\n        val strLen23 = strLen - 23\n        val strLen24 = strLen - 24\n        val strLen25 = strLen - 25\n        val strLen26 = strLen - 26\n        val strLen27 = strLen - 27\n        val strLen28 = strLen - 28\n        val strLen29 = strLen - 29\n        val strLen30 = strLen - 30\n        val strLen31 = strLen - 31\n        val strLen32 = strLen - 32\n        val strLen33 = strLen - 33\n        val strLen34 = strLen - 34\n        val strLen35 = strLen - 35\n        val strLen36 = strLen - 36\n        val strLen37 = strLen - 37\n        val strLen38 = strLen - 38\n        val strLen39 = strLen - 39\n        val strLen40 = strLen - 40\n        val strLen41 = strLen - 41\n        val strLen42 = strLen - 42\n        val strLen43 = strLen - 43\n        val strLen44 = strLen - 44\n        val strLen45 = strLen - 45\n        val strLen46 = str",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) < str(i - 1)) {\n                count = i\n                break\n            }\n        }\n        count",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr1 = new Array[Int](n)\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) {\n            arr1(i) = arr(i) - 'a'\n        }\n        for (i <- 0 until n) {\n            arr2(i) = arr((i + 1) % n) - 'a'\n        }\n        val lcp = new LongestCommonPrefix(arr1, arr2)\n        val lcp1 = lcp.lcp\n        val lcp2 = lcp.lcp2\n        var ans = 0L\n        for (i <- 0 until n) {\n            ans += (n - max(lcp1(i), lcp2(i)))\n        }\n        ans",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        while (i < n) {\n            if (str2.substring(i, i + n) == str) return i\n            i += 1\n        }\n        return -1",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr2 = str.toCharArray\n        for (i <- 0 until n) {\n            arr2(i) = arr(n - i - 1)\n        }\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (arr(i + k) == arr2(j + k)) {\n                k += 1\n            } else if (arr(i + k) > arr2(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            } else {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        if (i < j) i else j",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        var count = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) {\n                k += 1\n            } else {\n                if (t > 0) i = i + k + 1 else j = j + k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        val min = min(i, j)\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var count = 0\n        for (i <- 1 to n) {\n            if (str2.substring(i, i + n) == str) {\n                count += 1\n            }\n        }\n        count",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        for (i <- 0 until n) {\n            if (suffixesSorted(i) == str) return i\n        }\n        -1",
    "        val n = str.length\n        val str2 = str + str\n        val z = Array.fill(2 * n)(0)\n        var l = 0\n        var r = 0\n        for (i <- 1 until 2 * n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < 2 * n && str2(r - l) == str2(r)) {\n                    r += 1\n                }\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) {\n                    z(i) = z(k)\n                } else {\n                    l = i\n                    while (r < 2 * n && str2(r - l) == str2(r)) {\n                        r += 1\n                    }\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var min = Long.MaxValue\n        for (i <- 1 until 2 * n) {\n            if (z(i) == n) {\n                min = min min (i - n).abs\n            }\n        }\n        min",
    "        val n = str.length\n        val suffixes = Array.fill(n)(0)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        var rotations = 0\n        for (i <- 0 until n) {\n            if (sortedSuffixes(i) != suffixes(i)) rotations += 1\n        }\n        rotations",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var t = Array.fill(n + 1)(0)\n        while (i < n) {\n            if (s(i) == s(j)) {\n                t(i) = j + 1\n                i += 1\n                j += 1\n            } else if (j > 0) {\n                j = t(j - 1)\n            } else {\n                t(i) = 0\n                i += 1\n            }\n        }\n        t(n)",
    "        var rotations = 0\n        for (i <- 1 until str.length) {\n            if (str(i) == str(0)) {\n                var isRotated = true\n                for (j <- 0 until str.length) {\n                    if (str(j) != str((i + j) % str.length)) {\n                        isRotated = false\n                        break\n                    }\n                }\n                if (isRotated) {\n                    rotations += 1\n                }\n            }\n        }\n        rotations",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        val suffixesSorted = suffixes.sortWith((a, b) => str.substring(a) < str.substring(b))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 0 until n - 1) {\n            var j = 0\n            while (str(suffixesSorted(i) + j) == str(suffixesSorted(i + 1) + j)) j += 1\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) result += (n - suffixesSorted(i) - lcp(i))\n        result",
    "        var rotations = 0\n        for (i <- 1 until str.length) {\n            if (str.substring(0, i) == str.substring(str.length - i, str.length)) rotations += 1\n        }\n        rotations",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var j = i\n            var k = 0\n            var count = 0\n            while (k < len && str2(j) == str(k)) {\n                j += 1\n                k += 1\n                count += 1\n            }\n            if (count < min) min = count\n        }\n        min",
    "        val n = str.length\n        val suffixes = str.zipWithIndex.map(x => (x._1, x._2)).sortWith((x, y) => x._1 < y._1 || (x._1 == y._1 && x._2 < y._2))\n        val lcp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            var j = suffixes(i)._2\n            var k = suffixes(i - 1)._2\n            while (j < n && k < n && str(j) == str(k)) {\n                lcp(i) += 1\n                j += 1\n                k += 1\n            }\n        }\n        val result = lcp.zipWithIndex.map(x => (x._1, x._2)).sortWith((x, y) => x._1 > y._1 || (x._1 == y._1 && x._2 < y._2))\n        val max = result(0)._1\n        val index = result(0)._2\n        if (max == 0) 1\n        else n - suffixes(index)._2",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0)\n        var l = 0; var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var min = n\n        for (i <- 0 until n) {\n            if (z(i) == n) min = min min i\n        }\n        min",
    "        val strLength = str.length\n        val strArray = str.toCharArray\n        val strArrayLength = strArray.length\n        var count = 0\n        for (i <- 0 until strArrayLength) {\n            if (strArray(i) == '1') {\n                count += 1\n            }\n        }\n        if (count == 0) {\n            return 0\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until strArrayLength) {\n            var count = 0\n            for (j <- 0 until strArrayLength) {\n                if (strArray((i + j) % strArrayLength) == '1') {\n                    count += 1\n                }\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val suffixes = ArrayBuffer[String]()\n        for (i <- 0 until n) {\n            suffixes += str.substring(i, n)\n        }\n        val suffixesSorted = suffixes.sortWith((a, b) => a < b)\n        val suffixesSortedIndex = suffixesSorted.zipWithIndex.toMap\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            val a = suffixesSorted(i - 1)\n            val b = suffixesSorted(i)\n            val min = min(a.length, b.length)\n            var j = 0\n            while (j < min && a(j) == b(j)) j += 1\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            val suffix = suffixes(i)\n            val index = suffixesSortedIndex(suffix)\n            val lcpValue = if (index > 0) lcp(index) else 0\n            val rotations = (n - suffix.length) + (n - suffix.length - lcpValue)\n            result += rotations\n        }\n        result",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j == k || j == 0 || s(i) == s(j)) {\n                i += 1\n                j += 1\n                if (s(i) != s(j)) b(i) = j\n                else b(i) = b(j)\n            }\n            k = j\n            j = b(j)\n        }\n        b(n)",
    "        val n = str.length\n        val suffixes = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixes(i) = i\n        val suffixesSorted = suffixes.sortWith((i, j) => str.substring(i) < str.substring(j))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str(suffixesSorted(i) + j) == str(suffixesSorted(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            result += (n - suffixesSorted(i) - lcp(i))\n        }\n        result",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j == k || j == 0 || s(i) == s(j)) {\n                i += 1\n                j += 1\n                if (s(i) != s(j)) k = j\n                else b(i) = k\n            }\n            k = b(k)\n        }\n        j",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j >= k && s(i) != s(j)) {\n                if (j == k) k = i\n                j = b(j)\n            }\n            i += 1\n            j += 1\n            if (j == n) return j\n            b(i) = j\n        }\n        return -1",
    "        val n = str.length\n        val str2 = str + str\n        val suffix = Array.ofDim[Int](n)\n        for (i <- 0 until n) {\n            suffix(i) = str2.substring(i, i + n).toInt\n        }\n        val suffix2 = suffix.sorted\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            val diff = abs(suffix(i) - suffix2(i))\n            if (diff < min) min = diff\n        }\n        min",
    "        var rotations = 0\n        var str2 = str\n        for (i <- 1 to str.length) {\n            str2 = str2.tail + str2.head\n            if (str2 == str) {\n                rotations = i\n                return rotations\n            }\n        }\n        return rotations",
    "        // Fill in the code here\n        0",
    "        var rotations = 0\n        for (i <- 0 until str.length) {\n            if (str(i) == '1') {\n                rotations += 1\n            }\n        }\n        rotations",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = str2.indices.toArray.sortBy(i => str2.substring(i, min(i + n, str2.length)))\n        val lcp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str2(suffixArray(i) + j) == str2(suffixArray(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        val minRotations = suffixArray.indices.map(i => if (suffixArray(i) < n) n - suffixArray(i) else n - suffixArray(i) + lcp(i)).min\n        minRotations",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var count = 0\n            for (j <- 0 until len) {\n                if (str(j) != str2(i + j)) count += 1\n            }\n            min = min min count\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var z = Array.fill(n)(0)\n        while (i < n) {\n            while (i + j < 2 * n && s(i + j) == s(j)) j += 1\n            z(i) = j\n            if (j == 0) {\n                i += 1\n                continue\n            }\n            k = 1\n            while (i + k < 2 * n && k + z(k) < j) {\n                z(i + k) = z(k)\n                k += 1\n            }\n            i += k\n            j -= k\n        }\n        var min = n\n        for (i <- 0 until n) {\n            if (z(i) == n) min = min min i\n        }\n        min",
    "        val n = str.length\n        val suffixes = Array.ofDim[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i)\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val rotations = Array.ofDim[Long](n)\n        for (i <- 0 until n) {\n            val suffix = sortedSuffixes(i)\n            val index = str.indexOf(suffix)\n            rotations(i) = index\n        }\n        val minRotation = rotations.min\n        minRotation",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        def rotate(str : String) : String = str.tail + str.head\n        def rotateUntilSame(str : String, count : Long) : Long = {\n            if (str == rotate(str)) count\n            else rotateUntilSame(rotate(str), count + 1)\n        }\n        rotateUntilSame(str, 1)",
    "        val len = str.length\n        val arr = str.toCharArray\n        val arr2 = new Array[Int](len)\n        for (i <- 0 until len) {\n            arr2(i) = arr(i) - 'a'\n        }\n        val suffixes = new Array[Int](len)\n        for (i <- 0 until len) {\n            suffixes(i) = i\n        }\n        val cmp = new Ordering[Int] {\n            def compare(x : Int, y : Int) = {\n                var i = 0\n                while (i < len) {\n                    if (arr2(x + i) < arr2(y + i)) return -1\n                    if (arr2(x + i) > arr2(y + i)) return 1\n                    i += 1\n                }\n                0\n            }\n        }\n        scala.util.Sorting.quickSort(suffixes)(cmp)\n        val lcp = new Array[Int](len)\n        for (i <- 1 until len) {\n            var j = 0\n            while (j < len) {\n                if (arr2(suffixes(i - 1) + j) != arr2(suffixes(i) + j)) break\n                j += 1\n            }\n            lcp(i) = j\n        }\n        var result = 0L\n        for (i <- 0 until len) {\n            result += (len - suffixes(i) - lcp(i))\n        }\n        result",
    "        val n = str.length\n        val suffixes = str.indices.map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.min.length",
    "        val n = str.length\n        val str2 = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = str2(i + k) - str2(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var l = 0\n        var t = Array.ofDim[Int](n + 1)\n        t(0) = -1\n        while (i < n) {\n            while (j >= 0 && s(i) != s(j)) {\n                j = t(j)\n            }\n            i += 1\n            j += 1\n            t(i) = j\n        }\n        i = 0\n        while (i < n) {\n            while (k >= 0 && s(i) != s(k)) {\n                k = t(k)\n            }\n            i += 1\n            k += 1\n            if (k > l) {\n                l = k\n            }\n        }\n        l",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        min(count, n - count)",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        val lps = new Array[Int](n)\n        while (i < n) {\n            if (s(i) == s(j)) {\n                lps(i) = j + 1\n                i += 1\n                j += 1\n            } else {\n                if (j != 0) {\n                    j = lps(j - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j >= 0 && s(i) != s(j)) {\n                if (j == 0) {\n                    b(i) = 0\n                } else {\n                    b(i) = j\n                }\n                j = b(j)\n            }\n            i += 1\n            j += 1\n        }\n        b(n) = j\n        var result = 0L\n        for (i <- 0 until n) {\n            if (b(i) == 0) {\n                result += 1\n            } else {\n                result += 1 + (n - b(i))\n            }\n        }\n        result",
    "        val len = str.length\n        val s = str + str\n        var min = Long.MaxValue\n        for (i <- 0 until len) {\n            val t = s.substring(i, i + len)\n            val r = t.toCharArray.map(c => c - 'a').toList\n            val rr = r.reverse\n            val n = r.zip(rr).map(p => abs(p._1 - p._2)).sum\n            min = min min n\n        }\n        min",
    "        val len = str.length\n        val str2 = str + str\n        var min = len\n        for (i <- 0 until len) {\n            var j = i\n            var k = 0\n            while (j < len + i && str(k) == str2(j)) {\n                j += 1\n                k += 1\n            }\n            if (j == len + i) {\n                min = min min (len - i)\n            }\n        }\n        min",
    "        val n = str.length\n        val arr = str.toCharArray\n        val arr1 = new Array[Int](n)\n        val arr2 = new Array[Int](n)\n        for (i <- 0 until n) {\n            arr1(i) = arr(i) - 'a'\n            arr2(i) = arr(i) - 'a'\n        }\n        var count = 0\n        for (i <- 0 until n - 1) {\n            if (arr1(i) > arr1(i + 1)) {\n                count += 1\n                for (j <- 0 until n) {\n                    arr1(j) = (arr1(j) + 1) % 26\n                }\n            }\n        }\n        for (i <- 0 until n - 1) {\n            if (arr2(i) < arr2(i + 1)) {\n                count += 1\n                for (j <- 0 until n) {\n                    arr2(j) = (arr2(j) - 1 + 26) % 26\n                }\n            }\n        }\n        count",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            if (s(i + k) == s(j + k)) k += 1\n            else if (s(i + k) > s(j + k)) {\n                i += k + 1\n                if (i <= j) i = j + 1\n                k = 0\n            }\n            else if (s(i + k) < s(j + k)) {\n                j += k + 1\n                if (j <= i) j = i + 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val strArr2 = str.toCharArray\n        var rotations = 0\n        var isSame = false\n        while(!isSame) {\n            rotations += 1\n            for(i <- 0 until strLen) {\n                strArr2(i) = strArr((i + rotations) % strLen)\n            }\n            isSame = true\n            for(i <- 0 until strLen) {\n                if(strArr(i) != strArr2(i)) {\n                    isSame = false\n                    break\n                }\n            }\n        }\n        rotations",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j >= 0 && s(i) != s(j)) {\n                if (j == 0) {\n                    b(i) = 0\n                } else {\n                    b(i) = j\n                }\n                j = b(j)\n            }\n            i += 1\n            j += 1\n        }\n        b(n) = j\n        return b(n)",
    "        val n = str.length\n        val suffixes = str.indices.map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        var count = 0\n        for (i <- 0 until n) {\n            if (str(i) == '1') count += 1\n        }\n        if (count == 0) return 0\n        var result = count\n        var left = 0\n        var right = 0\n        var zeros = 0\n        while (right < n) {\n            if (str(right) == '0') zeros += 1\n            while (left < n && zeros > 1) {\n                if (str(left) == '0') zeros -= 1\n                left += 1\n            }\n            result = min(result, count + right - left)\n            right += 1\n        }\n        return result",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val sortedSuffixesStr = sortedSuffixes.mkString\n        val firstSuffix = sortedSuffixes(0)\n        val firstSuffixIndex = sortedSuffixesStr.indexOf(firstSuffix)\n        return firstSuffixIndex",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val lps = new Array[Int](n)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str(i) == str(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        if (len == 0) n else n - len",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        var b = Array.fill(n + 1)(0)\n        while (i < n) {\n            while (j >= 0 && s(i) != s(j)) {\n                if (j == 0) {\n                    b(i) = 0\n                } else {\n                    b(i) = j\n                }\n                j = b(j)\n            }\n            i += 1\n            j += 1\n        }\n        b(n) = j\n        var result = n - b(n)\n        if (result == n) result = 0\n        result",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val suffixesMap = new HashMap[String, Int]()\n        for (i <- 0 until n) suffixesMap += (sortedSuffixes(i) -> i)\n        val lcp = new Array[Int](n)\n        var h = 0\n        for (i <- 0 until n) {\n            val j = suffixesMap(suffixes(i))\n            if (j > 0) {\n                val k = sortedSuffixes(j - 1).length\n                while (str(i + h) == str(k + h)) h += 1\n                lcp(j) = h\n                if (h > 0) h -= 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) result += n - suffixes(i).length - lcp(i)\n        result",
    "        val n = str.length\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixes = suffixArray.map(i => str.substring(i))\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val rotations = sortedSuffixes.map(s => str.indexOf(s))\n        rotations.min",
    "        val n = str.length\n        var count = 0\n        for (i <- 1 until n) {\n            if (str(i) != str(i - 1)) count += 1\n        }\n        if (str(n - 1) == '-') count + 1 else count",
    "        val n = str.length\n        val str1 = str + str\n        val lps = Array.fill[Int](n)(0)\n        var len = 0\n        var i = 1\n        while (i < n) {\n            if (str1(i) == str1(len)) {\n                len += 1\n                lps(i) = len\n                i += 1\n            } else {\n                if (len != 0) {\n                    len = lps(len - 1)\n                } else {\n                    lps(i) = 0\n                    i += 1\n                }\n            }\n        }\n        lps(n - 1)",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(2 * n)(0)\n        var l = 0\n        var r = 0\n        for (i <- 1 until 2 * n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < 2 * n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < 2 * n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = Long.MaxValue\n        for (i <- 1 until n) {\n            if (z(i) == n) ans = min(ans, i.toLong)\n        }\n        ans",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else {\n                j = 0\n                k += 1\n                i = k + 1\n            }\n        }\n        j",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val suffixes = str2.sliding(n).toList\n        val sortedSuffixes = suffixes.sortWith((s1, s2) => s1 < s2)\n        val minSuffix = sortedSuffixes.head\n        val minSuffixIndex = str2.indexOf(minSuffix)\n        if (minSuffixIndex == 0) 0 else n - minSuffixIndex",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0)\n        var l = 0\n        var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            if (z(i) == n) min = min min i\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        val z = Array.fill(n)(0)\n        var l = 0\n        var r = 0\n        for (i <- 1 until n) {\n            if (i > r) {\n                l = i\n                r = i\n                while (r < n && s(r) == s(r - l)) r += 1\n                z(i) = r - l\n                r -= 1\n            } else {\n                val k = i - l\n                if (z(k) < r - i + 1) z(i) = z(k)\n                else {\n                    l = i\n                    while (r < n && s(r) == s(r - l)) r += 1\n                    z(i) = r - l\n                    r -= 1\n                }\n            }\n        }\n        var ans = n\n        for (i <- 1 until n) {\n            if (z(i) == n) ans = min(ans, i)\n        }\n        ans",
    "        val n = str.length\n        val suffixes = Array.ofDim[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i, n)\n        val suffixesSorted = suffixes.sortWith(_ < _)\n        for (i <- 0 until n) {\n            if (suffixes(i) == suffixesSorted(0)) return i\n        }\n        return -1",
    "        var min = Long.MaxValue\n        for (i <- 1 to str.length - 1) {\n            val rot = str.substring(i) + str.substring(0, i)\n            if (rot < str) min = min min rot.toLong\n        }\n        min",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val suffixArr = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr(i) = str.substring(i)\n        }\n        val suffixArrSorted = suffixArr.sortWith(_ < _)\n        for (i <- 0 until strLen) {\n            if (suffixArrSorted(i) == str) return i\n        }\n        return -1",
    "        // Fill in the code here\n        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val suffixes = (0 until n).map(i => str.substring(i, n) + str.substring(0, i))\n        suffixes.zipWithIndex.minBy(_._1)._2",
    "        val n = str.length\n        val suffixes = new Array[String](n)\n        for (i <- 0 until n) suffixes(i) = str.substring(i, n)\n        val suffixesSorted = suffixes.sorted\n        val suffixesSortedToIndex = new HashMap[String, Int]\n        for (i <- 0 until n) suffixesSortedToIndex(suffixesSorted(i)) = i\n        val lcp = new Array[Int](n)\n        var h = 0\n        for (i <- 0 until n) {\n            val j = suffixesSortedToIndex(suffixes(i))\n            if (j > 0) {\n                val k = suffixes(i - 1).length\n                while (h < k && suffixesSorted(j - 1)(h) == suffixesSorted(j)(h)) h += 1\n                lcp(j) = h\n            }\n            if (h > 0) h -= 1\n        }\n        var min = Long.MaxValue\n        for (i <- 0 until n) {\n            val j = suffixesSortedToIndex(suffixes(i))\n            val l = lcp(j)\n            val k = suffixes(i).length\n            val m = suffixesSorted(j - 1).length\n            val r = if (l == k || l == m) 0 else min(k - l, m - l)\n            if (r > 0) min = min(min, r)\n        }\n        min",
    "        val n = str.length\n        val str2 = str + str\n        var i = 1\n        while (i < n) {\n            if (str2.substring(i, i + n) == str) return i\n            i += 1\n        }\n        return 0",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = str2.indices.map(i => str2.substring(i, n + i)).sortWith(_ < _)\n        val lcp = Array.fill(n)(0)\n        for (i <- 1 until n) {\n            var j = 0\n            while (str2(i + j) == str2(suffixArray(i - 1) + j)) j += 1\n            lcp(i) = j\n        }\n        val min = lcp.min\n        if (min == 0) -1 else suffixArray(min).length",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val suffixArr = Array.ofDim[Int](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr(i) = strArr(i) - 'a'\n        }\n        val suffixTree = new SuffixTree(suffixArr)\n        val suffixTreeRoot = suffixTree.root\n        val suffixTreeNodes = suffixTree.nodes\n        val suffixTreeEdges = suffixTree.edges\n        val suffixTreeNodeCount = suffixTree.nodeCount\n        val suffixTreeEdgeCount = suffixTree.edgeCount\n        val suffixTreeNodeDepth = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeHeight = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLink = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkDepth = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkHeight = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCount = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepth = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountHeight = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepthHeight = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepthHeightCount = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepthHeightCountSum = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepthHeightCountSumDepth = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepthHeightCountSumDepthHeight = Array.ofDim[Int](suffixTreeNodeCount)\n        val suffixTreeNodeSuffixLinkCountDepthHeightCountSumDepthHeightCount = Array.ofDim",
    "        val n = str.length\n        val s = str + str\n        var i = 1\n        var j = 0\n        var k = 0\n        while (i < n) {\n            if (s(i) == s(j)) {\n                i += 1\n                j += 1\n            } else if (j == 0) {\n                i += 1\n            } else {\n                j = k\n            }\n            if (j > 0) k = j\n        }\n        j",
    "        val n = str.length\n        val s = str + str\n        var i = 0\n        var j = 1\n        var k = 0\n        while (i < n && j < n && k < n) {\n            val t = s(i + k) - s(j + k)\n            if (t == 0) k += 1\n            else {\n                if (t > 0) i += k + 1\n                else j += k + 1\n                if (i == j) j += 1\n                k = 0\n            }\n        }\n        min(i, j)",
    "        val n = str.length\n        val str2 = str + str\n        val suffixArray = Array.ofDim[Int](n)\n        for (i <- 0 until n) suffixArray(i) = i\n        val suffixArray2 = suffixArray.sortWith((a, b) => str2.substring(a, a + n) < str2.substring(b, b + n))\n        val lcp = Array.ofDim[Int](n)\n        for (i <- 0 until n - 1) {\n            var j = 0\n            while (str2(suffixArray2(i) + j) == str2(suffixArray2(i + 1) + j)) j += 1\n            lcp(i) = j\n        }\n        var min = n\n        for (i <- 0 until n - 1) {\n            val j = suffixArray2(i + 1)\n            if (j > 0 && n - j < min) min = n - j\n            if (lcp(i) < min) min = lcp(i)\n        }\n        min",
    "        val n = str.length\n        val s = str + str\n        val suffixes = s.sliding(n).toList\n        val sortedSuffixes = suffixes.sortWith(_ < _)\n        val index = sortedSuffixes.indexOf(str)\n        index",
    "        val strLen = str.length\n        val strArr = str.toCharArray\n        val strArr2 = new Array[Char](strLen)\n        for (i <- 0 until strLen) {\n            strArr2(i) = strArr(strLen - i - 1)\n        }\n        val str2 = new String(strArr2)\n        val strArr3 = str.toCharArray\n        val strArr4 = str2.toCharArray\n        val suffixArr = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr(i) = str.substring(i)\n        }\n        val suffixArr2 = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr2(i) = str2.substring(i)\n        }\n        val suffixArr3 = suffixArr.sortWith(_ < _)\n        val suffixArr4 = suffixArr2.sortWith(_ < _)\n        val suffixArr5 = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr5(i) = suffixArr3(i) + suffixArr4(i)\n        }\n        val suffixArr6 = suffixArr5.sortWith(_ < _)\n        val suffixArr7 = new Array[String](strLen)\n        for (i <- 0 until strLen) {\n            suffixArr7(i) = suffixArr6(i).substring(0, strLen)\n        }\n        var min = strLen\n        for (i <- 0 until strLen) {\n            var count = 0\n            for (j <- 0 until strLen) {\n                if (strArr3(j) != suffixArr7(i).charAt(j)) count += 1\n            }\n            if (count < min) min = count\n        }\n        min"
  ]
}