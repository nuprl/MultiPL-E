{
  "name": "mbpp_633_pair_xor_Sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the sum of xor of all pairs of numbers in the given list.\n    def pairXorSum(arr : List[Long], n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(pairXorSum((List[Long](5l.toLong, 9l.toLong, 7l.toLong, 6l.toLong)), (4l)) == (47l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong, 5l.toLong)), (3l)) == (12l));\n    assert(pairXorSum((List[Long](7l.toLong, 3l.toLong)), (2l)) == (4l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        // Write your code here\n        0",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val c = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) c(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            if (c(i) > 1) {\n                sum += (c(i) * (c(i) - 1) / 2) * i\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            for (j <- 0 until arr.length) {\n                val y = arr(j)\n                val z = x ^ y\n                if (m.contains(z)) m(z) += 1\n                else m(z) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- m.keys) {\n            val x = m(i)\n            sum += (x * (x - 1) / 2) * i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until n) {\n                if (i != j) {\n                    sum += (arr(i) ^ arr(j))\n                }\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val x = m.map(x => (n - x) % n).toSet\n        val y = m.intersect(x)\n        val z = m.diff(y)\n        val a = z.map(x => x ^ (n - x)).sum\n        val b = y.map(x => x ^ (n - x)).sum\n        a + b / 2",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0L until n) {\n            for (j <- i + 1L until n) {\n                sum += (arr(i.toInt) ^ arr(j.toInt))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) {\n            a(arr(i).toInt) += 1\n        }\n        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            sum += (a(i) * (a(i) - 1) / 2) * i\n        }\n        sum",
    "        val mod = 1000000007L\n        val xorSum = arr.map(x => x ^ n).sum\n        xorSum % mod",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val t = m.toList.sorted\n        var s = 0L\n        for (i <- 0 until t.length) {\n            val x = t(i)\n            val y = (n - x) % n\n            if (m.contains(y)) {\n                s = (s + x * y) % n\n            }\n        }\n        s",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 to n-1) {\n            for (j <- i+1 to n-1) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val p = m.map(x => (x, n - x)).filter(x => x._1 != x._2)\n        val q = p.map(x => x._1 ^ x._2).sum\n        val r = m.filter(x => x * 2 % n == 0).map(x => x ^ x).sum\n        q + r",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            val x = arr(i)\n            for (j <- 0 until n.toInt) {\n                val y = arr(j)\n                val z = x ^ y\n                if (m.contains(z)) m(z) += 1\n                else m(z) = 1\n            }\n        }\n        var ans = 0L\n        for (i <- m.keys) {\n            val v = m(i)\n            ans += i * v * (v - 1) / 2\n        }\n        ans",
    "        val m = new HashMap[Long, Long]()\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val x = arr(i) ^ arr(j)\n                if (m.contains(x)) m(x) += 1\n                else m(x) = 1\n            }\n        }\n        var sum = 0L\n        for ((k, v) <- m) {\n            sum = (sum + v * (v - 1) / 2 * k) % n\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0L until n) {\n            for (j <- i + 1L until n) {\n                sum += (arr(i.toInt) ^ arr(j.toInt))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val a = new Array[Long](m.toInt + 1)\n        for (i <- 0 until n.toInt) {\n            a(arr(i).toInt) += 1\n        }\n        var res = 0L\n        for (i <- 1 to m.toInt) {\n            res += (a(i) * (a(i) - 1) / 2) * i\n        }\n        res",
    "        val m = arr.map(x => x % n).groupBy(x => x).map(x => x._2.length)\n        val sum = m.map(x => x * (x - 1) / 2).sum\n        return sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        val m = new HashMap[Long, Long]()\n        for (i <- 0 until n.toInt) {\n            m.put(arr(i), m.getOrElse(arr(i), 0) + 1)\n        }\n        var result = 0L\n        for (i <- 0 until n.toInt) {\n            val x = arr(i)\n            for (j <- 0 until 32) {\n                val mask = 1 << j\n                val y = x ^ mask\n                result += m.getOrElse(y, 0) * mask\n            }\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val mod = 1000000007L\n        val pow2 = Array.fill(1000001)(0L)\n        pow2(0) = 1\n        for (i <- 1 to 1000000) pow2(i) = (pow2(i - 1) * 2) % mod\n        val cnt = Array.fill(1000001)(0L)\n        for (i <- 0 until n.toInt) cnt(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 to 1000000) {\n            val c = cnt(i)\n            if (c > 0) {\n                sum = (sum + (c * (c - 1) / 2) % mod * pow2(i) % mod) % mod\n            }\n        }\n        sum",
    "        val xorSum = new Array[Long](100000)\n        for (i <- 0 until n.toInt) {\n            val x = arr(i)\n            for (j <- 0 until 100000) {\n                xorSum(j) += (x ^ j)\n            }\n        }\n        var result = 0L\n        for (i <- 0 until 100000) {\n            result += xorSum(i) * xorSum(i)\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var result = 0L\n        for (i <- m.keys) {\n            val x = m(i)\n            result += x * (x - 1) / 2 * i\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        val mod = 1000000007L\n        val arr2 = arr.map(x => x % mod)\n        val arr3 = arr2.map(x => x * x)\n        val arr4 = arr3.map(x => x % mod)\n        val sum = arr4.sum\n        val sum2 = sum % mod\n        val sum3 = sum2 * n\n        val sum4 = sum3 % mod\n        val sum5 = sum4 * (n - 1)\n        val sum6 = sum5 % mod\n        val sum7 = sum6 / 2\n        val sum8 = sum7 % mod\n        return sum8",
    "        var sum : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                if (m.contains(x)) m(x) += 1\n                else m(x) = 1\n            }\n        }\n        var sum = 0L\n        for (x <- m.keys) {\n            val y = m(x)\n            sum += x * y * (y - 1) / 2\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        val r = m.foldLeft(0L)((a, b) => a + b)\n        val t = (s * (s - 1) / 2) % n\n        val u = (r * (s - 1)) % n\n        val v = (r * r) % n\n        (t * u + v) % n",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        val m = new HashMap[Long, Long]()\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                val x = arr(i) ^ arr(j)\n                m(x) = m.getOrElse(x, 0) + 1\n            }\n        }\n        var sum = 0L\n        for ((k, v) <- m) {\n            sum += k * v * (v - 1) / 2\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) a(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            if (a(i) > 1) {\n                sum += (a(i) * (a(i) - 1) / 2) * i\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        0",
    "        // Write your code here\n        0",
    "        val m = arr.map(x => (x, 1)).groupBy(_._1).mapValues(_.size)\n        val s = m.map(x => (x._1, x._2 * (x._2 - 1) / 2)).values.sum\n        val t = m.map(x => (x._1, x._2 * (n - x._2))).values.sum\n        s + t",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) a(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            if (a(i) > 0) {\n                sum += a(i) * (a(i) - 1) / 2 * i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- 0 until n.toInt) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        if (s == 1) return 0\n        val k = m.max\n        val l = m.min\n        val d = k - l\n        val d1 = n - d\n        val r = min(d, d1)\n        val r1 = max(d, d1)\n        val r2 = n - r1\n        val r3 = n - r2\n        val r4 = n - r3\n        val r5 = n - r4\n        val r6 = n - r5\n        val r7 = n - r6\n        val r8 = n - r7\n        val r9 = n - r8\n        val r10 = n - r9\n        val r11 = n - r10\n        val r12 = n - r11\n        val r13 = n - r12\n        val r14 = n - r13\n        val r15 = n - r14\n        val r16 = n - r15\n        val r17 = n - r16\n        val r18 = n - r17\n        val r19 = n - r18\n        val r20 = n - r19\n        val r21 = n - r20\n        val r22 = n - r21\n        val r23 = n - r22\n        val r24 = n - r23\n        val r25 = n - r24\n        val r26 = n - r25\n        val r27 = n - r26\n        val r28 = n - r27\n        val r29 = n - r28\n        val r30 = n - r29\n        val r31 = n - r30\n        val r32 = n - r31\n        val r33 = n - r32\n        val r34 = n - r33\n        val r35 = n - r34\n        val r36 = n - r35\n        val r37 = n - r36\n        val r38 = n - r37\n        val r39 = n - r38\n        val r40 = n - r39\n        val r41 = n - r40\n        val r42 = n - r41\n        val r43 = n - r",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        if (s == 1) {\n            return 0\n        }\n        val x = m.max\n        val y = m.min\n        val z = (x + y) % n\n        val a = m.count(_ == x)\n        val b = m.count(_ == y)\n        val c = m.count(_ == z)\n        val d = m.count(_ != x && _ != y && _ != z)\n        val e = s - a - b - c - d\n        val f = (a * (a - 1) / 2) + (b * (b - 1) / 2) + (c * (c - 1) / 2) + (d * (d - 1) / 2) + (e * (e - 1) / 2)\n        val g = (a * b) + (a * c) + (a * d) + (a * e) + (b * c) + (b * d) + (b * e) + (c * d) + (c * e) + (d * e)\n        val h = (a * b * c) + (a * b * d) + (a * b * e) + (a * c * d) + (a * c * e) + (a * d * e) + (b * c * d) + (b * c * e) + (b * d * e) + (c * d * e)\n        val i = a * b * c * d + a * b * c * e + a * b * d * e + a * c * d * e + b * c * d * e\n        val j = a * b * c * d * e\n        val k = (f * x) + (g * y) + (h * z) + (i * ((x + y) % n)) + (j * ((x + y + z) % n))\n        k % n",
    "        var result : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                result += (arr(i) ^ arr(j))\n            }\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.toSet.toList.sorted\n        val c = m.map(x => (x, m.filter(y => (x ^ y) <= n).length)).toMap\n        c.map(x => x._2 * (x._2 - 1) / 2).sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        val d = m.toList.sorted\n        val dp = Array.fill(s)(0L)\n        dp(0) = d(0)\n        for (i <- 1 until s) {\n            dp(i) = dp(i - 1) + d(i)\n        }\n        var sum = 0L\n        for (i <- 0 until s) {\n            val x = d(i)\n            val y = (n - x) % n\n            val j = d.indexOf(y)\n            if (j != -1) {\n                val z = if (j == 0) 0 else dp(j - 1)\n                sum += (dp(s - 1) - z) * x + (dp(j) - z) * y\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var sum = 0L\n        for (i <- m.keys) {\n            val x = m(i)\n            sum += (x * (x - 1) / 2) * (i ^ i)\n            for (j <- m.keys) {\n                if (i != j) sum += x * m(j) * (i ^ j)\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                if (m.contains(x)) m(x) += 1\n                else m(x) = 1\n            }\n        }\n        var sum = 0L\n        for (x <- m.keys) {\n            val y = m(x)\n            sum += x * y * (y - 1) / 2\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val count = Array.fill(100000)(0)\n        for (i <- 0 until n.toInt) {\n            count(arr(i).toInt) += 1\n        }\n        var result = 0L\n        for (i <- 0 until 100000) {\n            if (count(i) > 0) {\n                val x = count(i)\n                result += (x * (x - 1) / 2) * i\n            }\n        }\n        result",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).groupBy(x => x).map(x => x._2.size).map(x => x * (x - 1) / 2).sum\n        m * n + arr.map(x => x % n).sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val sum = arr.foldLeft(0L)((a, b) => a + b)\n        val sumOfSquares = arr.foldLeft(0L)((a, b) => a + b * b)\n        val sumOfCubes = arr.foldLeft(0L)((a, b) => a + b * b * b)\n        val sumOfQuads = arr.foldLeft(0L)((a, b) => a + b * b * b * b)\n        val sumOfFifths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b)\n        val sumOfSixths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b)\n        val sumOfSevenths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b)\n        val sumOfEighths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b * b)\n        val sumOfNinths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b * b * b)\n        val sumOfTenths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b * b * b * b)\n        val sumOfElevenths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b * b * b * b * b)\n        val sumOfTwelfths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b * b * b * b * b * b)\n        val sumOfThirteenths = arr.foldLeft(0L)((a, b) => a + b * b * b * b * b * b * b * b * b * b * b * b * b)\n        val sumOfFourteenths = arr.foldLeft",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        val r = m.foldLeft(0L)((x, y) => x + y)\n        val t = (s * (s - 1)) / 2\n        (r * t) % n",
    "        val mod = 1000000007L\n        val count = Array.fill(64)(0)\n        for (i <- 0 until n.toInt) {\n            var x = arr(i)\n            var j = 0\n            while (x > 0) {\n                count(j) += (x & 1)\n                x >>= 1\n                j += 1\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until 64) {\n            ans = (ans + (count(i) * (n - count(i)) % mod) * pow(2, i).toLong) % mod\n        }\n        ans",
    "        val m = new HashMap[Long, Long]()\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                m(x) = m.getOrElse(x, 0) + 1\n            }\n        }\n        var sum = 0L\n        for ((k, v) <- m) {\n            sum += (v * (v - 1) / 2) * k\n        }\n        sum",
    "        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) {\n            a(arr(i).toInt) += 1\n        }\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            if (a(i) > 0) {\n                sum += (a(i) * (a(i) - 1) / 2) * i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        val r = m.map(x => (x, n - x)).filter(x => x._1 != x._2).toSet\n        val t = r.size\n        val u = (s - t) * n\n        val v = r.map(x => x._1 + x._2).sum\n        u + v",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                m(x) = m.getOrElse(x, 0) + 1\n            }\n        }\n        var sum = 0L\n        for ((k, v) <- m) {\n            sum += k * v * (v - 1) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                if (m.contains(x)) m(x) += 1\n                else m(x) = 1\n            }\n        }\n        var sum = 0L\n        for ((k, v) <- m) {\n            sum += k * v * (v - 1) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        val count = new Array[Long](64)\n        for (i <- 0 until n.toInt) {\n            var x = arr(i)\n            var j = 0\n            while (x > 0) {\n                count(j) += x & 1\n                x >>= 1\n                j += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until 64) {\n            result += count(i) * (n - count(i)) * pow(2, i).toLong\n        }\n        result",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        val mod = 1000000007L\n        val counts = new Array[Long](64)\n        for (i <- 0 until n.toInt) {\n            var x = arr(i)\n            var j = 0\n            while (x > 0) {\n                if (x % 2 == 1) counts(j) += 1\n                x /= 2\n                j += 1\n            }\n        }\n        var result = 0L\n        for (i <- 0 until 64) {\n            result = (result + (counts(i) * (n - counts(i)) * pow(2, i).toLong) % mod) % mod\n        }\n        result",
    "        var sum = 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i+1 until n.toInt) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                if (m.contains(x)) m(x) += 1\n                else m(x) = 1\n            }\n        }\n        var sum = 0L\n        for (x <- m.keys) {\n            val y = m(x)\n            sum += x * y * (y - 1) / 2\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val xor = arr.foldLeft(0L)((x, y) => x ^ y)\n        n * xor",
    "        val arr2 = arr.map(x => x ^ n)\n        val arr3 = arr.zip(arr2)\n        arr3.map(x => x._1 ^ x._2).sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0L until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i.toInt) ^ arr(j.toInt))\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]()\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val x = arr(i) ^ arr(j)\n                if (m.contains(x)) m(x) += 1\n                else m(x) = 1\n            }\n        }\n        var sum = 0L\n        for ((k, v) <- m) {\n            sum += k * v * (v - 1) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val p = (m * (m + 1)) / 2\n        val q = (n * (n + 1)) / 2\n        val r = (p * (p + 1)) / 2\n        val s = (q * (q + 1)) / 2\n        val t = (r * (r + 1)) / 2\n        val u = (s * (s + 1)) / 2\n        val v = (t * (t + 1)) / 2\n        val w = (u * (u + 1)) / 2\n        val x = (v * (v + 1)) / 2\n        val y = (w * (w + 1)) / 2\n        val z = (x * (x + 1)) / 2\n        val a = (y * (y + 1)) / 2\n        val b = (z * (z + 1)) / 2\n        val c = (a * (a + 1)) / 2\n        val d = (b * (b + 1)) / 2\n        val e = (c * (c + 1)) / 2\n        val f = (d * (d + 1)) / 2\n        val g = (e * (e + 1)) / 2\n        val h = (f * (f + 1)) / 2\n        val i = (g * (g + 1)) / 2\n        val j = (h * (h + 1)) / 2\n        val k = (i * (i + 1)) / 2\n        val l = (j * (j + 1)) / 2\n        val o = (k * (k + 1)) / 2\n        val p = (l * (l + 1)) / 2\n        val q = (o * (o + 1)) / 2\n        val r = (p * (p + 1)) / 2\n        val s = (q * (q + 1)) / 2\n        val t = (r * (r + 1)) / 2\n        val u = (s * (s + 1)) / 2\n        val v = (t * (t + 1)) / 2\n        val w = (u * (u + 1)) / 2\n        val x = (v * (v + 1)) / 2\n        val y = (w * (",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        if (s == 1) {\n            return 0\n        }\n        if (s == 2) {\n            val x = m.head\n            val y = m.tail.head\n            return (x * (n - y) + y * (n - x)) % n\n        }\n        val x = m.head\n        val y = m.tail.head\n        val z = m.tail.tail.head\n        return (x * (n - y) * (n - z) + y * (n - x) * (n - z) + z * (n - x) * (n - y)) % n",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val a = new Array[Long](m.toInt + 1)\n        for (i <- 0 until n.toInt) a(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            sum += a(i) * (a(i) - 1) / 2\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            m(arr(i)) = m.getOrElse(arr(i), 0) + 1\n        }\n        var sum = 0L\n        for (i <- m.keySet) {\n            val c = m(i)\n            sum += c * (c - 1) / 2 * i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).groupBy(x => x).map(x => (x._1, x._2.size)).toList\n        m.map(x => (x._2 * (x._2 - 1) / 2) * x._1).sum % n",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i+1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var result = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                result += (arr(i) ^ arr(j))\n            }\n        }\n        result",
    "        val m = arr.map(x => x % n).groupBy(x => x).map(x => (x._1, x._2.length)).toList\n        val sum = m.map(x => (x._2 * (x._2 - 1)) / 2).sum\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 to arr.length - 1) {\n            for (j <- i + 1 to arr.length - 1) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.size\n        val p = m.foldLeft(0L)(_ + _)\n        val q = m.foldLeft(0L)(_ + _ * _)\n        val r = m.foldLeft(0L)(_ + _ * _ * _)\n        val a = s * (s - 1) / 2\n        val b = s * (s - 1) * (2 * s - 1) / 6\n        val c = s * (s - 1) * (s - 2) / 6\n        val d = s * (s - 1) * (s - 2) * (3 * s * s - 3 * s - 2) / 30\n        val e = s * (s - 1) * (s - 2) * (s - 3) / 24\n        val f = s * (s - 1) * (s - 2) * (s - 3) * (4 * s * s * s - 10 * s * s + 7 * s - 6) / 120\n        val g = s * (s - 1) * (s - 2) * (s - 3) * (s - 4) / 120\n        val h = s * (s - 1) * (s - 2) * (s - 3) * (s - 4) * (5 * s * s * s * s - 20 * s * s * s + 30 * s * s - 20 * s + 6) / 720\n        val i = s * (s - 1) * (s - 2) * (s - 3) * (s - 4) * (s - 5) / 720\n        val j = s * (s - 1) * (s - 2) * (s - 3) * (s - 4) * (s - 5) * (6 * s * s * s * s * s - 30 * s * s * s * s + 60 * s * s * s - 60 * s * s + 30 * s - 6) / 5040\n        val k = s * (s - 1) * (s - 2) * (s - 3) * (s - 4) * (s - 5) * (s - 6) / 5040\n        val l",
    "        val mod = 1000000007L\n        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            val x = arr(i)\n            for (j <- 0 until 32) {\n                val y = (1L << j)\n                if ((x & y) > 0) {\n                    if (m.contains(y)) m(y) += 1\n                    else m(y) = 1\n                }\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until 32) {\n            val y = (1L << i)\n            if (m.contains(y)) {\n                val x = m(y)\n                ans = (ans + (y * (x * (n - x) % mod)) % mod) % mod\n            }\n        }\n        ans",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        return sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var sum = 0L\n        for (i <- m.keys) {\n            val x = m(i)\n            sum += x * (n - x) * i\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).groupBy(x => x).map(x => x._2.length).map(x => (x * (x - 1)) / 2).sum\n        m * n",
    "        // Write your code here\n        val m = arr.map(x => (x, 1)).groupBy(_._1).map(x => (x._1, x._2.length)).toList\n        val s = m.map(x => x._2 * (n - x._2)).sum\n        s",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val s = m.map(x => n - x).toSet\n        val t = m.intersect(s)\n        val u = m.diff(t)\n        val v = s.diff(t)\n        val w = t.map(x => x * (x - 1) / 2).sum\n        val x = u.map(x => x * (x - 1) / 2).sum\n        val y = v.map(x => x * (x - 1) / 2).sum\n        val z = t.map(x => x * (n - x)).sum\n        val a = u.map(x => x * (n - x)).sum\n        val b = v.map(x => x * (n - x)).sum\n        val c = n * (n - 1) / 2\n        val d = n * (n - 1) * (n - 2) / 6\n        (w + x + y) * n + (z + a + b) * 2 + c * d",
    "        // Write your code here\n        val m = new HashMap[Long, Long]\n        for (i <- arr) {\n            if (m.contains(i)) m(i) += 1\n            else m(i) = 1\n        }\n        var sum = 0L\n        for (i <- arr) {\n            val x = i ^ n\n            if (m.contains(x)) sum += m(x)\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += arr(i) ^ arr(j)\n            }\n        }\n        sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until arr.length) {\n            m(arr(i)) = m.getOrElse(arr(i), 0) + 1\n        }\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            val x = arr(i)\n            val y = x ^ n\n            if (x == y) {\n                sum += m(x) * (m(x) - 1)\n            } else {\n                sum += m(x) * m.getOrElse(y, 0)\n            }\n            m(x) -= 1\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum : Long = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0L until n) {\n            for (j <- i + 1L until n) {\n                sum += (arr(i.toInt) ^ arr(j.toInt))\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i+1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.map(x => x % n).toSet\n        val sum = m.map(x => (n - x) % n).sum\n        return sum",
    "        val m = new HashMap[Long, Long]\n        for (i <- 0 until n.toInt) {\n            val x = arr(i)\n            for (j <- 0 until n.toInt) {\n                val y = arr(j)\n                val z = x ^ y\n                if (m.contains(z)) m(z) += 1\n                else m(z) = 1\n            }\n        }\n        var sum = 0L\n        for (i <- m) {\n            val c = i._2\n            sum += c * (c - 1) / 2\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) a(arr(i).toInt) += 1\n        var res = 0L\n        for (i <- 0 to m.toInt) {\n            val c = a(i)\n            res += c * (c - 1) / 2\n        }\n        res",
    "        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) a(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            if (a(i) > 1) {\n                sum += (a(i) * (a(i) - 1) / 2) * i\n            }\n        }\n        sum",
    "        // Write your code here\n        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        return sum",
    "        var sum = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        // Write your code here\n        val m = arr.max\n        val a = Array.fill(m.toInt + 1)(0)\n        for (i <- arr) a(i.toInt) += 1\n        var sum = 0L\n        for (i <- 0 to m.toInt) {\n            if (a(i) != 0) {\n                sum += (a(i) * (a(i) - 1) / 2) * i\n            }\n        }\n        sum",
    "        val m = arr.max\n        val c = Array.fill(m.toInt + 1)(0)\n        for (i <- 0 until n.toInt) c(arr(i).toInt) += 1\n        var sum = 0L\n        for (i <- 0 until m.toInt + 1) {\n            if (c(i) > 1) {\n                sum += (c(i) * (c(i) - 1) / 2) * i\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                sum += (arr(i) ^ arr(j))\n            }\n        }\n        sum",
    "        val map = new HashMap[Long, Long]()\n        for (i <- 0 until n.toInt) {\n            for (j <- i + 1 until n.toInt) {\n                val xor = arr(i) ^ arr(j)\n                if (map.contains(xor)) map(xor) += 1\n                else map(xor) = 1\n            }\n        }\n        var sum = 0L\n        for (xor <- map.keys) {\n            val count = map(xor)\n            sum += xor * count * (count - 1) / 2\n        }\n        sum"
  ]
}