{
  "name": "mbpp_580_extract_even",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => x match {\n                case Left(y) => if (y % 2 == 0) Right(Left(y)) else Right(Right(y))\n                case Right(y) => if (y % 2 == 0) Right(Right(y)) else Left(y)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexf7_ao.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexf7_ao.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbexf7_ao.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => {\n                if (x % 2 == 0) {\n                    Left(x)\n                } else {\n                    Right(Right(x))\n                }\n            }\n            case Right(x) => {\n                x match {\n                    case Left(y) => {\n                        if (y % 2 == 0) {\n                            Right(Left(y))\n                        } else {\n                            Right(Right(y))\n                        }\n                    }\n                    case Right(y) => {\n                        if (y % 2 == 0) {\n                            Right(Right(y))\n                        } else {\n                            Right(Right(y))\n                        }\n                    }\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu20_1zrr.scala:35:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu20_1zrr.scala:36:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpu20_1zrr.scala:37:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Right(Right(x))\n            case Right(x) => Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75cdm76n.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(Right(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    (x : Either[Long, Long])\n\u001b[31m  |\u001b[0m                                        Required: Long\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75cdm76n.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75cdm76n.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp75cdm76n.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => {\n                if (x % 2 == 0) {\n                    Left(x)\n                } else {\n                    Right(Right(x))\n                }\n            }\n            case Right(Left(x)) => {\n                if (x % 2 == 0) {\n                    Right(Left(x))\n                } else {\n                    Right(Right(x))\n                }\n            }\n            case Right(Right(x)) => {\n                if (x % 2 == 0) {\n                    Right(Right(x))\n                } else {\n                    Right(Right(x))\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdqumv5i.scala:31:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdqumv5i.scala:32:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjdqumv5i.scala:33:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => x match {\n                case Left(y) => if (y % 2 == 0) Right(Left(y)) else Right(Right(y))\n                case Right(z) => if (z % 2 == 0) Right(Right(z)) else Right(Right(z))\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6dmep2ep.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6dmep2ep.scala:16:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6dmep2ep.scala:17:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvbbsat91.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Left(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu1n3pg5.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) test_tuple else Left(0)\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7srah4p.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => Right(extractEven(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:8:47 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => Right(extractEven(x))\n\u001b[31m\u001b[31m  |\u001b[0m                                               ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ezssy3t.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractE",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyy4x2bp3.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Right(x))\n            case Right(Left(x)) => if (x % 2 == 0) Right(Left(x)) else Right(Right(x))\n            case Right(Right(x)) => if (x % 2 == 0) Right(Right(x)) else Right(Right(x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1665510325,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_w5w9q7.scala:15:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m6l\u001b[0m)), \u001b[31m8l\u001b[0m, \u001b[31m10l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove uneven elements in the nested mixed tuple.\n    def extractEven(test_tuple : Either[Long, Either[Long, Long]]) : Either[Long, Either[Long, Long]] = {\n        test_tuple match {\n            case Left(x) => if (x % 2 == 0) Left(x) else Right(Left(x))\n            case Right(x) => extractEven(x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(extractEven((4l, 5l, (7l, 6l, (2l, 4l)), 6l, 8l)).equals((4l, (6l, (2l, 4l)), 6l, 8l)));\n    assert(extractEven((5l, 6l, (8l, 7l, (4l, 8l)), 7l, 9l)).equals((6l, (8l, (4l, 8l)))));\n    assert(extractEven((5l, 6l, (9l, 8l, (4l, 6l)), 8l, 10l)).equals((6l, (8l, (4l, 6l)), 8l, 10l)));\n    }\n\n}\n",
      "timestamp": 1666123724,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:8:41 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m Right(x) => extractEven(x)\n\u001b[31m\u001b[31m  |\u001b[0m                                         ^\u001b[0m\n\u001b[31m  |\u001b[0m                                Found:    \u001b[1m\u001b[31m(\u001b[0m\u001b[1m\u001b[31mx\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m Either[Long, Long]\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m  |\u001b[0m                                Required: \u001b[1m\u001b[32mEither\u001b[0m\u001b[1m\u001b[32m[\u001b[0m\u001b[1m\u001b[32mLong\u001b[0m\u001b[1m\u001b[32m,\u001b[0m Either[Long, Long]\u001b[1m\u001b[32m]\u001b[0m\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(extractEven((\u001b[31m4l\u001b[0m, \u001b[31m5l\u001b[0m, (\u001b[31m7l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)).equals((\u001b[31m4l\u001b[0m, (\u001b[31m6l\u001b[0m, (\u001b[31m2l\u001b[0m, \u001b[31m4l\u001b[0m)), \u001b[31m6l\u001b[0m, \u001b[31m8l\u001b[0m)));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:13:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b[0m, \u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, \u001b[31m7l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)), \u001b[31m7l\u001b[0m, \u001b[31m9l\u001b[0m)).equals((\u001b[31m6l\u001b[0m, (\u001b[31m8l\u001b[0m, (\u001b[31m4l\u001b[0m, \u001b[31m8l\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m          Found:    (Long, Long, (Long, Long, (Long, Long)), Long, Long)\n\u001b[31m   |\u001b[0m          Required: Either[Long, Either[Long, Long]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7i06qb41.scala:14:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(extractEven((\u001b[31m5l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}