{
  "name": "mbpp_265_list_split",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.asInstanceOf[List[Any]].length) {\n            var temp = List[Any]()\n            while (j < step && i < S.asInstanceOf[List[Any]].length) {\n                temp = temp :+ S.asInstanceOf[List[Any]](i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var L = List[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var M = List[Any]()\n        var N = List[Any]()\n        var O = List[Any]()\n        var P = List[Any]()\n        var Q = List[Any]()\n        var R = List[Any]()\n        var S = List[Any]()\n        var T = List[Any]()\n        var U = List[Any]()\n        var V = List[Any]()\n        var W = List[Any]()\n        var X = List[Any]()\n        var Y = List[Any]()\n        var Z = List[Any]()\n        var a = List[Any]()\n        var b = List[Any]()\n        var c = List[Any]()\n        var d = List[Any]()\n        var e = List[Any]()\n        var f = List[Any]()\n        var g = List[Any]()\n        var h = List[Any]()\n        var i = List[Any]()\n        var j = List[Any]()\n        var k = List[Any]()\n        var l = List[Any]()\n        var m = List[Any]()\n        var n = List[Any]()\n        var o = List[Any]()\n        var p = List[Any]()\n        var q = List[Any]()\n        var r = List[Any]()\n        var s = List[Any]()\n        var t = List[Any]()\n        var u = List[Any]()\n        var v = List[Any]()\n        var w = List[Any]()\n        var x = List[Any]()\n        var y = List[Any]()\n        var z = List[Any]()\n        var A = List[Any]()\n        var B = List[Any]()\n        var C = List[Any]()\n        var D = List[Any]()\n        var E = List[Any]()\n        var F = List[Any]()\n        var G = List[Any]()\n        var H = List[Any]()\n        var I\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps_igp05l.scala:59:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m59 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps_igp05l.scala:32:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mi\u001b[0m = List[\u001b[35mAny\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mi is already defined as \u001b[33mvariable\u001b[0m \u001b[35mi\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps_igp05l.scala:33:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mj\u001b[0m = List[\u001b[35mAny\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mj is already defined as \u001b[33mvariable\u001b[0m \u001b[35mj\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E161] Naming Error: /tmp/tmps_igp05l.scala:34:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mk\u001b[0m = List[\u001b[35mAny\u001b[0m]()\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mk is already defined as \u001b[33mvariable\u001b[0m \u001b[35mk\u001b[0m\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mNote that overloaded methods must all be defined in the same group of toplevel definitions\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps_igp05l.scala:61:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m61 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m    ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var list = List[Any]()\n        var sublist = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                list = list :+ sublist\n                sublist = List[Any]()\n            }\n            sublist = sublist :+ x\n            i += 1\n        }\n        list = list :+ sublist\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsycrfaj6.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsycrfaj6.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsycrfaj6.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) throw new Exception(\"Step cannot be zero\")\n        else if (step < 0) throw new Exception(\"Step cannot be negative\")\n        else if (S.isInstanceOf[List[Any]]) {\n            val L = S.asInstanceOf[List[Any]]\n            val result = new ListBuffer[Any]\n            var i = 0\n            while (i < L.length) {\n                val sublist = new ListBuffer[Any]\n                var j = 0\n                while (j < step && i < L.length) {\n                    sublist += L(i)\n                    i += 1\n                    j += 1\n                }\n                result += sublist.toList\n            }\n            result.toList\n        }\n        else if (S.isInstanceOf[Array[Any]]) {\n            val L = S.asInstanceOf[Array[Any]]\n            val result = new ListBuffer[Any]\n            var i = 0\n            while (i < L.length) {\n                val sublist = new ListBuffer[Any]\n                var j = 0\n                while (j < step && i < L.length) {\n                    sublist += L(i)\n                    i += 1\n                    j += 1\n                }\n                result += sublist.toList\n            }\n            result.toList\n        }\n        else throw new Exception(\"Invalid argument\")\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiw9_cxie.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiw9_cxie.scala:43:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiw9_cxie.scala:44:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            temp = temp :+ i\n            count += 1\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnaok06iu.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnaok06iu.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnaok06iu.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val n = list.length\n        val result = new ListBuffer[Any]\n        for (i <- 0 to n - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i to min(i + step - 1, n - 1)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt4r3hv8d.scala:11:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, n - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4r3hv8d.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt4r3hv8d.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ArrayBuffer[Any]()\n        var temp = new ArrayBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result += temp\n                temp = new ArrayBuffer[Any]()\n                i = 0\n            }\n            temp += x\n            i += 1\n        }\n        if (temp.length != 0) result += temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndz53xx1.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndz53xx1.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndz53xx1.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqqnf90zq.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqqnf90zq.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqqnf90zq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = Nil\n        var i = 0\n        var temp : List[Any] = Nil\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = Nil\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp != Nil) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwvs5ubtz.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwvs5ubtz.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwvs5ubtz.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509817,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbevkv0g1.scala:10:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbevkv0g1.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var i = 0\n        var j = 0\n        var temp : List[Any] = List()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7rq19vpz.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7rq19vpz.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7rq19vpz.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbng7zey3.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbng7zey3.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbng7zey3.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case Nil => Nil\n            case x :: xs => {\n                if (step == 1) {\n                    List(List(x))\n                } else {\n                    val (first, second) = S.asInstanceOf[List[Any]].splitAt(step.toInt)\n                    List(first) ::: listSplit(second, step)\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp8e_5c2w_.scala:13:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    List(first) ::: listSplit(second, step)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                value ::: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8e_5c2w_.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp8e_5c2w_.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explana",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 to length - 1 by step.toInt) {\n            result += list.slice(i, min(i + step, length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptl1s8kh6.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptl1s8kh6.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptl1s8kh6.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0 to S.length - 1 by step.toInt) {\n            result = result :+ S.slice(i, i + step.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var count : Long = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count < step) {\n                temp = temp :+ i\n                count += 1\n            } else {\n                result = result :+ temp\n                temp = List()\n                temp = temp :+ i\n                count = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzeqixvs8.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzeqixvs8.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzeqixvs8.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val result = new ArrayBuffer[Any]()\n        val list = S.asInstanceOf[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122421,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp26h8cul3.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp26h8cul3.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26h8cul3.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp26h8cul3.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrn8bnns.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnrn8bnns.scala:16:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrn8bnns.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrn8bnns.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var current : List[Any] = List()\n        var counter : Long = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (counter == step) {\n                result = result :+ current\n                current = List()\n                counter = 0\n            }\n            current = current :+ i\n            counter += 1\n        }\n        if (current.length > 0) result = result :+ current\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb48b2qb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb48b2qb.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsb48b2qb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509817,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbevkv0g1.scala:10:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbevkv0g1.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        val length = list.length\n        var i = 0\n        while (i < length) {\n            var j = i\n            var temp = ListBuffer[Any]()\n            while (j < length && j < i + step) {\n                temp += list(j)\n                j += 1\n            }\n            result += temp.toList\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzmppadp5.scala:18:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzmppadp5.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzmppadp5.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Err",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until S.asInstanceOf[List[Any]].length) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp794ryyt4.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp794ryyt4.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp794ryyt4.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp31s78v4e.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp31s78v4e.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp31s78v4e.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            temp = temp :+ i\n            count += 1\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (current.length > 0) result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ x\n            i += 1\n        }\n        if (current.length > 0) result = result :+ current\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbj10276.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbj10276.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbj10276.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var i : Long = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrw_5wt9.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrw_5wt9.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsrw_5wt9.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            val sublist = list.slice(i, min(i + step, list.length))\n            result += sublist\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgic0bj4s.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgic0bj4s.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgic0bj4s.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgic0bj4s.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var i : Long = 0\n        var temp : List[Any] = List()\n        for (i <- 0 to S.length - 1) {\n            temp = temp :+ S(i)\n            if ((i + 1) % step == 0) {\n                result = result :+ temp\n                temp = List()\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmptyi517xh.scala:9:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmptyi517xh.scala:10:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptyi517xh.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptyi517xh.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val list = S.asInstanceOf[List[Any]]\n            if (list.length < step) {\n                List(list)\n            } else {\n                val (head, tail) = list.splitAt(step.toInt)\n                List(head) ++ listSplit(tail, step)\n            }\n        } else {\n            List(S)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_20r2b7a.scala:12:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                List(head) ++ listSplit(tail, step)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Any\n\u001b[31m   |\u001b[0m                              Required: IterableOnce[List[Any]]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_20r2b7a.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_20r2b7a.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqtfu6i6.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqtfu6i6.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqtfu6i6.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqtfu6i6.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            if (j == 0) {\n                result += ListBuffer[Any]()\n            }\n            result(result.length - 1) = result(result.length - 1).asInstanceOf[ListBuffer[Any]] += list(i)\n            i += 1\n            j += 1\n            if (j == step) {\n                j = 0\n            }\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvsihwd8x.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvsihwd8x.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvsihwd8x.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4frldxk.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4frldxk.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4frldxk.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[List[Any]]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8v6g1qb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8v6g1qb.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy8v6g1qb.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.length) {\n            temp = temp :+ S(i)\n            if (j == step - 1) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            } else {\n                j += 1\n            }\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp3tny0et0.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp3tny0et0.scala:11:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tny0et0.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3tny0et0.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val n = step\n        val result = new ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            val sublist = list.slice(i, i + n.toInt)\n            result += sublist\n            i += n.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmuirztk0.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmuirztk0.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmuirztk0.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwc0adyia.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val N = L.length\n        val M = N / step\n        val R = new Array[List[Any]](M.toInt)\n        for (i <- 0 until M.toInt) {\n            R(i) = L.slice(i * step.toInt, (i + 1) * step.toInt)\n        }\n        R.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz2rxgxe8.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = list.slice(i, min(i + step, list.length))\n            result += sublist\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbnx7iimv.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    Long\n\u001b[31m  |\u001b[0m                                            Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnx7iimv.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbnx7iimv.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        for (i <- 0 to S.length - 1) {\n            temp = temp :+ S(i)\n            j += 1\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp43cliqe0.scala:10:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp43cliqe0.scala:11:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp43cliqe0.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp43cliqe0.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m),",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var temp = new ListBuffer[Any]\n        for (i <- 0 until list.length) {\n            temp += list(i)\n            if ((i + 1) % step == 0) {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n            }\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq28tb8e2.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq28tb8e2.scala:20:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq28tb8e2.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftdhetsu.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftdhetsu.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpftdhetsu.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka167t5.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka167t5.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka167t5.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) return List()\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe8xczcpa.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe8xczcpa.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe8xczcpa.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ e\n            i += 1\n        }\n        result = result :+ current\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe0g3szis.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe0g3szis.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe0g3szis.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka167t5.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka167t5.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplka167t5.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzqb54kmj.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzqb54kmj.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqb54kmj.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqb54kmj.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0 to S.length - 1 by step.toInt) {\n            result = result :+ S.slice(i, i + step.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        for (i <- 0 until m) {\n            result += l.slice(i * step, (i + 1) * step)\n        }\n        if (r != 0) result += l.slice(m * step, n)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_ktbs8f.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_ktbs8f.scala:12:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_ktbs8f.scala:12:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv_ktbs8f.scala:14:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        \u001b[33mif\u001b[0m (r != \u001b[31m0\u001b[0m) result += l.slice(m * step, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_ktbs8f.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        for (i <- 0 until m) {\n            val sub = new ArrayBuffer[Any]\n            for (j <- 0 until step) {\n                sub += l(i * step + j)\n            }\n            result += sub.toList\n        }\n        if (r > 0) {\n            val sub = new ArrayBuffer[Any]\n            for (j <- 0 until r) {\n                sub += l(m * step + j)\n            }\n            result += sub.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp272hfulk.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp272hfulk.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp272hfulk.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                sub += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp272hfulk.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp272hfulk.scala:21:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sub += l(m * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122425,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxvme5_v.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxvme5_v.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyxvme5_v.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[Any]\n        var i = 0\n        while (i < m) {\n            result += l.slice(i * step, (i + 1) * step)\n            i += 1\n        }\n        if (r != 0) result += l.slice(m * step, n)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxttdzzo.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxttdzzo.scala:13:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkxttdzzo.scala:16:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (r != \u001b[31m0\u001b[0m) result += l.slice(m * step, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkxttdzzo.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0 to S.length - 1 by step.toInt) {\n            result = result :+ S.slice(i, i + step.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val list = S.asInstanceOf[List[Any]]\n            val result = new ListBuffer[Any]\n            for (i <- 0 until list.length by step.toInt) {\n                result += list.slice(i, i + step.toInt)\n            }\n            result.toList\n        }\n        else if (S.isInstanceOf[String]) {\n            val string = S.asInstanceOf[String]\n            val result = new ListBuffer[Any]\n            for (i <- 0 until string.length by step.toInt) {\n                result += string.slice(i, i + step.toInt)\n            }\n            result.toList\n        }\n        else {\n            throw new IllegalArgumentException(\"Invalid input\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1idhea62.scala:27:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1idhea62.scala:27:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1idhea62.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < l.length) {\n            val sub = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < l.length) {\n                sub += l(i)\n                i += 1\n                j += 1\n            }\n            result += sub.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphunuk5au.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphunuk5au.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphunuk5au.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122427,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq31t51mr.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq31t51mr.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq31t51mr.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122424,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmiv2hlyb.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val l2 = new ListBuffer[Any]\n        for (i <- 0 until l.length by step.toInt) {\n            val l3 = new ListBuffer[Any]\n            for (j <- i until min(i + step, l.length)) {\n                l3 += l(j)\n            }\n            l2 += l3.toList\n        }\n        l2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp14z8kuap.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, l.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14z8kuap.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp14z8kuap.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122431,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv2qnzkbh.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv2qnzkbh.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv2qnzkbh.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2qnzkbh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv2qnzkbh.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val len = list.length\n        val res = new ListBuffer[Any]\n        var i = 0\n        while (i < len) {\n            val temp = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < len) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            res += temp.toList\n        }\n        res.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwpq_ju91.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwpq_ju91.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwpq_ju91.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val sublist = ListBuffer[Any]()\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            j = 0\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4muuoy6.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4muuoy6.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk4muuoy6.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnqtfu6i6.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnqtfu6i6.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqtfu6i6.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnqtfu6i6.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = temp :: result\n                temp = List[Any]()\n            }\n            temp = x :: temp\n            i += 1\n        }\n        result = temp :: result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7772_py.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7772_py.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps7772_py.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122431,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1ilrsw0.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1ilrsw0.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb1ilrsw0.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7t1_jc7r.scala:10:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7t1_jc7r.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7t1_jc7r.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7t1_jc7r.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var list = List[Any]()\n        for (i <- 0 until S.asInstanceOf[List[Any]].length by step.toInt) {\n            list = list :+ S.asInstanceOf[List[Any]].slice(i, i + step.toInt)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4_yf_3on.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4_yf_3on.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4_yf_3on.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        val length = list.length\n        for (i <- 0 until length by step.toInt) {\n            val subList = new ListBuffer[Any]\n            for (j <- i until min(i + step, length)) {\n                subList += list(j)\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkw_nd3tp.scala:11:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkw_nd3tp.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkw_nd3tp.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i to min(i + step - 1, list.length - 1)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bgetk6c.scala:10:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, list.length - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bgetk6c.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bgetk6c.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until n by step.toInt) {\n            val x = l.slice(i, min(i + step, n))\n            result += x\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6erwbfj8.scala:10:35 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mx\u001b[0m = l.slice(i, min(i + step, n))\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   Found:    Long\n\u001b[31m   |\u001b[0m                                   Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6erwbfj8.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6erwbfj8.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        // Write your code here\n        S match {\n            case S : List[Any] => {\n                var result : List[Any] = List()\n                var temp : List[Any] = List()\n                for (i <- 0 until S.length) {\n                    temp = temp :+ S(i)\n                    if ((i + 1) % step == 0) {\n                        result = result :+ temp\n                        temp = List()\n                    }\n                }\n                if (temp.length != 0) result = result :+ temp\n                result\n            }\n            case S : String => {\n                var result : List[Any] = List()\n                var temp : String = \"\"\n                for (i <- 0 until S.length) {\n                    temp = temp + S(i)\n                    if ((i + 1) % step == 0) {\n                        result = result :+ temp\n                        temp = \"\"\n                    }\n                }\n                if (temp.length != 0) result = result :+ temp\n                result\n            }\n            case _ => {\n                println(\"Invalid input\")\n                List()\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122437,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjxvxnkkw.scala:11:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjxvxnkkw.scala:12:35 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                    temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^\u001b[0m\n\u001b[31m   |\u001b[0m                                   \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpjxvxnkkw.scala:24:36 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpjxvxnkkw.scala:25:34 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                    temp = temp + S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjxvxnkkw.scala:41:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m41 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        var j = 0\n        var temp = ListBuffer[Any]()\n        while (i < list.length) {\n            if (j == step) {\n                result += temp.toList\n                temp = ListBuffer[Any]()\n                j = 0\n            }\n            temp += list(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxxnjax65.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxxnjax65.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxxnjax65.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val subList = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                subList += list(i)\n                i += 1\n                j += 1\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122435,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz98d_a_p.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz98d_a_p.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz98d_a_p.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122434,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsk3jrqdc.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122435,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeof6sabz.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeof6sabz.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeof6sabz.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            var buffer = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                buffer += list(i)\n                i += 1\n                j += 1\n            }\n            result += buffer.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122435,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpznl_sjc1.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpznl_sjc1.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpznl_sjc1.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4frldxk.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4frldxk.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu4frldxk.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        for (i <- 0 to S.length - 1) {\n            if (i % step == 0) {\n                result += new ListBuffer[Any]\n                j += 1\n            }\n            result(j - 1) += S(i)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122438,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt0rpxvj3.scala:9:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt0rpxvj3.scala:14:26 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result(j - \u001b[31m1\u001b[0m) += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Any - did you mean Any.!=?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpt0rpxvj3.scala:14:29 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result(j - \u001b[31m1\u001b[0m) += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt0rpxvj3.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt0rpxvj3.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5s108r2.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5s108r2.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo5s108r2.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val size = list.size\n        val result = new ListBuffer[Any]()\n        for (i <- 0 to size - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]()\n            for (j <- i to i + step.toInt - 1) {\n                if (j < size) sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgsn5koq.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgsn5koq.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkgsn5koq.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        for (i <- 0 to S.length - 1 by step.toInt) {\n            result = result :+ S.slice(i, i + step.toInt)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:7:25 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to S.length - \u001b[31m1\u001b[0m by step.toInt) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp9o19yzfq.scala:8:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9o19yzfq.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = List[Any]()\n                var i = 0\n                var j = 0\n                var temp = List[Any]()\n                while (i < S.length) {\n                    if (j < step) {\n                        temp = temp :+ S(i)\n                        j += 1\n                    } else {\n                        result = result :+ temp\n                        temp = List[Any]()\n                        j = 0\n                    }\n                    i += 1\n                }\n                if (temp.length > 0) result = result :+ temp\n                result\n            }\n            case S : String => {\n                var result = List[Any]()\n                var i = 0\n                var j = 0\n                var temp = \"\"\n                while (i < S.length) {\n                    if (j < step) {\n                        temp += S(i)\n                        j += 1\n                    } else {\n                        result = result :+ temp\n                        temp = \"\"\n                        j = 0\n                    }\n                    i += 1\n                }\n                if (temp.length > 0) result = result :+ temp\n                result\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzqolj2y6.scala:12:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzqolj2y6.scala:14:39 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                        temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                    \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzqolj2y6.scala:31:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpzqolj2y6.scala:33:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                        temp += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of String - did you mean String.!=?\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpzqolj2y6.scala:33:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m                        temp += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^\u001b[0m\n\u001b[31m   |\u001b[0m                                \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzqolj2y6.scala:48:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        for (i <- 0 until m) {\n            val sub = new ArrayBuffer[Any]\n            for (j <- 0 until step) {\n                sub += l(i * step + j)\n            }\n            result += sub.toList\n        }\n        if (r != 0) {\n            val sub = new ArrayBuffer[Any]\n            for (j <- 0 until r) {\n                sub += l(m * step + j)\n            }\n            result += sub.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8c_tyke.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8c_tyke.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8c_tyke.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                sub += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8c_tyke.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr8c_tyke.scala:21:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sub += l(m * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val len = list.length\n        val result = ListBuffer[Any]()\n        var i = 0\n        while (i < len) {\n            val sublist = list.slice(i, min(i + step, len))\n            result += sublist\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122439,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph3axfplw.scala:11:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, len))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph3axfplw.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph3axfplw.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph3axfplw.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j == 0) {\n                temp = List[Any]()\n            }\n            temp = temp :+ S.asInstanceOf[List[Any]](i)\n            j += 1\n            if (j == step) {\n                result = result :+ temp\n                j = 0\n            }\n            i += 1\n        }\n        if (temp.length > 0) {\n            result = result :+ temp\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122438,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8fxd_l4.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8fxd_l4.scala:28:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj8fxd_l4.scala:29:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxufut_8w.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]\n        var curr = new ListBuffer[Any]\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            curr += i\n            count += 1\n            if (count == step) {\n                result += curr.toList\n                curr = new ListBuffer[Any]\n                count = 0\n            }\n        }\n        if (curr.length > 0) result += curr.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122437,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_kj4utq.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_kj4utq.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_kj4utq.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case Nil => Nil\n            case _ => {\n                val (a, b) = S.asInstanceOf[List[Any]].splitAt(step.toInt)\n                a :: listSplit(b, step)\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122440,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0cgbalyz.scala:10:18 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                a :: listSplit(b, step)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0cgbalyz.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0cgbalyz.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[Any]()\n        for (i <- 0 until m) {\n            val sub = new ArrayBuffer[Any]()\n            for (j <- 0 until step) {\n                sub += l(i * step + j)\n            }\n            result += sub.toList\n        }\n        if (r != 0) {\n            val sub = new ArrayBuffer[Any]()\n            for (j <- 0 until r) {\n                sub += l(m * step + j)\n            }\n            result += sub.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6y4tvtn.scala:11:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until m) {\n\u001b[31m\u001b[31m   |\u001b[0m                          ^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (m : Long)\n\u001b[31m   |\u001b[0m                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6y4tvtn.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until step) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (step : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6y4tvtn.scala:14:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m                sub += l(i * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6y4tvtn.scala:20:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m0\u001b[0m until r) {\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (r : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo6y4tvtn.scala:21:25 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m                sub += l(m * step + j)\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Found:    Long\n\u001b[31m   |\u001b[0m                         Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation avai",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, min(i + step, S.length))\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, min(i + step, S.length))\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:9:58 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, min(i + step, S.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp7jlownfb.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7jlownfb.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/t",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = new ListBuffer[Any]()\n        if (S.isInstanceOf[List[Any]]) {\n            while (i < S.asInstanceOf[List[Any]].length) {\n                temp += S.asInstanceOf[List[Any]](i)\n                i += 1\n                j += 1\n                if (j == step) {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]()\n                    j = 0\n                }\n            }\n            if (temp.length != 0) result += temp.toList\n            return result.toList\n        }\n        else if (S.isInstanceOf[String]) {\n            while (i < S.asInstanceOf[String].length) {\n                temp += S.asInstanceOf[String](i)\n                i += 1\n                j += 1\n                if (j == step) {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]()\n                    j = 0\n                }\n            }\n            if (temp.length != 0) result += temp.toList\n            return result.toList\n        }\n        else {\n            return \"Invalid input\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmkoby10a.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmkoby10a.scala:43:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmkoby10a.scala:44:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            val sublist = list.slice(i, min(i + step, list.length))\n            result += sublist\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfiin4vhb.scala:10:44 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    Long\n\u001b[31m   |\u001b[0m                                            Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfiin4vhb.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfiin4vhb.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfiin4vhb.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val listLength = list.length\n        val listSplit = new Array[List[Any]](ceil(listLength.toDouble / step).toInt)\n        for (i <- 0 until listSplit.length) {\n            listSplit(i) = list.slice(i * step.toInt, min((i + 1) * step.toInt, listLength))\n        }\n        listSplit\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122441,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2ycrk9b.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2ycrk9b.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi2ycrk9b.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            j = 0\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplrgexsw6.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplrgexsw6.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmplrgexsw6.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        def listSplitHelper(S : Any, step : Long, acc : Any) : Any = {\n            if (S == Nil) acc\n            else {\n                val (a, b) = S.asInstanceOf[(Any, Any)]\n                listSplitHelper(b, step, (a :: acc.asInstanceOf[(Any, Any)]._1) :: acc.asInstanceOf[(Any, Any)]._2)\n            }\n        }\n        listSplitHelper(S, step, (Nil, Nil))\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0_5va7ik.scala:10:80 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                listSplitHelper(b, step, (a :: acc.asInstanceOf[(\u001b[35mAny\u001b[0m, \u001b[35mAny\u001b[0m)]._1) :: acc.asInstanceOf[(\u001b[35mAny\u001b[0m, \u001b[35mAny\u001b[0m)]._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp0_5va7ik.scala:10:44 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                listSplitHelper(b, step, (a :: acc.asInstanceOf[(\u001b[35mAny\u001b[0m, \u001b[35mAny\u001b[0m)]._1) :: acc.asInstanceOf[(\u001b[35mAny\u001b[0m, \u001b[35mAny\u001b[0m)]._2)\n\u001b[31m\u001b[31m   |\u001b[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                         value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_5va7ik.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0_5va7ik.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            if (j < step) {\n                temp = temp :+ S.asInstanceOf[List[Any]](i)\n                j += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph5_0vxa1.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph5_0vxa1.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph5_0vxa1.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (temp.length > 0) result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeh6fztwd.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeh6fztwd.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpeh6fztwd.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfey_96w2.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfey_96w2.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfey_96w2.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var temp = ListBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (temp.length > 0) result += temp.toList\n                temp = ListBuffer[Any]()\n            }\n            temp += x\n            i += 1\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp84rimz66.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp84rimz66.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp84rimz66.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val result = new ListBuffer[Any]\n        val list = S.asInstanceOf[List[Any]]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgy26hw8z.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgy26hw8z.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgy26hw8z.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoy8aip5r.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            var j = 0\n            val buffer = new ListBuffer[Any]()\n            while (j < step && i < list.length) {\n                buffer += list(i)\n                i += 1\n                j += 1\n            }\n            result += buffer.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxbzx5z7q.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxbzx5z7q.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxbzx5z7q.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpovi1jt_y.scala:9:18 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (x <- S) {\n\u001b[31m\u001b[31m  |\u001b[0m                  ^\u001b[0m\n\u001b[31m  |\u001b[0m                  value foreach is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpovi1jt_y.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpovi1jt_y.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (S.isInstanceOf[List[Any]]) {\n            val list = S.asInstanceOf[List[Any]]\n            val result = new ListBuffer[Any]\n            var i = 0\n            var j = 0\n            var temp = new ListBuffer[Any]\n            while (i < list.length) {\n                if (j == step) {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    j = 0\n                }\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            if (temp.length != 0) result += temp.toList\n            result.toList\n        } else {\n            val list = S.asInstanceOf[String]\n            val result = new ListBuffer[Any]\n            var i = 0\n            var j = 0\n            var temp = new StringBuilder\n            while (i < list.length) {\n                if (j == step) {\n                    result += temp.toString\n                    temp = new StringBuilder\n                    j = 0\n                }\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            if (temp.length != 0) result += temp.toString\n            result.toList\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph905kbsx.scala:45:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph905kbsx.scala:45:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m45 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph905kbsx.scala:46:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m46 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var count : Long = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var list = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                list = list :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) list = list :+ temp\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptga_gf42.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptga_gf42.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptga_gf42.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509816,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdp2vxonh.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdp2vxonh.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var A = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                A = List(x) :: A\n            } else {\n                A = (A.head :+ x) :: A.tail\n            }\n            i += 1\n        }\n        A.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpqv9i5sgu.scala:12:28 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                A = (A.head :+ x) :: A.tail\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     value :+ is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqv9i5sgu.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpqv9i5sgu.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var k = 0\n        var l = 0\n        var m = 0\n        var n = 0\n        var o = 0\n        var p = 0\n        var q = 0\n        var r = 0\n        var s = 0\n        var t = 0\n        var u = 0\n        var v = 0\n        var w = 0\n        var x = 0\n        var y = 0\n        var z = 0\n        var aa = 0\n        var ab = 0\n        var ac = 0\n        var ad = 0\n        var ae = 0\n        var af = 0\n        var ag = 0\n        var ah = 0\n        var ai = 0\n        var aj = 0\n        var ak = 0\n        var al = 0\n        var am = 0\n        var an = 0\n        var ao = 0\n        var ap = 0\n        var aq = 0\n        var ar = 0\n        var as = 0\n        var at = 0\n        var au = 0\n        var av = 0\n        var aw = 0\n        var ax = 0\n        var ay = 0\n        var az = 0\n        var ba = 0\n        var bb = 0\n        var bc = 0\n        var bd = 0\n        var be = 0\n        var bf = 0\n        var bg = 0\n        var bh = 0\n        var bi = 0\n        var bj = 0\n        var bk = 0\n        var bl = 0\n        var bm = 0\n        var bn = 0\n        var bo = 0\n        var bp = 0\n        var bq = 0\n        var br = 0\n        var bs = 0\n        var bt = 0\n        var bu = 0\n        var bv = 0\n        var bw = 0\n        var bx = 0\n        var by = 0\n        var bz = 0\n        var ca = 0\n        var cb = 0\n        var cc = 0\n        var cd = 0\n        var ce = 0\n        var cf = 0\n        var cg = 0\n        var ch = 0\n        var ci = 0\n       \n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvjd8r0l.scala:89:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvjd8r0l.scala:89:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m89 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxvjd8r0l.scala:90:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m90 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                j += 1\n                i += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122451,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmdmzawl5.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmdmzawl5.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmdmzawl5.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmdmzawl5.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmdmzawl5.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var res = ListBuffer[Any]()\n        var i = 0\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                res += ListBuffer[Any]()\n            }\n            res(res.length - 1) += e\n            i += 1\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpuuc9rxrx.scala:12:32 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            res(res.length - \u001b[31m1\u001b[0m) += e\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Any - did you mean Any.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuuc9rxrx.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuuc9rxrx.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8f2shb6.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8f2shb6.scala:10:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8f2shb6.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu8f2shb6.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu8f2shb6.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            val buffer = new ListBuffer[Any]()\n            while (j < step && i < list.length) {\n                buffer += list(i)\n                i += 1\n                j += 1\n            }\n            j = 0\n            result += buffer.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ao12yj6.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ao12yj6.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ao12yj6.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val n = L.length\n        val m = n / step\n        val r = n % step\n        val result = new Array[List[Any]](m + 1)\n        for (i <- 0 to m) {\n            val start = i * step\n            val end = if (i == m) n else (i + 1) * step\n            result(i) = L.slice(start, end)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122454,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp729cpj4u.scala:10:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = \u001b[33mnew\u001b[0m \u001b[35mArray\u001b[0m[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]](m + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    Long\n\u001b[31m   |\u001b[0m                                          Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp729cpj4u.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to m) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (m : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp729cpj4u.scala:14:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result(i) = L.slice(start, end)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    (start : Long)\n\u001b[31m   |\u001b[0m                                Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp729cpj4u.scala:14:39 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result(i) = L.slice(start, end)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                       Found:    (end : AnyVal)\n\u001b[31m   |\u001b[0m                                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp729cpj4u.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzhbvqgp.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzhbvqgp.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzhbvqgp.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzhbvqgp.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzhbvqgp.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbzhbvqgp.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        for (i <- 0 until list.length by step.toInt) {\n            val sublist = list.slice(i, min(i + step, list.length))\n            result += sublist\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cfmb8lr.scala:9:44 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36msublist\u001b[0m = list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                            Found:    Long\n\u001b[31m  |\u001b[0m                                            Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0cfmb8lr.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0cfmb8lr.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val subList = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                subList += list(i)\n                i += 1\n                j += 1\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122435,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz98d_a_p.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz98d_a_p.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz98d_a_p.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        for (i <- 0 until S.length) {\n            if (i % step == 0 && i != 0) {\n                result = result :+ temp\n                temp = List[Any]()\n            }\n            temp = temp :+ S(i)\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122454,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy6r8qqbb.scala:8:28 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpy6r8qqbb.scala:13:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy6r8qqbb.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy6r8qqbb.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var i = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy_nx6x1l.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy_nx6x1l.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpy_nx6x1l.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_nx6x1l.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy_nx6x1l.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = current :: result\n                current = List[Any]()\n                i = 0\n            }\n            current = x :: current\n            i += 1\n        }\n        if (current != Nil) {\n            result = current.reverse :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbuoyqoc.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbuoyqoc.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbbuoyqoc.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var count : Long = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = List[List[Any]]()\n                var i = 0\n                while (i < S.length) {\n                    result = result :+ S.slice(i, i + step.toInt)\n                    i += step.toInt\n                }\n                result\n            }\n            case S : String => {\n                var result = List[String]()\n                var i = 0\n                while (i < S.length) {\n                    result = result :+ S.slice(i, i + step.toInt)\n                    i += step.toInt\n                }\n                result\n            }\n            case _ => {\n                println(\"Error: Input must be a list or a string.\")\n                null\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp_6f3u79.scala:10:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp_6f3u79.scala:11:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp_6f3u79.scala:19:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpp_6f3u79.scala:20:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpp_6f3u79.scala:32:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val len = list.length\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < len) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgsgxk3ux.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgsgxk3ux.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgsgxk3ux.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[Any]()\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4cg4njwt.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4cg4njwt.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4cg4njwt.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, min(i + step, list.length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbrlsz_uy.scala:10:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbrlsz_uy.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrlsz_uy.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbrlsz_uy.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        var count : Long = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptcygj493.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.length) {\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            temp = temp :+ S(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122419,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnrn8bnns.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpnrn8bnns.scala:16:27 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                           ^\u001b[0m\n\u001b[31m   |\u001b[0m                           \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrn8bnns.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnrn8bnns.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val listLength = list.length\n        val result = new ListBuffer[Any]()\n        for (i <- 0 to listLength - 1 by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr72xpdrc.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr72xpdrc.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr72xpdrc.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8f2shb6.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8f2shb6.scala:10:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpu8f2shb6.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu8f2shb6.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu8f2shb6.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            temp = temp :+ x\n            i += 1\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122452,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cq7a6ki.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cq7a6ki.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cq7a6ki.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) {\n            return S\n        }\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122456,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfyj44raz.scala:11:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfyj44raz.scala:12:33 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpfyj44raz.scala:13:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfyj44raz.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfyj44raz.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (e <- S.asInstanceOf[List[Any]]) {\n            if (i == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                i = 0\n            }\n            temp = temp :+ e\n            i += 1\n        }\n        if (temp.length > 0) result = result :+ temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsqh4qh1.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsqh4qh1.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsqh4qh1.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var temp = List[Any]()\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (i != 0) {\n                    result = result :+ temp\n                    temp = List[Any]()\n                }\n            }\n            temp = temp :+ x\n            i += 1\n        }\n        result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx9yvdbii.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx9yvdbii.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpx9yvdbii.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122454,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkci125ri.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkci125ri.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpkci125ri.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = new ListBuffer[Any]()\n        var list = S.asInstanceOf[List[Any]]\n        while (i < list.length) {\n            temp += list(i)\n            i += 1\n            j += 1\n            if (j == step) {\n                result += temp.toList\n                temp = new ListBuffer[Any]()\n                j = 0\n            }\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122455,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvk61pwhe.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvk61pwhe.scala:25:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvk61pwhe.scala:26:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, min(i + step, list.length))\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41jt6lfp.scala:9:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += list.slice(i, min(i + step, list.length))\n\u001b[31m\u001b[31m  |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                        Found:    Long\n\u001b[31m  |\u001b[0m                                        Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41jt6lfp.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp41jt6lfp.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        var temp = new ListBuffer[Any]\n        if (S.isInstanceOf[List[Any]]) {\n            while (i < S.asInstanceOf[List[Any]].length) {\n                if (j < step) {\n                    temp += S.asInstanceOf[List[Any]].apply(i)\n                    j += 1\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    j = 0\n                }\n                i += 1\n            }\n            result += temp.toList\n            return result.toList\n        } else if (S.isInstanceOf[String]) {\n            while (i < S.asInstanceOf[String].length) {\n                if (j < step) {\n                    temp += S.asInstanceOf[String].apply(i)\n                    j += 1\n                } else {\n                    result += temp.toList\n                    temp = new ListBuffer[Any]\n                    j = 0\n                }\n                i += 1\n            }\n            result += temp.toList\n            return result.toList\n        } else {\n            return \"Error: Input must be a list or a string\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8ioyj6j.scala:43:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8ioyj6j.scala:43:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m43 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi8ioyj6j.scala:44:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n            temp = temp :+ i\n            count += 1\n        }\n        if (temp.length > 0) {\n            result = result :+ temp\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88s0b40z.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88s0b40z.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp88s0b40z.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val l = S.asInstanceOf[List[Any]]\n        val n = l.length\n        val m = n / step\n        val r = n % step\n        val result = new ArrayBuffer[List[Any]]\n        var i = 0\n        while (i < m) {\n            result += l.slice(i * step, (i + 1) * step)\n            i += 1\n        }\n        if (r != 0) result += l.slice(m * step, n)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6uk9d9rl.scala:13:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    Long\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6uk9d9rl.scala:13:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result += l.slice(i * step, (i + \u001b[31m1\u001b[0m) * step)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6uk9d9rl.scala:16:38 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m        \u001b[33mif\u001b[0m (r != \u001b[31m0\u001b[0m) result += l.slice(m * step, n)\n\u001b[31m\u001b[31m   |\u001b[0m                                      ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      Found:    Long\n\u001b[31m   |\u001b[0m                                      Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6uk9d9rl.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m           ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result = temp :: result\n                temp = List[Any]()\n            }\n            temp = x :: temp\n            i += 1\n        }\n        result = temp :: result\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb4a9_7uo.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb4a9_7uo.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb4a9_7uo.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : ListBuffer[Any] = new ListBuffer[Any]()\n        var i : Long = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt6t7f0as.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpt6t7f0as.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6t7f0as.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt6t7f0as.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                       ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        while (i < list.length) {\n            var temp = new ListBuffer[Any]\n            while (j < step && i < list.length) {\n                temp += list(i)\n                i += 1\n                j += 1\n            }\n            result += temp.toList\n            j = 0\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs31ye0d.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs31ye0d.scala:23:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphs31ye0d.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpz3912xaz.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.length) {\n            var temp = List[Any]()\n            while (j < step && i < S.length) {\n                temp = temp :+ S(i)\n                j += 1\n                i += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122451,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmdmzawl5.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpmdmzawl5.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mwhile\u001b[0m (j < step && i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpmdmzawl5.scala:12:31 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                temp = temp :+ S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^\u001b[0m\n\u001b[31m   |\u001b[0m                               \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmdmzawl5.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmdmzawl5.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i to min(i + step - 1, list.length - 1)) sublist += list(j)\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps1_plx78.scala:10:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, list.length - \u001b[31m1\u001b[0m)) sublist += list(j)\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1_plx78.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps1_plx78.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                        ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ArrayBuffer[Any]\n        var i = 0\n        while (i < S.length) {\n            result += S.slice(i, i + step)\n            i += step\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo85la19t.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo85la19t.scala:9:24 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result += S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpo85la19t.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo85la19t.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo85la19t.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i < step) {\n                temp = temp :+ x\n                i += 1\n            } else {\n                result = result :+ temp\n                temp = List[Any]()\n                temp = temp :+ x\n                i = 1\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpps5zviko.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ArrayBuffer[Any]()\n        var temp = new ArrayBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result += temp\n                temp = new ArrayBuffer[Any]()\n            }\n            temp += x\n            i += 1\n        }\n        result += temp\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgapprhvd.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgapprhvd.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgapprhvd.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result : List[Any] = List()\n        var temp : List[Any] = List()\n        for (i <- 0 to S.asInstanceOf[List[Any]].length - 1) {\n            temp = temp :+ S.asInstanceOf[List[Any]](i)\n            if (i % step == step - 1) {\n                result = result :+ temp\n                temp = List()\n            }\n        }\n        if (temp.length > 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt7lpnjxp.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt7lpnjxp.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt7lpnjxp.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            temp = temp :+ i\n            count += 1\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.asInstanceOf[List[Any]].length) {\n            var temp = List[Any]()\n            while (j < step && i < S.asInstanceOf[List[Any]].length) {\n                temp = temp :+ S.asInstanceOf[List[Any]](i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val size = list.size\n        val listOfLists = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < size) {\n            listOfLists += list.slice(i, min(i + step, size))\n            i += step\n        }\n        listOfLists.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpimmvdfqe.scala:11:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            listOfLists += list.slice(i, min(i + step, size))\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    Long\n\u001b[31m   |\u001b[0m                                             Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpimmvdfqe.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpimmvdfqe.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpimmvdfqe.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        while (i < S.length) {\n            result = result :+ S.slice(i, i + step)\n            i += step\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122420,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:8:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:9:33 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            result = result :+ S.slice(i, i + step)\n\u001b[31m\u001b[31m  |\u001b[0m                               ^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                               value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5ubrbbco.scala:10:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ubrbbco.scala:15:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = ListBuffer[Any]()\n        var i = 0\n        var j = 0\n        var temp = ListBuffer[Any]()\n        while (i < S.length) {\n            if (j == step) {\n                result += temp.toList\n                temp = ListBuffer[Any]()\n                j = 0\n            }\n            temp += S(i)\n            i += 1\n            j += 1\n        }\n        if (temp.length > 0) result += temp.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpdq7ha7co.scala:10:21 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                   ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                   value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpdq7ha7co.scala:16:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m            temp += S(i)\n\u001b[31m\u001b[31m   |\u001b[0m                    ^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mS\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdq7ha7co.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdq7ha7co.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ x\n            i += 1\n        }\n        result = result :+ current\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpputcrn5d.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpputcrn5d.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpputcrn5d.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        S match {\n            case S : List[Any] => {\n                var result = List[Any]()\n                var i = 0\n                while (i < S.length) {\n                    result = result :+ S.slice(i, i + step.toInt)\n                    i += step.toInt\n                }\n                result\n            }\n            case S : String => {\n                var result = List[Any]()\n                var i = 0\n                while (i < S.length) {\n                    result = result :+ S.slice(i, i + step.toInt)\n                    i += step.toInt\n                }\n                result\n            }\n            case _ => throw new Exception(\"Invalid input type\")\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgdk3lx25.scala:10:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgdk3lx25.scala:11:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgdk3lx25.scala:19:29 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m                \u001b[33mwhile\u001b[0m (i < S.length) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           value length is not a member of Any\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpgdk3lx25.scala:20:41 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                    result = result :+ S.slice(i, i + step.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                      value slice is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgdk3lx25.scala:29:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]\n        var i = 0\n        var j = 0\n        var k = 0\n        var temp = new ListBuffer[Any]\n        var temp2 = new ListBuffer[Any]\n        var temp3 = new ListBuffer[Any]\n        var temp4 = new ListBuffer[Any]\n        var temp5 = new ListBuffer[Any]\n        var temp6 = new ListBuffer[Any]\n        var temp7 = new ListBuffer[Any]\n        var temp8 = new ListBuffer[Any]\n        var temp9 = new ListBuffer[Any]\n        var temp10 = new ListBuffer[Any]\n        var temp11 = new ListBuffer[Any]\n        var temp12 = new ListBuffer[Any]\n        var temp13 = new ListBuffer[Any]\n        var temp14 = new ListBuffer[Any]\n        var temp15 = new ListBuffer[Any]\n        var temp16 = new ListBuffer[Any]\n        var temp17 = new ListBuffer[Any]\n        var temp18 = new ListBuffer[Any]\n        var temp19 = new ListBuffer[Any]\n        var temp20 = new ListBuffer[Any]\n        var temp21 = new ListBuffer[Any]\n        var temp22 = new ListBuffer[Any]\n        var temp23 = new ListBuffer[Any]\n        var temp24 = new ListBuffer[Any]\n        var temp25 = new ListBuffer[Any]\n        var temp26 = new ListBuffer[Any]\n        var temp27 = new ListBuffer[Any]\n        var temp28 = new ListBuffer[Any]\n        var temp29 = new ListBuffer[Any]\n        var temp30 = new ListBuffer[Any]\n        var temp31 = new ListBuffer[Any]\n        var temp32 = new ListBuffer[Any]\n        var temp33 = new ListBuffer[Any]\n        var temp34 = new ListBuffer[Any]\n        var temp35 = new ListBuffer[Any]\n        var temp36 = new ListBuffer[Any]\n        var temp37 = new ListBuffer[Any]\n        var temp38 = new ListBuffer[Any]\n        var temp39 = new ListBuffer[Any]\n        var temp40 = new ListBuffer[Any]\n        var temp\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpgv4pm2ph.scala:51:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgv4pm2ph.scala:53:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgv4pm2ph.scala:53:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m53 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgv4pm2ph.scala:54:22 ------------------------\u001b[0m\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = new ListBuffer[Any]()\n        var current = new ListBuffer[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0 && i != 0) {\n                result += current.toList\n                current = new ListBuffer[Any]()\n            }\n            current += x\n            i += 1\n        }\n        result += current.toList\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj1r07el8.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj1r07el8.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj1r07el8.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val length = list.length\n        val result = new ArrayBuffer[List[Any]]\n        var i = 0\n        while (i < length) {\n            result += list.slice(i, min(i + step, length))\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2hzr6m8g.scala:11:40 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            result += list.slice(i, min(i + step, length))\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                        Found:    Long\n\u001b[31m   |\u001b[0m                                        Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2hzr6m8g.scala:12:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2hzr6m8g.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2hzr6m8g.scala:17:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var L = List[Any]()\n        for (i <- 0 until S.asInstanceOf[List[Any]].length by step.toInt) {\n            L = L :+ S.asInstanceOf[List[Any]].slice(i, i + step.toInt)\n        }\n        return L\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf4zod1tf.scala:13:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf4zod1tf.scala:13:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf4zod1tf.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmper_lv5yy.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var current = List[Any]()\n        var i = 0\n        for (x <- S.asInstanceOf[List[Any]]) {\n            if (i % step == 0) {\n                if (current.length > 0) result = result :+ current\n                current = List[Any]()\n            }\n            current = current :+ x\n            i += 1\n        }\n        if (current.length > 0) result = result :+ current\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbj10276.scala:21:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbj10276.scala:21:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnbj10276.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[List[Any]]\n        var i = 0\n        var j = 0\n        var temp = new ListBuffer[Any]\n        while (i < list.length) {\n            temp += list(i)\n            if (j == step - 1) {\n                result += temp.toList\n                temp = new ListBuffer[Any]\n                j = 0\n            } else {\n                j += 1\n            }\n            i += 1\n        }\n        if (temp.length > 0) {\n            result += temp.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp42ktv2ie.scala:28:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp42ktv2ie.scala:28:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp42ktv2ie.scala:29:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val L = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 until L.length by step.toInt) {\n            val subList = new ListBuffer[Any]\n            for (j <- i until min(i + step, L.length)) {\n                subList += L(j)\n            }\n            result += subList.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2clzmwvu.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, L.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2clzmwvu.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2clzmwvu.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val list2 = new ListBuffer[Any]\n        for (i <- 0 until list.length by step.toInt) {\n            val list3 = new ListBuffer[Any]\n            for (j <- i until min(i + step, list.length)) {\n                list3 += list(j)\n            }\n            list2 += list3.toList\n        }\n        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122466,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp395yp3_j.scala:10:34 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i until min(i + step, list.length)) {\n\u001b[31m\u001b[31m   |\u001b[0m                                  ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                  Found:    Long\n\u001b[31m   |\u001b[0m                                  Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp395yp3_j.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp395yp3_j.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step)\n            i += step\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509817,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbevkv0g1.scala:10:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            result += list.slice(i, i + step)\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    Long\n\u001b[31m   |\u001b[0m                                    Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpbevkv0g1.scala:11:14 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            i += step\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbevkv0g1.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var index = 0\n        var temp = List[Any]()\n        for (i <- S.asInstanceOf[List[Any]]) {\n            if (index == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                index = 0\n            }\n            temp = temp :+ i\n            index += 1\n        }\n        if (temp != List[Any]()) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp98fpr36t.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp98fpr36t.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp98fpr36t.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122466,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvohzzef.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvohzzef.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpsvohzzef.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val result = new ArrayBuffer[Any]\n        val list = S.asInstanceOf[List[Any]]\n        for (i <- 0 until list.length by step.toInt) {\n            result += list.slice(i, i + step.toInt)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122465,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7q4l5lmw.scala:14:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7q4l5lmw.scala:14:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7q4l5lmw.scala:15:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = ListBuffer[List[Any]]()\n        var i = 0\n        while (i < list.length) {\n            result += list.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:16:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:16:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmprtb0x117.scala:17:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        while (i < S.asInstanceOf[List[Any]].length) {\n            var temp = List[Any]()\n            while (j < step && i < S.asInstanceOf[List[Any]].length) {\n                temp = temp :+ S.asInstanceOf[List[Any]](i)\n                i += 1\n                j += 1\n            }\n            result = result :+ temp\n            j = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3hca9hxh.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        if (step == 0) {\n            return S\n        }\n        var L = S.asInstanceOf[List[Any]]\n        var result = List[Any]()\n        var i = 0\n        while (i < L.length) {\n            result = result :+ L.slice(i, i + step.toInt)\n            i += step.toInt\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122466,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3uajmxr6.scala:19:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3uajmxr6.scala:19:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3uajmxr6.scala:20:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        var i = 0\n        while (i < list.length) {\n            val sublist = new ListBuffer[Any]\n            var j = 0\n            while (j < step && i < list.length) {\n                sublist += list(i)\n                i += 1\n                j += 1\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1665509815,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphnea_k77.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        val list = S.asInstanceOf[List[Any]]\n        val result = new ListBuffer[Any]\n        for (i <- 0 to list.length - 1 by step.toInt) {\n            val sublist = new ListBuffer[Any]\n            for (j <- i to min(i + step - 1, list.length - 1)) {\n                sublist += list(j)\n            }\n            result += sublist.toList\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4bgetk6c.scala:10:31 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- i to min(i + step - \u001b[31m1\u001b[0m, list.length - \u001b[31m1\u001b[0m)) {\n\u001b[31m\u001b[31m   |\u001b[0m                               ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                               Found:    Long\n\u001b[31m   |\u001b[0m                               Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bgetk6c.scala:18:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4bgetk6c.scala:18:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                         ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var temp = List[Any]()\n        var count = 0\n        for (i <- S.asInstanceOf[List[Any]]) {\n            temp = temp :+ i\n            count += 1\n            if (count == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                count = 0\n            }\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122417,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:22:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxs0fx6kb.scala:23:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    def listSplit(S : Any, step : Long) : Any = {\n        var result = List[Any]()\n        var i = 0\n        var j = 0\n        var temp = List[Any]()\n        while (i < S.asInstanceOf[List[Any]].length) {\n            temp = temp :+ S.asInstanceOf[List[Any]].apply(i)\n            j += 1\n            if (j == step) {\n                result = result :+ temp\n                temp = List[Any]()\n                j = 0\n            }\n            i += 1\n        }\n        if (temp.length != 0) result = result :+ temp\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(listSplit((Any(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\")), (3l)).equals((Any(List[String](\"a\", \"d\", \"g\", \"j\", \"m\"), List[String](\"b\", \"e\", \"h\", \"k\", \"n\"), List[String](\"c\", \"f\", \"i\", \"l\")))));\n    assert(listSplit((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 13l.toLong, 14l.toLong)), (3l)).equals((Any(List[Long](1l.toLong, 4l.toLong, 7l.toLong, 10l.toLong, 13l.toLong), List[Long](2l.toLong, 5l.toLong, 8l.toLong, 11l.toLong, 14l.toLong), List[Long](3l.toLong, 6l.toLong, 9l.toLong, 12l.toLong)))));\n    assert(listSplit((Any(\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\")), (2l)).equals((Any(List[String](\"python\", \"C\", \"DBMS\"), List[String](\"java\", \"C++\", \"SQL\")))));\n    }\n\n}\n",
      "timestamp": 1666122466,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpveh4f6sy.scala:24:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpveh4f6sy.scala:24:112 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(listSplit((Any(\u001b[31m\"a\"\u001b[0m, \u001b[31m\"b\"\u001b[0m, \u001b[31m\"c\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"l\"\u001b[0m, \u001b[31m\"m\"\u001b[0m, \u001b[31m\"n\"\u001b[0m)), (\u001b[31m3l\u001b[0m)).equals((Any(List[\u001b[35mString\u001b[0m](\u001b[31m\"a\"\u001b[0m, \u001b[31m\"d\"\u001b[0m, \u001b[31m\"g\"\u001b[0m, \u001b[31m\"j\"\u001b[0m, \u001b[31m\"m\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"b\"\u001b[0m, \u001b[31m\"e\"\u001b[0m, \u001b[31m\"h\"\u001b[0m, \u001b[31m\"k\"\u001b[0m, \u001b[31m\"n\"\u001b[0m), List[\u001b[35mString\u001b[0m](\u001b[31m\"c\"\u001b[0m, \u001b[31m\"f\"\u001b[0m, \u001b[31m\"i\"\u001b[0m, \u001b[31m\"l\"\u001b[0m)))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpveh4f6sy.scala:25:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(listSplit((Any(\u001b[31m1l\u001b[0m.toLong, \u001b[31m2l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong, \u001b[31m4l\u001b[0m.toLong, \u001b[31m5l\u001b[0m.toLong, \u001b[31m6l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong, \u001b[31m8l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}