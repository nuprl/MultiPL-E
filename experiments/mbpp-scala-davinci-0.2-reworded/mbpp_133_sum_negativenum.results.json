{
  "name": "mbpp_133_sum_negativenum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- nums) {\n            if (i < 0) {\n                sum += i\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (i <- nums) {\n            if (i < 0) sum += i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (i <- nums) {\n            if (i < 0) sum += i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(_ < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        nums.filter(x => x < 0).sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum : Long = 0\n        for (num <- nums) {\n            if (num < 0) {\n                sum += num\n            }\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1666123980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    def sumNegativenum(nums : List[Long]) : Long = {\n        var sum = 0L\n        for (num <- nums) {\n            if (num < 0) sum += num\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(sumNegativenum((List[Long](2l.toLong, 4l.toLong, -6l.toLong, -9l.toLong, 11l.toLong, -12l.toLong, 14l.toLong, -5l.toLong, 17l.toLong))) == (-32l));\n    assert(sumNegativenum((List[Long](10l.toLong, 15l.toLong, -14l.toLong, 13l.toLong, -18l.toLong, 12l.toLong, -20l.toLong))) == (-52l));\n    assert(sumNegativenum((List[Long](19l.toLong, -65l.toLong, 57l.toLong, 39l.toLong, 152l.toLong, -639l.toLong, 121l.toLong, 44l.toLong, 90l.toLong, -190l.toLong))) == (-894l));\n    }\n\n}\n",
      "timestamp": 1665509858,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}