{
  "name": "mbpp_740_tuple_to_dict",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/scalathon-convert-tuple-to-adjacent-pair-map/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup) {\n            test_map += (i -> (i + 1))\n            i += 2\n        }\n        return test_map",
    "        val tup = (1L to test_tup).toList\n        val dict = tup.zip(tup.tail)\n        dict.toMap",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_map = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_map += (tup(i) -> tup(i+1))\n        }\n        tup_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_map = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_map += (tup(i).toLong -> tup(i + 1).toLong)\n        }\n        return tup_map",
    "        val tup_len = test_tup.toString.length\n        val tup_arr = test_tup.toString.toCharArray\n        val tup_arr_int = tup_arr.map(_.toString.toLong)\n        val tup_arr_int_pairs = tup_arr_int.sliding(2).toList\n        val tup_arr_int_pairs_map = tup_arr_int_pairs.map(x => (x(0),x(1))).toMap\n        return tup_arr_int_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = List[Long]()\n        var test_tup_list_rev = List[Long]()\n        var test_tup_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        var j = 1\n        while(j < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(j).toLong)\n            i += 1\n            j += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var test_tup_list_pairs = test_tup_list.grouped(2).toList\n        var test_tup_list_pairs_map = Map[Long,Long]()\n        for (i <- 0 until test_tup_list_pairs.length) {\n            test_tup_list_pairs_map += (test_tup_list_pairs(i)(0) -> test_tup_list_pairs(i)(1))\n        }\n        return test_tup_list_pairs_map",
    "        val tup = (1L to test_tup).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_map : Map[Long,Long] = Map()\n        var i : Long = 0\n        while (i < test_tup) {\n            test_map += (i -> (i+1))\n            i += 1\n        }\n        return test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return result",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        result",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length) {\n            if(i+1 < test_tup.toString.length) {\n                test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i+1).asDigit.toLong)\n            }\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (i == test_tup.toString.length - 1) {\n                test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(0).asDigit.toLong)\n            }\n            else {\n                test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            }\n        }\n        return test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_pairs = tup.sliding(2).toList\n        val tup_dict = tup_pairs.map(x => (x(0),x(1))).toMap\n        tup_dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_rev = List[Long]()\n        var test_list_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_list_rev_rev_rev_rev_rev_rev_rev_rev",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            if (i % 2 == 0) {\n                test_map += (test_tup_list(i) -> test_tup_list(i + 1))\n            }\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        var j = 1\n        while (j < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(j).toLong)\n            i += 1\n            j += 1\n        }\n        test_map",
    "        val tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val tup_list_pairs = tup_list.sliding(2).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        var j = 1\n        while (j < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(j).toString.toLong)\n            i += 2\n            j += 2\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while(i < test_tup) {\n            test_map += (i -> (i+1))\n            i += 2\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length) {\n            if (i == test_tup.toString.length - 1) {\n                test_map += (test_tup.toString.charAt(i).asDigit.toLong -> 0)\n            }\n            else {\n                test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            }\n            i += 1\n        }\n        test_map",
    "        val tup = (1 to test_tup.toInt).toList\n        val tup_pairs = tup.sliding(2).toList\n        val tup_pairs_map = tup_pairs.map(x => (x.head, x.last))\n        tup_pairs_map.toMap",
    "        val tup = (1 to test_tup.toInt).toList\n        var dict = Map[Long,Long]()\n        for (i <- 0 to tup.length - 2) {\n            dict += (tup(i) -> tup(i+1))\n        }\n        return dict",
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup) {\n            test_map += (i -> (i+1))\n            i += 2\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i+1).toString.toLong)\n            i += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map : Map[Long,Long] = Map()\n        var test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_map += (test_tup_list(i) -> test_tup_list(i+1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_map += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_map",
    "        val tup_len = test_tup.toString.length\n        val tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var tup_dict = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_dict += (tup_list(i) -> tup_list(i + 1))\n        }\n        tup_dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_map = Map[Long,Long]()\n        var test_list_rev_map_rev = Map[Long,Long]()\n        var test_list_rev_map_rev_list = List[Long]()\n        var test_list_rev_map_rev_list_rev = List[Long]()\n        var test_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev = List[Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev = List[Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_list",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.asDigit.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_map += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp != 0) {\n            test_list = (temp % 10) :: test_list\n            temp = temp / 10\n        }\n        for(i <- 0 to test_list.length - 2) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        val tup_len = test_tup.toString.length\n        val tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val tup_list_pairs = tup_list.sliding(2).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit)\n        val test_tup_list_pairs = test_tup_list.grouped(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x.head.toLong, x.last.toLong))\n        test_tup_list_pairs_map.toMap",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList\n        for (i <- 0 to test_tup_list.length - 2) {\n            test_map += (test_tup_list(i).toString.toLong -> test_tup_list(i + 1).toString.toLong)\n        }\n        return test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2,2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_dict = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_iter = List[Long]()\n        var test_list_iter = List[Long]()\n        var test_list_iter_rev = List[Long]()\n        var test_list_iter_rev_iter = List[Long]()\n        var test_list_iter_iter = List[Long]()\n        var test_list_iter_iter_rev = List[Long]()\n        var test_list_iter_iter_rev_iter = List[Long]()\n        var test_list_iter_iter_iter = List[Long]()\n        var test_list_iter_iter_iter_rev = List[Long]()\n        var test_list_iter_iter_iter_rev_iter = List[Long]()\n        var test_list_iter_iter_iter_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_rev = List[Long]()\n        var test_list_iter_iter_iter_iter_rev_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_rev = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_rev_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_iter_rev = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_iter_rev_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_iter_iter = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_iter_iter_rev = List[Long]()\n        var test_list_iter_iter_iter_iter_iter_iter_iter_rev_iter",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_map = tup.grouped(2).map{case List(x,y) => (x,y)}.toMap\n        return tup_map",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_map += (test_tup_list(i).toString.toLong -> test_tup_list(i + 1).toString.toLong)\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp = temp / 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        return dict",
    "        val tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val tup_list_pairs = tup_list.sliding(2,2).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = List[Long]()\n        var test_tup_list_rev = List[Long]()\n        var test_tup_list_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var test_t",
    "        var test_map : Map[Long,Long] = Map()\n        var test_list : List[Long] = List()\n        var test_num : Long = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_pairs = tup.zip(tup.tail)\n        val tup_dict = tup_pairs.toMap\n        tup_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var res = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            res += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return res",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var tup_list = List[Long]()\n        var tup_list_rev = List[Long]()\n        var tup_list_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup_list_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev_rev = List[Long]()\n        var tup",
    "        val tup_list = test_tup.toString.map(_.asDigit).toList\n        val tup_list_pairs = tup_list.sliding(2).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return tup_list_pairs_map",
    "        val tup = (1L to test_tup).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup) {\n            test_map += (i -> (i+1))\n            i += 2\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = List[Long]()\n        var i = 0\n        while(test_tup > 0) {\n            test_tup_list = (test_tup % 10) :: test_tup_list\n            test_tup = test_tup / 10\n        }\n        while(i < test_tup_list.length) {\n            test_map += (test_tup_list(i) -> test_tup_list(i+1))\n            i += 2\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup = test_tup / 10\n        }\n        while (i < test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n            i += 1\n        }\n        return test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_pairs = tup.sliding(2).toList\n        val tup_pairs_map = tup_pairs.map(x => (x(0), x(1))).toMap\n        return tup_pairs_map",
    "        var map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var tup = test_tup\n        var i = 0\n        while(tup > 0) {\n            var rem = tup % 10\n            tup = tup / 10\n            if(i % 2 == 0) {\n                dict += (rem -> 0)\n            } else {\n                dict(rem) = dict(rem) + 1\n            }\n            i += 1\n        }\n        return dict",
    "        val tup = (1 to test_tup.toInt).toList\n        val tup_pairs = tup.sliding(2).toList\n        val tup_dict = tup_pairs.map(x => (x(0),x(1))).toMap\n        return tup_dict",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i + 1).toString.toLong)\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_map += (test_tup_list(i) -> test_tup_list(i+1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_map = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_map += (tup(i).toLong -> tup(i + 1).toLong)\n        }\n        tup_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i+1).toString.toLong)\n            i += 2\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i+1).toLong)\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length) {\n            if (i == test_tup.toString.length - 1) {\n                test_map += (test_tup.toString.charAt(i).toLong -> 0)\n            } else {\n                test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            }\n            i += 1\n        }\n        return test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.grouped(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_map = List[Long]()\n        var test_list_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map_rev = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map_rev_map = List[Long]()\n        var test_list_rev_map_rev_map_rev_map_rev_map",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 to test_tup_list.length - 2) {\n            test_map += (test_tup_list(i) -> test_tup_list(i+1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString().length - 1) {\n            test_map += (test_tup.toString()(i).toString().toLong -> test_tup.toString()(i + 1).toString().toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (i == test_tup.toString.length - 1) {\n                test_map += (test_tup.toString.charAt(i).toLong -> 0)\n            }\n            else {\n                test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            }\n        }\n        return test_map",
    "        val tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val tup_list_pairs = tup_list.sliding(2,2).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x(0),x(1))).toMap\n        tup_list_pairs_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString().length - 1) {\n            test_map += (test_tup.toString()(i).asDigit.toLong -> test_tup.toString()(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_len = tup.length\n        val tup_dict = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_dict += (tup(i) -> tup(i+1))\n        }\n        tup_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        var test_dict = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_dict += (test_tup_list(i) -> test_tup_list(i+1))\n        }\n        return test_dict",
    "        val tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val tup_list_pairs = tup_list.sliding(2,1).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x.head, x.last)).toMap\n        return tup_list_pairs_map",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length) {\n            if (i == test_tup.toString.length - 1) {\n                test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> 0)\n            } else {\n                test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            }\n            i += 1\n        }\n        return test_dict",
    "        val tup = (1 to test_tup).toList\n        val tup_map = tup.sliding(2).map(x => (x(0),x(1))).toMap\n        return tup_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_final = List[Long]()\n        var test_list_final = List[Long]()\n        var test_list_final_rev = List[Long]()\n        var test_list_final_rev_final = List[Long]()\n        var test_list_final_final = List[Long]()\n        var test_list_final_final_rev = List[Long]()\n        var test_list_final_final_rev_final = List[Long]()\n        var test_list_final_final_final = List[Long]()\n        var test_list_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_rev_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev = List[Long]()\n        var test_list_final_final_final_final_final_final_final_rev_final",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_dict = Map[Long,Long]()\n        val test_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_list.length - 1) {\n            test_dict += (test_list(i) -> test_list(i + 1))\n        }\n        return test_dict",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            if (i % 2 == 0) {\n                test_map += (test_tup_list(i) -> test_tup_list(i+1))\n            }\n        }\n        return test_map",
    "        val tup_list = List(test_tup)\n        val tup_list_len = tup_list.length\n        val tup_list_range = 0 until tup_list_len\n        val tup_list_range_pairs = tup_list_range.sliding(2,1)\n        val tup_list_range_pairs_list = tup_list_range_pairs.toList\n        val tup_list_range_pairs_list_map = tup_list_range_pairs_list.map(x => (x(0),x(1)))\n        val tup_list_range_pairs_list_map_dict = tup_list_range_pairs_list_map.toMap\n        return tup_list_range_pairs_list_map_dict",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_map = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_map(tup(i)) = tup(i + 1)\n        }\n        tup_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict",
    "        var test_map = Map[Long,Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 to test_tup_list.length - 2) {\n            test_map += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        var j = 1\n        while(j < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(j).toLong)\n            i += 2\n            j += 2\n        }\n        return test_map",
    "        val tup = (1 to test_tup.toInt).toList\n        val tup_map = tup.sliding(2).map(x => (x(0),x(1))).toMap\n        tup_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while (test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup /= 10\n        }\n        while (i < test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i-1).asDigit.toLong -> test_tup.toString.charAt(i).asDigit.toLong)\n            i += 2\n        }\n        return test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var tup_list = test_tup.toString.toList\n        for (i <- 0 until tup_list.length - 1) {\n            test_map += (tup_list(i).asDigit.toLong -> tup_list(i + 1).asDigit.toLong)\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i + 1).toString.toLong)\n            i += 1\n        }\n        test_map",
    "        var res : Map[Long,Long] = Map()\n        var i : Long = 0\n        while (i < test_tup) {\n            res += (i -> (i + 1))\n            i += 1\n        }\n        return res",
    "        val tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val tup_list_pairs = tup_list.sliding(2,2).toList\n        val tup_list_pairs_map = tup_list_pairs.map(x => (x(0), x(1))).toMap\n        return tup_list_pairs_map",
    "        val test_tup_list = test_tup.toString.map(_.asDigit).toList\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0).toLong, x(1).toLong)).toMap\n        return test_tup_list_pairs_map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        var i = 0\n        var dict = Map[Long,Long]()\n        while (i < tup_len - 1) {\n            dict += (tup(i) -> tup(i + 1))\n            i += 1\n        }\n        dict",
    "        val tup = (1L to test_tup).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map : Map[Long,Long] = Map()\n        var test_list : List[Long] = List()\n        var test_list_rev : List[Long] = List()\n        var test_list_rev_2 : List[Long] = List()\n        var test_list_rev_3 : List[Long] = List()\n        var test_list_rev_4 : List[Long] = List()\n        var test_list_rev_5 : List[Long] = List()\n        var test_list_rev_6 : List[Long] = List()\n        var test_list_rev_7 : List[Long] = List()\n        var test_list_rev_8 : List[Long] = List()\n        var test_list_rev_9 : List[Long] = List()\n        var test_list_rev_10 : List[Long] = List()\n        var test_list_rev_11 : List[Long] = List()\n        var test_list_rev_12 : List[Long] = List()\n        var test_list_rev_13 : List[Long] = List()\n        var test_list_rev_14 : List[Long] = List()\n        var test_list_rev_15 : List[Long] = List()\n        var test_list_rev_16 : List[Long] = List()\n        var test_list_rev_17 : List[Long] = List()\n        var test_list_rev_18 : List[Long] = List()\n        var test_list_rev_19 : List[Long] = List()\n        var test_list_rev_20 : List[Long] = List()\n        var test_list_rev_21 : List[Long] = List()\n        var test_list_rev_22 : List[Long] = List()\n        var test_list_rev_23 : List[Long] = List()\n        var test_list_rev_24 : List[Long] = List()\n        var test_list_rev_25 : List[Long] = List()\n        var test_list_rev_26 : List[Long] = List()\n        var test_list_rev_27 : List[Long] =",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev",
    "        var map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length) {\n            if(i == test_tup.toString.length - 1) {\n                map += (test_tup.toString.charAt(i).toLong -> 0)\n            } else {\n                map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            }\n            i += 1\n        }\n        return map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong\n            i += 1\n        }\n        test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_map = tup.sliding(2).map(x => (x(0), x(1))).toMap\n        return tup_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        val tup = (1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 51L, 52L, 53L, 54L, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 99L, 100L, 101L, 102L, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L, 119L, 120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129L, 130L, 131L, 132L, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 141L, 142L, 143L, 144L, 145L, 146L, 147L, 148L, 149L, 150L, 151L, 152L, 153L, 154L, 155L, 156L, 157L, 158L, 159L, 160L, 161L, 162L, 163L, 164L, 165L, 166L, 167L, 168L, 169",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i + 1).toString.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(x => x.toString.toLong)\n        for (i <- 0 until test_tup_list.length) {\n            if (i % 2 == 0) {\n                test_list = test_list :+ test_tup_list(i)\n            } else {\n                test_list = test_list :+ test_tup_list(i)\n                test_map += (test_list(0) -> test_list(1))\n                test_list = List[Long]()\n            }\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while(temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        val tup = (1L to test_tup).toList\n        val tup_pairs = tup.sliding(2).toList\n        val tup_dict = tup_pairs.map(x => (x(0),x(1))).toMap\n        return tup_dict",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i + 1).toString.toLong)\n            i += 1\n        }\n        return result",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup) {\n            test_map += (i -> (i+1))\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        var test_list_len = test_list.length\n        for (i <- 0 until test_list_len - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_rev = List[Long]()\n        var test_list_rev_2 = List[Long]()\n        var test_list_rev_3 = List[Long]()\n        var test_list_rev_4 = List[Long]()\n        var test_list_rev_5 = List[Long]()\n        var test_list_rev_6 = List[Long]()\n        var test_list_rev_7 = List[Long]()\n        var test_list_rev_8 = List[Long]()\n        var test_list_rev_9 = List[Long]()\n        var test_list_rev_10 = List[Long]()\n        var test_list_rev_11 = List[Long]()\n        var test_list_rev_12 = List[Long]()\n        var test_list_rev_13 = List[Long]()\n        var test_list_rev_14 = List[Long]()\n        var test_list_rev_15 = List[Long]()\n        var test_list_rev_16 = List[Long]()\n        var test_list_rev_17 = List[Long]()\n        var test_list_rev_18 = List[Long]()\n        var test_list_rev_19 = List[Long]()\n        var test_list_rev_20 = List[Long]()\n        var test_list_rev_21 = List[Long]()\n        var test_list_rev_22 = List[Long]()\n        var test_list_rev_23 = List[Long]()\n        var test_list_rev_24 = List[Long]()\n        var test_list_rev_25 = List[Long]()\n        var test_list_rev_26 = List[Long]()\n        var test_list_rev_27 = List[Long]()\n        var test_list_rev_28 = List[Long]()\n        var test_list_rev_29 = List[Long]()\n        var test_list_rev_30 = List[Long]()\n        var test_list_rev",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i + 1).toString.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 until test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        return test_dict",
    "        val tup = (1L to test_tup).toList\n        val tup_pairs = tup.sliding(2).toList\n        val tup_pairs_map = tup_pairs.map(x => (x(0),x(1))).toMap\n        return tup_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var i = 0\n        while(test_tup > 0) {\n            test_list = (test_tup % 10) :: test_list\n            test_tup = test_tup / 10\n        }\n        while(i < test_list.length) {\n            test_map += (test_list(i) -> test_list(i+1))\n            i += 2\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i <= test_tup) {\n            test_map += (i -> (i+1))\n            i += 2\n        }\n        return test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toString.toLong -> test_tup.toString.charAt(i + 1).toString.toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var temp_tup = test_tup\n        var temp_tup_len = test_tup.toString.length\n        var temp_tup_len_half = temp_tup_len/2\n        var temp_tup_len_half_int = temp_tup_len_half.toInt\n        var temp_tup_len_half_int_minus_1 = temp_tup_len_half_int - 1\n        var temp_tup_len_half_int_minus_2 = temp_tup_len_half_int - 2\n        var temp_tup_len_half_int_minus_3 = temp_tup_len_half_int - 3\n        var temp_tup_len_half_int_minus_4 = temp_tup_len_half_int - 4\n        var temp_tup_len_half_int_minus_5 = temp_tup_len_half_int - 5\n        var temp_tup_len_half_int_minus_6 = temp_tup_len_half_int - 6\n        var temp_tup_len_half_int_minus_7 = temp_tup_len_half_int - 7\n        var temp_tup_len_half_int_minus_8 = temp_tup_len_half_int - 8\n        var temp_tup_len_half_int_minus_9 = temp_tup_len_half_int - 9\n        var temp_tup_len_half_int_minus_10 = temp_tup_len_half_int - 10\n        var temp_tup_len_half_int_minus_11 = temp_tup_len_half_int - 11\n        var temp_tup_len_half_int_minus_12 = temp_tup_len_half_int - 12\n        var temp_tup_len_half_int_minus_13 = temp_tup_len_half_int - 13\n        var temp_tup_len_half_int_minus_14 = temp_tup_len_half_int - 14\n       ",
    "        var test_map = Map[Long,Long]()\n        var test_list = test_tup.toString.toList\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i).toString.toLong -> test_list(i + 1).toString.toLong)\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString().length - 1) {\n            test_map += (test_tup.toString()(i).asDigit.toLong -> test_tup.toString()(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        for (i <- 0 until test_tup_list.length - 1) {\n            test_map += (test_tup_list(i) -> test_tup_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        result",
    "        var result = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            result += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        result",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_list_2 = List[Long]()\n        var test_list_3 = List[Long]()\n        var test_list_4 = List[Long]()\n        var test_list_5 = List[Long]()\n        var test_list_6 = List[Long]()\n        var test_list_7 = List[Long]()\n        var test_list_8 = List[Long]()\n        var test_list_9 = List[Long]()\n        var test_list_10 = List[Long]()\n        var test_list_11 = List[Long]()\n        var test_list_12 = List[Long]()\n        var test_list_13 = List[Long]()\n        var test_list_14 = List[Long]()\n        var test_list_15 = List[Long]()\n        var test_list_16 = List[Long]()\n        var test_list_17 = List[Long]()\n        var test_list_18 = List[Long]()\n        var test_list_19 = List[Long]()\n        var test_list_20 = List[Long]()\n        var test_list_21 = List[Long]()\n        var test_list_22 = List[Long]()\n        var test_list_23 = List[Long]()\n        var test_list_24 = List[Long]()\n        var test_list_25 = List[Long]()\n        var test_list_26 = List[Long]()\n        var test_list_27 = List[Long]()\n        var test_list_28 = List[Long]()\n        var test_list_29 = List[Long]()\n        var test_list_30 = List[Long]()\n        var test_list_31 = List[Long]()\n        var test_list_32 = List[Long]()\n        var test_list_33 = List[Long]()\n        var test_list_34 = List[Long]()\n        var test_list_35 = List[Long]()\n        var test_list_36 = List",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while(test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for(i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var temp = test_tup\n        while (temp > 0) {\n            test_list = (temp % 10) :: test_list\n            temp /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        dict",
    "        var test_dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_dict += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_dict",
    "        val tup_len = test_tup.toString.length\n        val tup_list = test_tup.toString.toList\n        val tup_list_int = tup_list.map(_.asDigit)\n        val tup_list_int_pairs = tup_list_int.grouped(2).toList\n        val tup_list_int_pairs_map = tup_list_int_pairs.map(x => (x(0).toLong, x(1).toLong))\n        val tup_list_int_pairs_map_dict = tup_list_int_pairs_map.toMap\n        return tup_list_int_pairs_map_dict"
  ]
}