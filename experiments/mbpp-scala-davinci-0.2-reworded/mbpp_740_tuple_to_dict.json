{
  "name": "mbpp_740_tuple_to_dict",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert the given tuple to a key-value map using adjacent elements. https://www.geeksforgeeks.org/scalathon-convert-tuple-to-adjacent-pair-map/\n    def tupleToDict(test_tup : Long) : Map[Long,Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tupleToDict((1l, 5l, 7l, 10l, 13l, 5l)).equals((Map[Long,Long](1l -> 5l, 7l -> 10l, 13l -> 5l))));\n    assert(tupleToDict((1l, 2l, 3l, 4l, 5l, 6l)).equals((Map[Long,Long](1l -> 2l, 3l -> 4l, 5l -> 6l))));\n    assert(tupleToDict((7l, 8l, 9l, 10l, 11l, 12l)).equals((Map[Long,Long](7l -> 8l, 9l -> 10l, 11l -> 12l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_map = Map[Long,Long]()\n        var i = 1\n        while (i < test_tup) {\n            test_map += (i -> (i + 1))\n            i += 2\n        }\n        return test_map",
    "        val tup = (1L to test_tup).toList\n        val dict = tup.zip(tup.tail)\n        dict.toMap",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while(i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        return test_map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_map = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_map += (tup(i) -> tup(i+1))\n        }\n        tup_map",
    "        var dict = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            dict += (test_tup.toString.charAt(i).toLong - 48) -> (test_tup.toString.charAt(i + 1).toLong - 48)\n            i += 1\n        }\n        dict",
    "        var test_map = Map[Long,Long]()\n        for (i <- 0 to test_tup.toString.length - 2) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n        }\n        return test_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).asDigit.toLong -> test_tup.toString.charAt(i + 1).asDigit.toLong)\n            i += 1\n        }\n        test_map",
    "        val tup = test_tup.toString.map(_.asDigit).toList\n        val tup_len = tup.length\n        val tup_map = Map[Long,Long]()\n        for (i <- 0 until tup_len - 1) {\n            tup_map += (tup(i).toLong -> tup(i + 1).toLong)\n        }\n        return tup_map",
    "        val tup_len = test_tup.toString.length\n        val tup_arr = test_tup.toString.toCharArray\n        val tup_arr_int = tup_arr.map(_.toString.toLong)\n        val tup_arr_int_pairs = tup_arr_int.sliding(2).toList\n        val tup_arr_int_pairs_map = tup_arr_int_pairs.map(x => (x(0),x(1))).toMap\n        return tup_arr_int_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_tup_list = List[Long]()\n        var test_tup_list_rev = List[Long]()\n        var test_tup_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev = List[Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map = Map[Long,Long]()\n        var test_tup_list_rev_map_rev_list_rev_map_rev_list_rev_map_rev_list_rev_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        while (i < test_tup.toString.length - 1) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(i + 1).toLong)\n            i += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.asDigit.toLong)\n        val test_tup_list_pairs = test_tup_list.sliding(2).toList\n        val test_tup_list_pairs_map = test_tup_list_pairs.map(x => (x(0),x(1))).toMap\n        return test_tup_list_pairs_map",
    "        var test_map = Map[Long,Long]()\n        var i = 0\n        var j = 1\n        while(j < test_tup.toString.length) {\n            test_map += (test_tup.toString.charAt(i).toLong -> test_tup.toString.charAt(j).toLong)\n            i += 1\n            j += 1\n        }\n        test_map",
    "        val test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        val test_tup_list_pairs = test_tup_list.zip(test_tup_list.tail)\n        val test_tup_dict = test_tup_list_pairs.toMap\n        return test_tup_dict",
    "        var test_map = Map[Long,Long]()\n        var test_list = List[Long]()\n        var test_num = test_tup\n        while (test_num > 0) {\n            test_list = (test_num % 10) :: test_list\n            test_num /= 10\n        }\n        for (i <- 0 until test_list.length - 1) {\n            test_map += (test_list(i) -> test_list(i + 1))\n        }\n        return test_map",
    "        var test_tup_list = test_tup.toString.toList.map(_.toString.toLong)\n        var test_tup_list_pairs = test_tup_list.grouped(2).toList\n        var test_tup_list_pairs_map = Map[Long,Long]()\n        for (i <- 0 until test_tup_list_pairs.length) {\n            test_tup_list_pairs_map += (test_tup_list_pairs(i)(0) -> test_tup_list_pairs(i)(1))\n        }\n        return test_tup_list_pairs_map",
    "        val tup = (1L to test_tup).toList\n        val dict = Map[Long,Long]()\n        for (i <- 0 until tup.length - 1) {\n            dict += (tup(i) -> tup(i + 1))\n        }\n        dict",
    "        var test_map : Map[Long,Long] = Map()\n        var i : Long = 0\n        while (i < test_tup) {\n            test_map += (i -> (i+1))\n            i += 1\n        }\n        return test_map"
  ]
}