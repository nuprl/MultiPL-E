{
  "name": "mbpp_108_merge_sorted_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to merge three lists into a single sorted list.\n    def mergeSortedList(num1 : List[Long], num2 : List[Long], num3 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mergeSortedList((List[Long](25l.toLong, 24l.toLong, 15l.toLong, 4l.toLong, 5l.toLong, 29l.toLong, 110l.toLong)), (List[Long](19l.toLong, 20l.toLong, 11l.toLong, 56l.toLong, 25l.toLong, 233l.toLong, 154l.toLong)), (List[Long](24l.toLong, 26l.toLong, 54l.toLong, 48l.toLong))).equals((List[Long](4l.toLong, 5l.toLong, 11l.toLong, 15l.toLong, 19l.toLong, 20l.toLong, 24l.toLong, 24l.toLong, 25l.toLong, 25l.toLong, 26l.toLong, 29l.toLong, 48l.toLong, 54l.toLong, 56l.toLong, 110l.toLong, 154l.toLong, 233l.toLong))));\n    assert(mergeSortedList((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 6l.toLong, 8l.toLong, 9l.toLong)), (List[Long](2l.toLong, 5l.toLong, 7l.toLong, 11l.toLong)), (List[Long](1l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 12l.toLong))).equals((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 7l.toLong, 8l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong))));\n    assert(mergeSortedList((List[Long](18l.toLong, 14l.toLong, 10l.toLong, 9l.toLong, 8l.toLong, 7l.toLong, 9l.toLong, 3l.toLong, 2l.toLong, 4l.toLong, 1l.toLong)), (List[Long](25l.toLong, 35l.toLong, 22l.toLong, 85l.toLong, 14l.toLong, 65l.toLong, 75l.toLong, 25l.toLong, 58l.toLong)), (List[Long](12l.toLong, 74l.toLong, 9l.toLong, 50l.toLong, 61l.toLong, 41l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 9l.toLong, 9l.toLong, 10l.toLong, 12l.toLong, 14l.toLong, 14l.toLong, 18l.toLong, 22l.toLong, 25l.toLong, 25l.toLong, 35l.toLong, 41l.toLong, 50l.toLong, 58l.toLong, 61l.toLong, 65l.toLong, 74l.toLong, 75l.toLong, 85l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j)) {\n                if (num1(i) < num3(k)) {\n                    result += num1(i)\n                    i += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else {\n                if (num2(j) < num3(k)) {\n                    result += num2(j)\n                    j += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        var result = List[Long]()\n        var i = 0; var j = 0; var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        if (i < num1.length) {\n            while (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            }\n        }\n        if (j < num2.length) {\n            while (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            }\n        }\n        if (k < num3.length) {\n            while (k < num3.length) {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            val min = min(num1(i), min(num2(j), num3(k)))\n            result = result :+ min\n            if (min == num1(i)) i += 1\n            else if (min == num2(j)) j += 1\n            else k += 1\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0; var j = 0; var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        val list = num1 ::: num2 ::: num3\n        list.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var num1Index = 0\n        var num2Index = 0\n        var num3Index = 0\n        while (num1Index < num1.length || num2Index < num2.length || num3Index < num3.length) {\n            if (num1Index < num1.length && num2Index < num2.length && num3Index < num3.length) {\n                if (num1(num1Index) < num2(num2Index) && num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else if (num2(num2Index) < num1(num1Index) && num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num1Index < num1.length && num2Index < num2.length) {\n                if (num1(num1Index) < num2(num2Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                }\n            } else if (num1Index < num1.length && num3Index < num3.length) {\n                if (num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num2Index < num2.length && num3Index < num3.length) {\n                if (num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val list = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                list += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                list += num2(j)\n                j += 1\n            } else {\n                list += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            list += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            list += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            list += num3(k)\n            k += 1\n        }\n        list.toList",
    "        (num1 ::: num2 ::: num3).sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i < num1.length && j < num2.length && k < num3.length) {\n            if(num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if(num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while(i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while(j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while(k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var nums = ListBuffer[Long]()\n        nums ++= num1\n        nums ++= num2\n        nums ++= num3\n        nums.sorted.toList",
    "        val list = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                list += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                list += num2(j)\n                j += 1\n            } else {\n                list += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            list += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            list += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            list += num3(k)\n            k += 1\n        }\n        list.toList",
    "        val list = num1 ::: num2 ::: num3\n        list.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) < num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            val min = min(num1(i), num2(j), num3(k))\n            result = result :+ min\n            if (min == num1(i)) i += 1\n            if (min == num2(j)) j += 1\n            if (min == num3(k)) k += 1\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i < num1.length && j < num2.length && k < num3.length) {\n            if(num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            }\n            else if(num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            }\n            else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while(i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while(j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while(k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) < num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ++ num2 ++ num3\n        num.sorted",
    "        var result = List[Long]()\n        var num1Index = 0\n        var num2Index = 0\n        var num3Index = 0\n        while (num1Index < num1.length || num2Index < num2.length || num3Index < num3.length) {\n            var min = Long.MaxValue\n            if (num1Index < num1.length && num1(num1Index) < min) min = num1(num1Index)\n            if (num2Index < num2.length && num2(num2Index) < min) min = num2(num2Index)\n            if (num3Index < num3.length && num3(num3Index) < min) min = num3(num3Index)\n            result = result :+ min\n            if (num1Index < num1.length && num1(num1Index) == min) num1Index += 1\n            if (num2Index < num2.length && num2(num2Index) == min) num2Index += 1\n            if (num3Index < num3.length && num3(num3Index) == min) num3Index += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result : List[Long] = List()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val list = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                list += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                list += num2(j)\n                j += 1\n            } else {\n                list += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            list += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            list += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            list += num3(k)\n            k += 1\n        }\n        list.toList",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ++ num2 ++ num3\n        nums.sortWith(_ < _)",
    "        val list = num1 ::: num2 ::: num3\n        list.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var index1 = 0\n        var index2 = 0\n        var index3 = 0\n        while (index1 < num1.length && index2 < num2.length && index3 < num3.length) {\n            val min = min(num1(index1), min(num2(index2), num3(index3)))\n            result = result :+ min\n            if (min == num1(index1)) index1 += 1\n            if (min == num2(index2)) index2 += 1\n            if (min == num3(index3)) index3 += 1\n        }\n        while (index1 < num1.length) {\n            result = result :+ num1(index1)\n            index1 += 1\n        }\n        while (index2 < num2.length) {\n            result = result :+ num2(index2)\n            index2 += 1\n        }\n        while (index3 < num3.length) {\n            result = result :+ num3(index3)\n            index3 += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        val num = num1 ++ num2 ++ num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        val list = num1 ::: num2 ::: num3\n        list.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result : List[Long] = List()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else if (num3(k) <= num1(i) && num3(k) <= num2(j)) {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num",
    "        var result = new ListBuffer[Long]\n        var i = 0; var j = 0; var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ++ num2 ++ num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) < num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i < num1.length && j < num2.length && k < num3.length) {\n            if(num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if(num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while(i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while(j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while(k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j)) {\n                if (num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else {\n                if (num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                val min = min(num1(i), min(num2(j), num3(k)))\n                if (min == num1(i)) {\n                    result = result :+ num1(i)\n                    i += 1\n                }\n                else if (min == num2(j)) {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n                else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            }\n            else if (i < num1.length && j < num2.length) {\n                val min = min(num1(i), num2(j))\n                if (min == num1(i)) {\n                    result = result :+ num1(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            }\n            else if (i < num1.length && k < num3.length) {\n                val min = min(num1(i), num3(k))\n                if (min == num1(i)) {\n                    result = result :+ num1(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            }\n            else if (j < num2.length && k < num3.length) {\n                val min = min(num2(j), num3(k))\n                if (min == num2(j)) {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n                else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            }\n            else if (i < num1.length) {\n                result = result :+ num1(i)\n                i",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        val result = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result += num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result : List[Long] = Nil\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j)) {\n                if (num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else {\n                if (num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                    result += num1(i)\n                    i += 1\n                } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                    result += num2(j)\n                    j += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) < num2(j)) {\n                    result += num1(i)\n                    i += 1\n                } else {\n                    result += num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) < num3(k)) {\n                    result += num1(i)\n                    i += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) < num3(k)) {\n                    result += num2(j)\n                    j += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result += num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        result.toList",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var index1 = 0\n        var index2 = 0\n        var index3 = 0\n        while (index1 < num1.length || index2 < num2.length || index3 < num3.length) {\n            if (index1 < num1.length && index2 < num2.length && index3 < num3.length) {\n                if (num1(index1) < num2(index2) && num1(index1) < num3(index3)) {\n                    result = result :+ num1(index1)\n                    index1 += 1\n                } else if (num2(index2) < num1(index1) && num2(index2) < num3(index3)) {\n                    result = result :+ num2(index2)\n                    index2 += 1\n                } else {\n                    result = result :+ num3(index3)\n                    index3 += 1\n                }\n            } else if (index1 < num1.length && index2 < num2.length) {\n                if (num1(index1) < num2(index2)) {\n                    result = result :+ num1(index1)\n                    index1 += 1\n                } else {\n                    result = result :+ num2(index2)\n                    index2 += 1\n                }\n            } else if (index1 < num1.length && index3 < num3.length) {\n                if (num1(index1) < num3(index3)) {\n                    result = result :+ num1(index1)\n                    index1 += 1\n                } else {\n                    result = result :+ num3(index3)\n                    index3 += 1\n                }\n            } else if (index2 < num2.length && index3 < num3.length) {\n                if (num2(index2) < num3(index3)) {\n                    result = result :+ num2(index2)\n                    index2 += 1\n                } else {\n                    result = result :+ num3(index3)\n                    index3 += 1\n                }\n            } else if (index1 < num1.length) {\n                result = result :+ num1(index1)\n                index",
    "        val num = num1 ++ num2 ++ num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        val nums = num1 ++ num2 ++ num3\n        nums.sorted",
    "        var result : List[Long] = List()\n        var num1Index : Int = 0\n        var num2Index : Int = 0\n        var num3Index : Int = 0\n        while (num1Index < num1.length || num2Index < num2.length || num3Index < num3.length) {\n            if (num1Index < num1.length && num2Index < num2.length && num3Index < num3.length) {\n                if (num1(num1Index) < num2(num2Index) && num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else if (num2(num2Index) < num1(num1Index) && num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num1Index < num1.length && num2Index < num2.length) {\n                if (num1(num1Index) < num2(num2Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                }\n            } else if (num1Index < num1.length && num3Index < num3.length) {\n                if (num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num2Index < num2.length && num3Index < num3.length) {\n                if (num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i < num1.length && j < num2.length && k < num3.length) {\n            if(num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if(num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while(i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while(j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while(k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result : ListBuffer[Long] = ListBuffer()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result += num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result += num2(j)\n                    j += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result += num1(i)\n                    i += 1\n                } else {\n                    result += num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result += num1(i)\n                    i += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result += num2(j)\n                    j += 1\n                } else {\n                    result += num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result += num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val list = num1 ::: num2 ::: num3\n        list.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        return result",
    "        val mergedList = new ListBuffer[Long]\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                mergedList += num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                mergedList += num2(j)\n                j += 1\n            } else {\n                mergedList += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            mergedList += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            mergedList += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            mergedList += num3(k)\n            k += 1\n        }\n        mergedList.toList",
    "        val list = num1 ::: num2 ::: num3\n        list.sortWith(_ < _)",
    "        var result = List[Long]()\n        var index1 = 0\n        var index2 = 0\n        var index3 = 0\n        while (index1 < num1.length || index2 < num2.length || index3 < num3.length) {\n            if (index1 < num1.length && index2 < num2.length && index3 < num3.length) {\n                val min = min(num1(index1), num2(index2), num3(index3))\n                if (min == num1(index1)) {\n                    result = result :+ min\n                    index1 += 1\n                }\n                else if (min == num2(index2)) {\n                    result = result :+ min\n                    index2 += 1\n                }\n                else {\n                    result = result :+ min\n                    index3 += 1\n                }\n            }\n            else if (index1 < num1.length && index2 < num2.length) {\n                val min = min(num1(index1), num2(index2))\n                if (min == num1(index1)) {\n                    result = result :+ min\n                    index1 += 1\n                }\n                else {\n                    result = result :+ min\n                    index2 += 1\n                }\n            }\n            else if (index1 < num1.length && index3 < num3.length) {\n                val min = min(num1(index1), num3(index3))\n                if (min == num1(index1)) {\n                    result = result :+ min\n                    index1 += 1\n                }\n                else {\n                    result = result :+ min\n                    index3 += 1\n                }\n            }\n            else if (index2 < num2.length && index3 < num3.length) {\n                val min = min(num2(index2), num3(index3))\n                if (min == num2(index2)) {\n                    result = result :+ min\n                    index2 += 1\n                }\n                else {\n                    result = result :+ min\n                    index3 += 1\n                }\n            }\n            else if (index1 < num1.length) {\n                result = result :+ num1(index1)\n",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        var result = new ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        val nums = num1 ++ num2 ++ num3\n        nums.sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while(i < num1.length && j < num2.length && k < num3.length) {\n            if(num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if(num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while(i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while(j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while(k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ++ num2 ++ num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                val min = min(num1(i), min(num2(j), num3(k)))\n                result = result :+ min\n                if (min == num1(i)) i += 1\n                else if (min == num2(j)) j += 1\n                else k += 1\n            } else if (i < num1.length && j < num2.length) {\n                val min = min(num1(i), num2(j))\n                result = result :+ min\n                if (min == num1(i)) i += 1\n                else j += 1\n            } else if (i < num1.length && k < num3.length) {\n                val min = min(num1(i), num3(k))\n                result = result :+ min\n                if (min == num1(i)) i += 1\n                else k += 1\n            } else if (j < num2.length && k < num3.length) {\n                val min = min(num2(j), num3(k))\n                result = result :+ min\n                if (min == num2(j)) j += 1\n                else k += 1\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            }\n            else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            }\n            else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var nums = ListBuffer[Long]()\n        nums ++= num1\n        nums ++= num2\n        nums ++= num3\n        nums.sorted.toList",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var num1Index = 0\n        var num2Index = 0\n        var num3Index = 0\n        while (num1Index < num1.length || num2Index < num2.length || num3Index < num3.length) {\n            if (num1Index < num1.length && num2Index < num2.length && num3Index < num3.length) {\n                if (num1(num1Index) < num2(num2Index) && num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else if (num2(num2Index) < num1(num1Index) && num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num1Index < num1.length && num2Index < num2.length) {\n                if (num1(num1Index) < num2(num2Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                }\n            } else if (num1Index < num1.length && num3Index < num3.length) {\n                if (num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num2Index < num2.length && num3Index < num3.length) {\n                if (num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j)) {\n                if (num1(i) < num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else {\n                if (num2(j) < num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var num1Index = 0\n        var num2Index = 0\n        var num3Index = 0\n        while (num1Index < num1.length || num2Index < num2.length || num3Index < num3.length) {\n            if (num1Index < num1.length && num2Index < num2.length && num3Index < num3.length) {\n                if (num1(num1Index) < num2(num2Index) && num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else if (num2(num2Index) < num1(num1Index) && num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num1Index < num1.length && num2Index < num2.length) {\n                if (num1(num1Index) < num2(num2Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                }\n            } else if (num1Index < num1.length && num3Index < num3.length) {\n                if (num1(num1Index) < num3(num3Index)) {\n                    result = result :+ num1(num1Index)\n                    num1Index += 1\n                } else {\n                    result = result :+ num3(num3Index)\n                    num3Index += 1\n                }\n            } else if (num2Index < num2.length && num3Index < num3.length) {\n                if (num2(num2Index) < num3(num3Index)) {\n                    result = result :+ num2(num2Index)\n                    num2Index += 1\n                } else {\n                    result = result :+ num",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length || j < num2.length || k < num3.length) {\n            if (i < num1.length && j < num2.length && k < num3.length) {\n                if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length && j < num2.length) {\n                if (num1(i) <= num2(j)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num2(j)\n                    j += 1\n                }\n            } else if (i < num1.length && k < num3.length) {\n                if (num1(i) <= num3(k)) {\n                    result = result :+ num1(i)\n                    i += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (j < num2.length && k < num3.length) {\n                if (num2(j) <= num3(k)) {\n                    result = result :+ num2(j)\n                    j += 1\n                } else {\n                    result = result :+ num3(k)\n                    k += 1\n                }\n            } else if (i < num1.length) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (j < num2.length) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k",
    "        val num = List(num1, num2, num3).flatten.sorted\n        num",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sortWith(_ < _)",
    "        var result = ListBuffer[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result += num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result += num2(j)\n                j += 1\n            } else {\n                result += num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result += num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result += num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result += num3(k)\n            k += 1\n        }\n        result.toList",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ++ num2 ++ num3\n        nums.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        while(num1.length > 0 && num2.length > 0 && num3.length > 0) {\n            val min = min(num1.head, min(num2.head, num3.head))\n            if(min == num1.head) {\n                result = result :+ num1.head\n                num1 = num1.tail\n            }\n            else if(min == num2.head) {\n                result = result :+ num2.head\n                num2 = num2.tail\n            }\n            else {\n                result = result :+ num3.head\n                num3 = num3.tail\n            }\n        }\n        while(num1.length > 0) {\n            result = result :+ num1.head\n            num1 = num1.tail\n        }\n        while(num2.length > 0) {\n            result = result :+ num2.head\n            num2 = num2.tail\n        }\n        while(num3.length > 0) {\n            result = result :+ num3.head\n            num3 = num3.tail\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result : List[Long] = Nil\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result ::: List(num1(i))\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result ::: List(num2(j))\n                j += 1\n            } else {\n                result = result ::: List(num3(k))\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result ::: List(num1(i))\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result ::: List(num2(j))\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result ::: List(num3(k))\n            k += 1\n        }\n        result",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        val nums = num1 ::: num2 ::: num3\n        nums.sorted",
    "        val num = num1 ::: num2 ::: num3\n        num.sorted",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) <= num2(j) && num1(i) <= num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) <= num1(i) && num2(j) <= num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result",
    "        var result = List[Long]()\n        var i = 0\n        var j = 0\n        var k = 0\n        while (i < num1.length && j < num2.length && k < num3.length) {\n            if (num1(i) < num2(j) && num1(i) < num3(k)) {\n                result = result :+ num1(i)\n                i += 1\n            } else if (num2(j) < num1(i) && num2(j) < num3(k)) {\n                result = result :+ num2(j)\n                j += 1\n            } else {\n                result = result :+ num3(k)\n                k += 1\n            }\n        }\n        while (i < num1.length) {\n            result = result :+ num1(i)\n            i += 1\n        }\n        while (j < num2.length) {\n            result = result :+ num2(j)\n            j += 1\n        }\n        while (k < num3.length) {\n            result = result :+ num3(k)\n            k += 1\n        }\n        result"
  ]
}