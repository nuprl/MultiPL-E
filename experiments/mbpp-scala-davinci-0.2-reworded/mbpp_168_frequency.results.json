{
  "name": "mbpp_168_frequency",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(i => i == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(_ == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(y => y == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((b, c) => if (c == x) b + 1 else b)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(x == _).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(_ == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        if (a.isEmpty) 0\n        else if (a.head == x) 1 + frequency(a.tail, x)\n        else frequency(a.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(_ == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(x == _).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0.toLong)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(y => y == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) if (i == x) count += 1\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(x == _).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(y => y == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, cur) => if (cur == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        if (a.isEmpty) 0\n        else if (a.head == x) 1 + frequency(a.tail, x)\n        else frequency(a.tail, x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.count(_ == x)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(x == _).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (x == y) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((b, c) => if (c == x) b + 1 else b)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(i => i == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0L)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        def count(a : List[Long], x : Long, c : Long) : Long = {\n            if (a.isEmpty) c\n            else if (a.head == x) count(a.tail, x, c + 1)\n            else count(a.tail, x, c)\n        }\n        count(a, x, 0)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122608,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0L\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).size\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.foldLeft(0)((acc, y) => if (y == x) acc + 1 else acc)\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1666122609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(_ == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(y => y == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        a.filter(e => e == x).length\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count the number of occurrences of a number in a given list.\n    def frequency(a : List[Long], x : Long) : Long = {\n        var count = 0\n        for (i <- a) {\n            if (i == x) count += 1\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (4l)) == (0l));\n    assert(frequency((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 3l.toLong, 4l.toLong)), (3l)) == (3l));\n    assert(frequency((List[Long](0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 1l.toLong, 2l.toLong)), (1l)) == (2l));\n    }\n\n}\n",
      "timestamp": 1665510011,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}