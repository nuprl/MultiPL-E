{
  "name": "mbpp_720_add_dict_to_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to add a map to the tuple. The output should be a tuple.\n    def addDictToTuple(test_tup : Long, test_dict : Map[String,Long]) : Either[Long, Map[String,Long]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addDictToTuple((4l, 5l, 6l), (Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))).equals((4l, 5l, 6l, Map[String,Long](\"MSAM\" -> 1l, \"is\" -> 2l, \"best\" -> 3l))));\n    assert(addDictToTuple((1l, 2l, 3l), (Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))).equals((1l, 2l, 3l, Map[String,Long](\"UTS\" -> 2l, \"is\" -> 3l, \"Worst\" -> 4l))));\n    assert(addDictToTuple((8l, 9l, 10l), (Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))).equals((8l, 9l, 10l, Map[String,Long](\"POS\" -> 3l, \"is\" -> 4l, \"Okay\" -> 5l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val tup = (test_tup, test_dict)\n        Right(tup._2)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Your code goes here\n        Right(test_dict)",
    "        val new_dict = test_dict + (\"test_key\" -> test_tup)\n        Right(new_dict)",
    "        if (test_tup == 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        // Add your code here\n        return Right(test_dict)",
    "        if (test_tup == 0) {\n            return Right(test_dict)\n        }\n        else {\n            return Left(test_tup)\n        }",
    "        if (test_tup == 0) {\n            return Right(test_dict)\n        } else {\n            return Left(test_tup)\n        }",
    "        if (test_tup < 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        val new_tup = (test_tup, test_dict)\n        return Right(new_tup._2)",
    "        // Write your code here\n        Right(test_dict)",
    "        // Write your code here\n        Right(test_dict)",
    "        Right(test_dict)",
    "        if (test_tup > 0) {\n            Right(test_dict)\n        } else {\n            Left(test_tup)\n        }",
    "        // Write your code here\n        Right(test_dict)",
    "        return Right(test_dict)",
    "        val new_tup = (test_tup, test_dict)\n        Right(new_tup)",
    "        Right(test_dict)",
    "        if (test_tup > 0) {\n            Left(test_tup)\n        } else {\n            Right(test_dict)\n        }"
  ]
}