{
  "name": "mbpp_557_toggle_string",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to toggle the case of all characters in a string.\n    def toggleString(string : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(toggleString((\"Python\")).equals((\"pYTHON\")));\n    assert(toggleString((\"Pangram\")).equals((\"pANGRAM\")));\n    assert(toggleString((\"LIttLE\")).equals((\"liTTle\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        val sb = new StringBuilder\n        for (c <- string) {\n            if (c.isUpper) sb.append(c.toLower)\n            else sb.append(c.toUpper)\n        }\n        sb.toString",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        var result = \"\"\n        for (c <- string) {\n            if (c.isUpper) result += c.toLower\n            else result += c.toUpper\n        }\n        result",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(x => if (x.isUpper) x.toLower else x.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        var result = \"\"\n        for (c <- string) {\n            if (c.isUpper) result += c.toLower\n            else result += c.toUpper\n        }\n        result",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)",
    "        string.map(c => if (c.isUpper) c.toLower else c.toUpper)"
  ]
}