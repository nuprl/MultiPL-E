{
  "name": "mbpp_11_remove_Occ",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val s1 = s.substring(0, first)\n        val s2 = s.substring(first + 1, last)\n        val s3 = s.substring(last + 1, s.length)\n        s1 + s2 + s3\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s.toList\n        var chr = ch.toList\n        var i = 0\n        while(i < str.length) {\n            if(str(i) == chr(0)) {\n                str = str.patch(i, Nil, 1)\n                i -= 1\n            }\n            i += 1\n        }\n        str.mkString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) s.tail.reverse.tail.reverse\n        else s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzr591_2a.scala:11)\n\tat Problem.main(tmpzr591_2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_zs_tnhz.scala:12)\n\tat Problem.main(tmp_zs_tnhz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var res = s\n        if (s.contains(ch)) {\n            res = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1)\n            if (res.contains(ch)) res = res.substring(0, res.lastIndexOf(ch)) + res.substring(res.lastIndexOf(ch) + 1)\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val s1 = s.substring(0, first)\n        val s2 = s.substring(first + 1, last)\n        val s3 = s.substring(last + 1)\n        s1 + s2 + s3\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        val s1 = s.substring(0, first)\n        val s2 = s.substring(first + 1, last)\n        val s3 = s.substring(last + 1)\n        s1 + s2 + s3\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        var i = 0\n        while (i < str.length) {\n            if (str(i) == ch(0)) {\n                str = str.substring(0, i) + str.substring(i + 1)\n                i -= 1\n            }\n            i += 1\n        }\n        i = str.length - 1\n        while (i >= 0) {\n            if (str(i) == ch(0)) {\n                str = str.substring(0, i) + str.substring(i + 1)\n            }\n            i -= 1\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) s.tail.reverse.tail.reverse\n        else s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzr591_2a.scala:11)\n\tat Problem.main(tmpzr591_2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) {\n            s\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var result = s\n        result = result.replaceFirst(ch, \"\")\n        result = result.reverse.replaceFirst(ch, \"\").reverse\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s.replaceFirst(ch, \"\")\n        str = str.substring(0, str.lastIndexOf(ch)) + str.substring(str.lastIndexOf(ch) + 1)\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var res = s.replaceFirst(ch, \"\")\n        res = res.reverse.replaceFirst(ch, \"\").reverse\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return s\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 1\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:9)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:8)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:8)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:9)\n\tat Problem$.main(tmpiqbm44xt.scala:12)\n\tat Problem.main(tmpiqbm44xt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_zs_tnhz.scala:12)\n\tat Problem.main(tmp_zs_tnhz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder\n        var i = 0\n        var first = true\n        var last = false\n        while (i < s.length) {\n            if (s(i) == ch(0)) {\n                if (first) {\n                    first = false\n                } else {\n                    last = true\n                }\n            } else {\n                if (last) {\n                    sb.append(s(i))\n                }\n            }\n            i += 1\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp857vl02u.scala:27)\n\tat Problem.main(tmp857vl02u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) s.replace(ch, \"\")\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) s.replace(ch, \"\")\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_zs_tnhz.scala:12)\n\tat Problem.main(tmp_zs_tnhz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) {\n            s\n        } else if (first == last) {\n            s.substring(0, first) + s.substring(first + 1)\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        var i = str.indexOf(ch)\n        if (i != -1) {\n            str = str.substring(0, i) + str.substring(i + 1)\n        }\n        i = str.lastIndexOf(ch)\n        if (i != -1) {\n            str = str.substring(0, i) + str.substring(i + 1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder()\n        var first = true\n        var last = false\n        for (i <- 0 until s.length) {\n            if (s(i) == ch(0)) {\n                if (first) {\n                    first = false\n                } else {\n                    last = true\n                }\n            } else {\n                if (last) {\n                    sb.append(s(i))\n                }\n            }\n        }\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2czybsto.scala:25)\n\tat Problem.main(tmp2czybsto.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return s.substring(1)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return s.substring(0, s.length - 1)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp61wykbr6.scala:12)\n\tat Problem.main(tmp61wykbr6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.indexOf(ch) == 0) {\n            str = str.substring(1)\n        }\n        if (str.lastIndexOf(ch) == str.length - 1) {\n            str = str.substring(0, str.length - 1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvm7yj_e2.scala:16)\n\tat Problem.main(tmpvm7yj_e2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length() == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return s.substring(1)\n        if (s.charAt(s.length() - 1) == ch.charAt(0)) return s.substring(0, s.length() - 1)\n        s.charAt(0) + removeOcc(s.substring(1, s.length() - 1), ch) + s.charAt(s.length() - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmppsvy1pfi.scala:12)\n\tat Problem.main(tmppsvy1pfi.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return s\n        if (s.head.toString == ch) return removeOcc(s.tail, ch)\n        if (s.last.toString == ch) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) return s\n        if (index == lastIndex) return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var res = s\n        var i = s.indexOf(ch)\n        if (i != -1) {\n            res = s.substring(0, i) + s.substring(i + 1)\n        }\n        i = res.lastIndexOf(ch)\n        if (i != -1) {\n            res = res.substring(0, i) + res.substring(i + 1)\n        }\n        return res\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) \"\"\n        else if (s.head == ch.head) removeOcc(s.tail, ch)\n        else if (s.last == ch.head) removeOcc(s.init, ch)\n        else s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return s\n        if (s.head == ch.head) return s.tail\n        if (s.last == ch.head) return s.init\n        s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpy8kedrlj.scala:12)\n\tat Problem.main(tmpy8kedrlj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var i = 0\n        var j = s.length - 1\n        var flag = false\n        while (i < s.length && s(i) != ch(0)) {\n            i += 1\n        }\n        while (j >= 0 && s(j) != ch(0)) {\n            j -= 1\n        }\n        if (i == s.length || j == -1) return s\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) {\n            s\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        var index = str.indexOf(ch)\n        if (index != -1) {\n            str = str.substring(0, index) + str.substring(index + 1)\n        }\n        index = str.lastIndexOf(ch)\n        if (index != -1) {\n            str = str.substring(0, index) + str.substring(index + 1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) removeOcc(s.tail, ch)\n        else if (s.last.toString == ch) removeOcc(s.init, ch)\n        else s\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9yh7dl_v.scala:12)\n\tat Problem.main(tmp9yh7dl_v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.substring(0, str.lastIndexOf(ch)) + str.substring(str.lastIndexOf(ch) + 1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_zs_tnhz.scala:12)\n\tat Problem.main(tmp_zs_tnhz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var res = s\n        if (s.indexOf(ch) != -1) {\n            res = s.substring(0, s.indexOf(ch)) + s.substring(s.indexOf(ch) + 1)\n        }\n        if (res.lastIndexOf(ch) != -1) {\n            res = res.substring(0, res.lastIndexOf(ch)) + res.substring(res.lastIndexOf(ch) + 1)\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        if (i == -1) s\n        else if (i == j) s.substring(0, i) + s.substring(i + 1)\n        else s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.substring(0, str.lastIndexOf(ch)) + str.substring(str.lastIndexOf(ch) + 1)\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length() == 0) \"\"\n        else if (s.charAt(0) == ch.charAt(0)) removeOcc(s.substring(1), ch)\n        else s.charAt(0) + removeOcc(s.substring(1), ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1)\n            return s\n        return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.replace(ch, \"\")\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1, s.length)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1)\n            return s\n        if (index == lastIndex)\n            return s.substring(0, index) + s.substring(index + 1)\n        s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var index = s.indexOf(ch)\n        var index2 = s.lastIndexOf(ch)\n        if (index == -1) {\n            return s\n        }\n        if (index == index2) {\n            return s.substring(0, index) + s.substring(index + 1)\n        }\n        return s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        return sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpvoigpk1m.scala:12)\n\tat Problem.main(tmpvoigpk1m.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        sb.deleteCharAt(s.indexOf(ch))\n        sb.deleteCharAt(s.lastIndexOf(ch))\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_zs_tnhz.scala:12)\n\tat Problem.main(tmp_zs_tnhz.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) s.tail.reverse.tail.reverse\n        else s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzr591_2a.scala:11)\n\tat Problem.main(tmpzr591_2a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return \"\"\n        if (s.length == 1) return if (s(0) == ch(0)) \"\" else s\n        if (s(0) == ch(0)) return removeOcc(s.substring(1), ch)\n        if (s(s.length - 1) == ch(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s(0) + removeOcc(s.substring(1, s.length - 1), ch) + s(s.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) \"\"\n        else if (s.head.toString == ch) removeOcc(s.tail, ch)\n        else if (s.last.toString == ch) removeOcc(s.init, ch)\n        else s\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9yh7dl_v.scala:12)\n\tat Problem.main(tmp9yh7dl_v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) {\n            s.substring(0, first) + s.substring(first + 1)\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return s\n        if (s.charAt(0) == ch.charAt(0)) return removeOcc(s.substring(1), ch)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return removeOcc(s.substring(0, s.length - 1), ch)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 1\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:9)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:8)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:8)\n\tat Problem$.removeOcc(tmpiqbm44xt.scala:9)\n\tat Problem$.main(tmpiqbm44xt.scala:12)\n\tat Problem.main(tmpiqbm44xt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.substring(0, str.lastIndexOf(ch)) + str.substring(str.lastIndexOf(ch) + 1)\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val len = s.length\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1, len)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) {\n            s\n        } else if (first == last) {\n            s.substring(0, first) + s.substring(first + 1)\n        } else {\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        s.replaceFirst(ch, \"\").reverse.replaceFirst(ch, \"\").reverse\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1)\n            s\n        else\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) {\n            return s\n        }\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return \"\"\n        if (s.charAt(0) == ch.charAt(0)) return s.substring(1)\n        if (s.charAt(s.length - 1) == ch.charAt(0)) return s.substring(0, s.length - 1)\n        s.charAt(0) + removeOcc(s.substring(1, s.length - 1), ch) + s.charAt(s.length - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp61wykbr6.scala:12)\n\tat Problem.main(tmp61wykbr6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        var i = str.indexOf(ch)\n        if (i != -1) {\n            str = str.substring(0, i) + str.substring(i + 1)\n        }\n        var j = str.lastIndexOf(ch)\n        if (j != -1) {\n            str = str.substring(0, j) + str.substring(j + 1)\n        }\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var i = 0\n        var j = s.length - 1\n        var first = -1\n        var last = -1\n        while(i < s.length) {\n            if(s(i) == ch(0)) {\n                first = i\n                break\n            }\n            i += 1\n        }\n        while(j >= 0) {\n            if(s(j) == ch(0)) {\n                last = j\n                break\n            }\n            j -= 1\n        }\n        if(first == -1 && last == -1) return s\n        else if(first == -1) return s.substring(0, last)\n        else if(last == -1) return s.substring(first + 1)\n        else return s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5v5ly1cp.scala:13:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5v5ly1cp.scala:20:16 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m                break\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Not found: break\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.replaceAll(ch, \"\")\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123252,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index1 = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index1 == -1) return s\n        if (index1 == index2) return s.replace(ch, \"\")\n        s.substring(0, index1) + s.substring(index1 + 1, index2) + s.substring(index2 + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == lastIndex) s.replace(ch, \"\")\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        val i = str.indexOf(ch)\n        if (i != -1) str = str.substring(0, i) + str.substring(i + 1)\n        val j = str.lastIndexOf(ch)\n        if (j != -1) str = str.substring(0, j) + str.substring(j + 1)\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var i = 0\n        var j = s.length - 1\n        var flag = true\n        while(i < s.length && flag) {\n            if(s(i) == ch(0)) {\n                flag = false\n            } else {\n                i += 1\n            }\n        }\n        flag = true\n        while(j >= 0 && flag) {\n            if(s(j) == ch(0)) {\n                flag = false\n            } else {\n                j -= 1\n            }\n        }\n        if(i == s.length || j == -1) {\n            return s\n        }\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        return str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var result = s\n        result = result.replaceFirst(ch, \"\")\n        result = result.reverse.replaceFirst(ch, \"\").reverse\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123243,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1)\n            s\n        else\n            s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) {\n            s\n        } else if (index == lastIndex) {\n            s.substring(0, index) + s.substring(index + 1)\n        } else {\n            s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) {\n            s\n        } else if (index == lastIndex) {\n            s.substring(0, index) + s.substring(index + 1)\n        } else {\n            s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.replaceFirst(ch, \"\")\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val i = s.indexOf(ch)\n        val j = s.lastIndexOf(ch)\n        s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1, s.length)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123251,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if(first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var sb = new StringBuilder(s)\n        var i = sb.indexOf(ch)\n        if (i != -1) sb.deleteCharAt(i)\n        i = sb.lastIndexOf(ch)\n        if (i != -1) sb.deleteCharAt(i)\n        sb.toString\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val lastIndex = s.lastIndexOf(ch)\n        if (index == -1) s\n        else if (index == lastIndex) s.substring(0, index) + s.substring(index + 1)\n        else s.substring(0, index) + s.substring(index + 1, lastIndex) + s.substring(lastIndex + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510494,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s\n        var s2 = s\n        var i = s1.indexOf(ch)\n        if (i != -1) {\n            s1 = s1.substring(0, i) + s1.substring(i + 1)\n        }\n        i = s2.lastIndexOf(ch)\n        if (i != -1) {\n            s2 = s2.substring(0, i) + s2.substring(i + 1)\n        }\n        s1 + s2\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpriy37ttc.scala:19)\n\tat Problem.main(tmpriy37ttc.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val index = s.indexOf(ch)\n        val index2 = s.lastIndexOf(ch)\n        if (index == -1) {\n            s\n        } else {\n            s.substring(0, index) + s.substring(index + 1, index2) + s.substring(index2 + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var s1 = s.replaceFirst(ch, \"\")\n        s1 = s1.reverse.replaceFirst(ch, \"\").reverse\n        return s1\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        str = str.replaceFirst(ch, \"\")\n        str = str.reverse.replaceFirst(ch, \"\").reverse\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        if (s.length == 0) return s\n        if (s.length == 1) return if (s == ch) \"\" else s\n        if (s.head == ch) return removeOcc(s.tail, ch)\n        if (s.last == ch) return removeOcc(s.init, ch)\n        s.head + removeOcc(s.tail, ch)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp_sfn5_c4.scala:8:12 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mif\u001b[0m (s.head == ch) \u001b[33mreturn\u001b[0m removeOcc(s.tail, ch)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m          Values of types Char and String cannot be compared with == or !=\n\u001b[31m\u001b[31m-- Error: /tmp/tmp_sfn5_c4.scala:9:12 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mif\u001b[0m (s.last == ch) \u001b[33mreturn\u001b[0m removeOcc(s.init, ch)\n\u001b[31m\u001b[31m  |\u001b[0m            ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m          Values of types Char and String cannot be compared with == or !=\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val (first, last) = s.zipWithIndex.partition(_._1 == ch.charAt(0))\n        if (first.isEmpty) s\n        else {\n            val firstIndex = first.head._2\n            val lastIndex = last.last._2\n            s.substring(0, firstIndex) + s.substring(firstIndex + 1, lastIndex) + s.substring(lastIndex + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmps81tfn2u.scala:15)\n\tat Problem.main(tmps81tfn2u.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var i = s.indexOf(ch)\n        var j = s.lastIndexOf(ch)\n        if (i == -1) return s\n        if (i == j) return s.substring(0, i) + s.substring(i + 1)\n        return s.substring(0, i) + s.substring(i + 1, j) + s.substring(j + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123256,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) return s\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123242,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.contains(ch)) {\n            str = str.replaceFirst(ch, \"\")\n            str = str.reverse.replaceFirst(ch, \"\").reverse\n        }\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) s\n        else if (first == last) s.substring(0, first) + s.substring(first + 1)\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        var str = s\n        if (str.indexOf(ch) == 0) str = str.substring(1)\n        if (str.lastIndexOf(ch) == str.length - 1) str = str.substring(0, str.length - 1)\n        str\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1666123257,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpw8i3yvdn.scala:12)\n\tat Problem.main(tmpw8i3yvdn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1 || last == -1) s\n        else s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove first and last occurrence of a given character from the string.\n    def removeOcc(s : String, ch : String) : String = {\n        val first = s.indexOf(ch)\n        val last = s.lastIndexOf(ch)\n        if (first == -1) return s\n        if (first == last) return s.substring(0, first) + s.substring(first + 1)\n        s.substring(0, first) + s.substring(first + 1, last) + s.substring(last + 1)\n    }\n    def main(args: Array[String]) = {\n    assert(removeOcc((\"hello\"), (\"l\")).equals((\"heo\")));\n    assert(removeOcc((\"abcda\"), (\"a\")).equals((\"bcd\")));\n    assert(removeOcc((\"PHP\"), (\"P\")).equals((\"H\")));\n    }\n\n}\n",
      "timestamp": 1665510495,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}