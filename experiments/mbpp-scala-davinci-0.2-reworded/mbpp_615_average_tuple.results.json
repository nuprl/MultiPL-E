{
  "name": "mbpp_615_average_tuple",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41_ku39w.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41_ku39w.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / i) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41_ku39w.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp41_ku39w.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.toString.toInt).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2) / 2.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4icjjx39.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4icjjx39.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4icjjx39.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:12:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0.0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:12:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuple = (1 to nums).map(x => (x, x)).toList\n        tuple.map(x => (x._1 + x._2).toFloat / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_3m5uyy.scala:6:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuple\u001b[0m = (\u001b[31m1\u001b[0m to nums).map(\u001b[36mx\u001b[0m => (x, x)).toList\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_3m5uyy.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3_3m5uyy.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dmxt2h4.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dmxt2h4.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5dmxt2h4.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2, 3), (4, 5, 6), (7, 8, 9))\n        val result = tuples.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7grf6e5j.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7grf6e5j.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7grf6e5j.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val sum = numsList2.sum\n        val result = numsList2.map(x => x.toFloat / sum)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq9nnjwpd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq9nnjwpd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq9nnjwpd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = (1 to nums).map(x => (x, x + 1)).toList\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxyp9k9qq.scala:6:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = (\u001b[31m1\u001b[0m to nums).map(\u001b[36mx\u001b[0m => (x, x + \u001b[31m1\u001b[0m)).toList\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxyp9k9qq.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxyp9k9qq.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").map(_.toInt).toList\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleSum = numsTuple.map(x => x.sum)\n        val numsTupleAvg = numsTupleSum.map(x => x.toFloat / 3)\n        numsTupleAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510642,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtlp3v9r.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtlp3v9r.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgtlp3v9r.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val sum = nums.toString.map(_.asDigit).sum\n        val avg = sum.toFloat / nums.toString.length\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfkboeuc.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfkboeuc.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmfkboeuc.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val num = nums.toString.split(\"\").map(_.toInt).toList\n        val sum = num.foldLeft(0)(_ + _)\n        val len = num.length\n        val avg = sum.toFloat / len\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpej7755wi.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpej7755wi.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpej7755wi.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            val sum = tuple._1 + tuple._2 + tuple._3\n            list += sum / 3\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvvasnzp8.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4zdgvysd.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum / i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            var count = 0\n            for (j <- 1 to i) {\n                if (i % j == 0) {\n                    sum += j\n                    count += 1\n                }\n            }\n            list = list :+ (sum.toFloat / count)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrelz5jm.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrelz5jm.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvrelz5jm.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmetvzc4d.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmetvzc4d.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmetvzc4d.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsList2 = numsList.map(x => List(x, x))\n        val numsList3 = numsList2.flatten\n        val numsList4 = numsList3.map(x => List(x, x))\n        val numsList5 = numsList4.flatten\n        val numsList6 = numsList5.map(x => List(x, x))\n        val numsList7 = numsList6.flatten\n        val numsList8 = numsList7.map(x => List(x, x))\n        val numsList9 = numsList8.flatten\n        val numsList10 = numsList9.map(x => List(x, x))\n        val numsList11 = numsList10.flatten\n        val numsList12 = numsList11.map(x => List(x, x))\n        val numsList13 = numsList12.flatten\n        val numsList14 = numsList13.map(x => List(x, x))\n        val numsList15 = numsList14.flatten\n        val numsList16 = numsList15.map(x => List(x, x))\n        val numsList17 = numsList16.flatten\n        val numsList18 = numsList17.map(x => List(x, x))\n        val numsList19 = numsList18.flatten\n        val numsList20 = numsList19.map(x => List(x, x))\n        val numsList21 = numsList20.flatten\n        val numsList22 = numsList21.map(x => List(x, x))\n        val numsList23 = numsList22.flatten\n        val numsList24 = numsList23.map(x => List(x, x))\n        val numsList25 = numsList24.flatten\n        val numsList26 = numsList25.map(x => List(x, x))\n        val numsList27 = num\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp51z28otd.scala:32:25 ------------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsList27\u001b[0m = num\n\u001b[31m\u001b[31m   |\u001b[0m                         ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         Not found: num\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp51z28otd.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp51z28otd.scala:35:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp51z28otd.scala:36:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsListTuple = numsList.sliding(2, 2).toList\n        numsListTuple.map(x => (x(0) + x(1)) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfuccojew.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfuccojew.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfuccojew.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1, i + 2)\n            list += tuple._1 + tuple._2 + tuple._3\n        }\n        list.toList.map(x => x / 3)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxx0pyhp.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxx0pyhp.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfxx0pyhp.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListLen = numsList.length\n        val numsListSum = numsList.sum\n        val numsListAvg = numsListSum / numsListLen\n        val numsListAvgList = numsListAvg.toString.toList.map(_.toString.toFloat)\n        numsListAvgList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped7_02tp.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped7_02tp.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmped7_02tp.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val lst = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val lst2 = ListBuffer[Float]()\n            for (j <- 1 to nums) {\n                lst2 += (i * j).toFloat\n            }\n            lst += lst2.sum / lst2.length\n        }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8fgaexr.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8fgaexr.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8fgaexr.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp8fgaexr.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List.range(1, nums + 1)\n        val t = l.map(x => (x, x + 1))\n        t.map(x => (x._1 + x._2).toFloat / 2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123944,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpt48qdvd2.scala:6:39 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ml\u001b[0m = List.range(\u001b[31m1\u001b[0m, nums + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt48qdvd2.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt48qdvd2.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt48qdv",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = list :+ (sum / nums.toFloat)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8247gh7m.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8247gh7m.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8247gh7m.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8247gh7m.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val lst = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            lst += num.sum / num.length\n        }\n        lst.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rh50soc.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rh50soc.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1rh50soc.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = (1 to nums).map(x => (x, x + 1, x + 2)).toList\n        tuples.map(x => (x._1 + x._2 + x._3) / 3.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:6:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = (\u001b[31m1\u001b[0m to nums).map(\u001b[36mx\u001b[0m => (x, x + \u001b[31m1\u001b[0m, x + \u001b[31m2\u001b[0m)).toList\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            var count = 0\n            for (j <- 1 to i) {\n                sum += j\n                count += 1\n            }\n            lst = lst :+ (sum / count)\n        }\n        return lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4txrpoe9.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4txrpoe9.scala:14:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            lst = lst :+ (sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4txrpoe9.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4txrpoe9.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mF",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum / i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mF",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(y => y.toFloat))\n        val numsListTupleFloatAverage = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp9_o3hsg.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp9_o3hsg.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp9_o3hsg.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val lst = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums)\n            val num2 = scala.util.Random.nextInt(nums)\n            val num3 = scala.util.Random.nextInt(nums)\n            val num4 = scala.util.Random.nextInt(nums)\n            val num5 = scala.util.Random.nextInt(nums)\n            val num6 = scala.util.Random.nextInt(nums)\n            val num7 = scala.util.Random.nextInt(nums)\n            val num8 = scala.util.Random.nextInt(nums)\n            val num9 = scala.util.Random.nextInt(nums)\n            val num10 = scala.util.Random.nextInt(nums)\n            val num11 = scala.util.Random.nextInt(nums)\n            val num12 = scala.util.Random.nextInt(nums)\n            val num13 = scala.util.Random.nextInt(nums)\n            val num14 = scala.util.Random.nextInt(nums)\n            val num15 = scala.util.Random.nextInt(nums)\n            val num16 = scala.util.Random.nextInt(nums)\n            val num17 = scala.util.Random.nextInt(nums)\n            val num18 = scala.util.Random.nextInt(nums)\n            val num19 = scala.util.Random.nextInt(nums)\n            val num20 = scala.util.Random.nextInt(nums)\n            val num21 = scala.util.Random.nextInt(nums)\n            val num22 = scala.util.Random.nextInt(nums)\n            val num23 = scala.util.Random.nextInt(nums)\n            val num24 = scala.util.Random.nextInt(nums)\n            val num25 = scala.util.Random.nextInt(nums)\n            val num26 = scala.util.Random.next\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123947,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp40oq2xca.scala:42:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m42 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp40oq2xca.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp40oq2xca.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp40oq2xca.scala:9:49 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum2\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                 ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                 Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                 Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp40oq2xca.scala:10:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum3\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                 Found:    (nums : Long)\n\u001b[31m   |\u001b[0m                                                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer exp",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        var avg = 0.0\n        var avgList = List[Float]()\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n            avg = sum / count.toFloat\n            avgList = avgList :+ avg\n        }\n        avgList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppuhgv09a.scala:10:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppuhgv09a.scala:14:33 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            avgList = avgList :+ avg\n\u001b[31m\u001b[31m   |\u001b[0m                                 ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                 Found:    (avg : Double)\n\u001b[31m   |\u001b[0m                                 Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppuhgv09a.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppuhgv09a.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.split(\"\").toList.map(_.toInt)\n        val nums3 = nums2.map(x => x * x)\n        val nums4 = nums3.map(x => x.toString.split(\"\").toList.map(_.toInt))\n        val nums5 = nums4.map(x => x.sum)\n        val nums6 = nums5.map(x => x.toFloat)\n        val nums7 = nums6.map(x => x / nums6.length)\n        nums7\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkot071a4.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkot071a4.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkot071a4.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListSize\n        val numsListAverageList = List(numsListAverage)\n        val numsListAverageListSize = numsListAverageList.size\n        val numsListAverageListSum = numsListAverageList.sum\n        val numsListAverageListAverage = numsListAverageListSum.toFloat / numsListAverageListSize\n        val numsListAverageListAverageList = List(numsListAverageListAverage)\n        val numsListAverageListAverageListSize = numsListAverageListAverageList.size\n        val numsListAverageListAverageListSum = numsListAverageListAverageList.sum\n        val numsListAverageListAverageListAverage = numsListAverageListAverageListSum.toFloat / numsListAverageListAverageListSize\n        val numsListAverageListAverageListAverageList = List(numsListAverageListAverageListAverage)\n        val numsListAverageListAverageListAverageListSize = numsListAverageListAverageListAverageList.size\n        val numsListAverageListAverageListAverageListSum = numsListAverageListAverageListAverageList.sum\n        val numsListAverageListAverageListAverageListAverage = numsListAverageListAverageListAverageListSum.toFloat / numsListAverageListAverageListAverageListSize\n        val numsListAverageListAverageListAverageListAverageList = List(numsListAverageListAverageListAverageListAverage)\n        val numsListAverageListAverageListAverageListAverageListSize = numsListAverageListAverageListAverageListAverageList.size\n        val numsListAverageListAverageListAverageListAverageListSum = numsListAverageListAverageListAverageListAverageList.sum\n        val numsListAverageListAverageListAverageListAverageListAverage = numsListAverageListAverageListAverageListAverageListSum.toFloat / numsListAverageListAverageListAverageListAverageListSize\n        val numsListAverageListAverageListAverageListAverageListAverageList = List(numsListAverageListAverageList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpm0qv53jy.scala:27:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0qv53jy.scala:27:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0qv53jy.scala:29:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0qv53jy.scala:30:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums.toFloat) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums).toFloat\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums).toFloat\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdpu1g5v4.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst : List[Float] = List()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums)\n            val den = scala.util.Random.nextInt(nums)\n            lst = lst :+ (num.toFloat / den.toFloat)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbn443xs9.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbn443xs9.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbn443xs9.scala:9:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mden\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbn443xs9.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o_ug3sl.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o_ug3sl.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2o_ug3sl.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0L\n        var count = 0L\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95vh6euw.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95vh6euw.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp95vh6euw.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val result = tuples.map(x => x.productIterator.map(_.asInstanceOf[Int]).sum.toFloat / x.productIterator.map(_.asInstanceOf[Int]).size)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvt7awk0v.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvt7awk0v.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvt7awk0v.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        for (i <- 1 to nums) {\n            sum += i\n        }\n        var avg = sum.toFloat / nums.toFloat\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            list = list :+ avg\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwkfl5fv0.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwkfl5fv0.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwkfl5fv0.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwkfl5fv0.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleList = numsTuple.map(x => x.sum.toFloat / x.length)\n        numsTupleList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0stz54l.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0stz54l.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps0stz54l.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var l = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n            }\n            l = l :+ (sum / nums.toInt)\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15wk0tgu.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            l = l :+ (sum / nums.toInt)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15wk0tgu.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp15wk0tgu.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        tuples.map(x => (x._1 + x._2).toFloat / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123959,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqvefnb83.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqvefnb83.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqvefnb83.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(x => x.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(y => y.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgj50c13.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgj50c13.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgj50c13.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdratbjr.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdratbjr.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzdratbjr.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = list :+ (sum.toFloat / nums)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fhans1x.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fhans1x.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fhans1x.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0fhans1x.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var l : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var s : Float = 0\n            for (j <- 1 to i) {\n                s += j\n            }\n            l = l :+ s / i\n        }\n        return l\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp0iywvs.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp0iywvs.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgp0iywvs.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum / i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_fnn4_jy.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_fnn4_jy.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / i) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_fnn4_jy.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_fnn4_jy.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numList = nums.toString.toList.map(_.asDigit)\n        val numList2 = numList.map(x => pow(x, numList.length).toLong)\n        val sum = numList2.sum\n        val numList3 = sum.toString.toList.map(_.asDigit)\n        val numList4 = numList3.map(x => pow(x, numList3.length).toLong)\n        val sum2 = numList4.sum\n        val numList5 = sum2.toString.toList.map(_.asDigit)\n        val numList6 = numList5.map(x => pow(x, numList5.length).toLong)\n        val sum3 = numList6.sum\n        val numList7 = sum3.toString.toList.map(_.asDigit)\n        val numList8 = numList7.map(x => pow(x, numList7.length).toLong)\n        val sum4 = numList8.sum\n        val numList9 = sum4.toString.toList.map(_.asDigit)\n        val numList10 = numList9.map(x => pow(x, numList9.length).toLong)\n        val sum5 = numList10.sum\n        val numList11 = sum5.toString.toList.map(_.asDigit)\n        val numList12 = numList11.map(x => pow(x, numList11.length).toLong)\n        val sum6 = numList12.sum\n        val numList13 = sum6.toString.toList.map(_.asDigit)\n        val numList14 = numList13.map(x => pow(x, numList13.length).toLong)\n        val sum7 = numList14.sum\n        val numList15 = sum7.toString.toList.map(_.asDigit)\n        val numList16 = numList15.map(x => pow(x, numList15.length).toLong)\n        val sum8 = numList16.sum\n        val numList17 = sum8.toString.toList.map(_.asDig\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp5jtcv8o1.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp5jtcv8o1.scala:30:51 ------------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumList17\u001b[0m = sum8.toString.toList.map(_.asDig\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                     value asDig is not a member of Char\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jtcv8o1.scala:31:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jtcv8o1.scala:33:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5jtcv8o1.scala:34:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 until nums) {\n            val tuple = (i, i + 1)\n            val average = (tuple._1 + tuple._2) / 2.0f\n            list += average\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz0urb44_.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz0urb44_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpz0urb44_.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when co",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6),(7,8),(9,10))\n        val avg = tuples.map(x => (x._1 + x._2) / 2.0f)\n        avg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp96g6n54_.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp96g6n54_.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp96g6n54_.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(100)\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ykfcndo.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ykfcndo.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ykfcndo.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = ListBuffer[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            val s = nums.toString.substring(i, i + 1).toInt\n            l += s.toFloat\n        }\n        l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgksa3t23.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgksa3t23.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgksa3t23.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.split(\"\").map(_.toInt)\n        val nums3 = nums2.map(x => pow(x, nums2.length).toLong)\n        val nums4 = nums3.sum\n        if (nums4 == nums) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpugi7_n6f.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mif\u001b[0m (nums4 == nums) \u001b[31mtrue\u001b[0m \u001b[33melse\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (\u001b[31mtrue\u001b[0m : Boolean)\n\u001b[31m  |\u001b[0m                           Required: List[Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpugi7_n6f.scala:9:37 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mif\u001b[0m (nums4 == nums) \u001b[31mtrue\u001b[0m \u001b[33melse\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                                     ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                     Found:    (\u001b[31mfalse\u001b[0m : Boolean)\n\u001b[31m  |\u001b[0m                                     Required: List[Float]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpugi7_n6f.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpugi7_n6f.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List.range(1, nums + 1)\n        val t = l.zip(l.map(x => x * x))\n        t.map(x => (x._1 + x._2).toFloat / 2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmp7aaz6pf3.scala:6:39 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36ml\u001b[0m = List.range(\u001b[31m1\u001b[0m, nums + \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m  |\u001b[0m                                       ^\u001b[0m\n\u001b[31m  |\u001b[0m                                  No implicit Ordering defined for AnyVal.\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7aaz6pf3.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7aaz6pf3.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7aaz6p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(100)\n            list += num\n        }\n        val tuple = list.toList.grouped(2).toList\n        val result = tuple.map(x => x.sum / x.size)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j_tbwwe.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j_tbwwe.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_j_tbwwe.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat))\n        val numsTupleFloatAvg = numsTupleFloat.map(x => x.sum / x.length)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123962,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5_0d41i8.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var num = nums\n        var list : List[Float] = List()\n        while(num != 0) {\n            var sum = 0\n            var count = 0\n            while(num % 10 != 0) {\n                sum += num % 10\n                count += 1\n                num /= 10\n            }\n            list = (sum.toFloat / count.toFloat) :: list\n            num /= 10\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpryll2nho.scala:12:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                sum += num % \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpryll2nho.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpryll2nho.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpryll2nho.scala:24:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val sum = numsList.sum\n        val avg = sum.toFloat / numsList.length\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4c_gngus.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4c_gngus.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp4c_gngus.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var sum : Long = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123963,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk_lh7lrt.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk_lh7lrt.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk_lh7lrt.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numList = nums.toString.map(_.asDigit).toList\n        val numList2 = numList.map(x => List.fill(x)(x))\n        val numList3 = numList2.map(x => x.sum.toFloat / x.length)\n        numList3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr2p41ep.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr2p41ep.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgr2p41ep.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(nums)\n        val l2 = l.map(x => x.toString.map(_.asDigit).toList)\n        val l3 = l2.map(x => x.map(y => y.toFloat))\n        val l4 = l3.map(x => x.sum / x.length)\n        l4\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5y_pfd3.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5y_pfd3.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpv5y_pfd3.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx6fvyc26.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += random * 100\n            }\n            result = result :+ (sum / nums.toFloat)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123975,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkcvv1zx.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums.toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkcvv1zx.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmkcvv1zx.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleList = numsTuple.groupBy(_._2 % 3).map(_._2).toList\n        val numsTupleListAverage = numsTupleList.map(x => x.map(_._1).sum.toFloat / x.length)\n        numsTupleListAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcobp_983.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcobp_983.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcobp_983.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = result :+ (sum / nums.toFloat)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptg8x3swk.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums.toFloat)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptg8x3swk.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptg8x3swk.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m lon",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / i) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjhx7c7aq.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList\n        val numsListInt = numsList.map(x => x.asDigit)\n        val numsListIntPairs = numsListInt.sliding(2, 2).toList\n        val numsListIntPairsFloat = numsListIntPairs.map(x => x.map(y => y.toFloat))\n        val numsListIntPairsFloatAvg = numsListIntPairsFloat.map(x => x.sum / x.length)\n        numsListIntPairsFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6j3c_mu.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6j3c_mu.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt6j3c_mu.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numList = nums.toString.map(_.asDigit).toList\n        val numTuple = numList.grouped(2).toList\n        numTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tm5njrj.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tm5njrj.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3tm5njrj.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        numsListTupleFloat.map(x => x.sum / x.length)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0_bk5mc.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0_bk5mc.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpm0_bk5mc.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuples = numsList.grouped(2).toList\n        numsTuples.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y0lp98g.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y0lp98g.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5y0lp98g.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:12:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0a8h8hf5.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123960,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvme10p6_.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            result = result :+ (sum / nums)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyx0joe_p.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyx0joe_p.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyx0joe_p.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyx0joe_p.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum : Long = 0\n        var count : Long = 0\n        var result : List[Float] = List()\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n            if (count == 10) {\n                result = (sum.toFloat / count.toFloat) :: result\n                sum = 0\n                count = 0\n            }\n        }\n        if (count != 0) result = (sum.toFloat / count.toFloat) :: result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbc8ruta.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbc8ruta.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbbc8ruta.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            val avg = (tuple._1 + tuple._2) / 2.0f\n            list += avg\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123976,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqahc5ly4.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqahc5ly4.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqahc5ly4.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = nums.toString.map(_.asDigit).toList\n        val l2 = l.grouped(2).toList\n        val l3 = l2.map(x => (x(0) + x(1)) / 2.0f)\n        l3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeec_mi1.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeec_mi1.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeec_mi1.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(nums)\n        val t = l.map(x => (x, x*x))\n        val t2 = t.map(x => (x._1, x._2, x._1*x._1))\n        val t3 = t2.map(x => (x._1, x._2, x._3, x._1*x._1))\n        val t4 = t3.map(x => (x._1, x._2, x._3, x._4, x._1*x._1))\n        val t5 = t4.map(x => (x._1, x._2, x._3, x._4, x._5, x._1*x._1))\n        val t6 = t5.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._1*x._1))\n        val t7 = t6.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._1*x._1))\n        val t8 = t7.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._1*x._1))\n        val t9 = t8.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._1*x._1))\n        val t10 = t9.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._1*x._1))\n        val t11 = t10.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._11, x._1*x._1))\n        val t12\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplt48ma0l.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt48ma0l.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt48ma0l.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt48ma0l.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsListTuple = numsList.grouped(2).toList\n        val numsListTupleFloat = numsListTuple.map(x => x.map(_.toFloat))\n        val numsListTupleFloatAvg = numsListTupleFloat.map(x => x.sum / x.length)\n        numsListTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123977,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3_7eb16.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3_7eb16.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl3_7eb16.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(3).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1), x(2)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2 + x._3) / 3f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk7zlzmik.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk7zlzmik.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk7zlzmik.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(1,2,3,4,5,6,7,8,9,10)\n        val l2 = List(1,2,3,4,5,6,7,8,9,10)\n        val l3 = List(1,2,3,4,5,6,7,8,9,10)\n        val l4 = List(1,2,3,4,5,6,7,8,9,10)\n        val l5 = List(1,2,3,4,5,6,7,8,9,10)\n        val l6 = List(1,2,3,4,5,6,7,8,9,10)\n        val l7 = List(1,2,3,4,5,6,7,8,9,10)\n        val l8 = List(1,2,3,4,5,6,7,8,9,10)\n        val l9 = List(1,2,3,4,5,6,7,8,9,10)\n        val l10 = List(1,2,3,4,5,6,7,8,9,10)\n        val l11 = List(1,2,3,4,5,6,7,8,9,10)\n        val l12 = List(1,2,3,4,5,6,7,8,9,10)\n        val l13 = List(1,2,3,4,5,6,7,8,9,10)\n        val l14 = List(1,2,3,4,5,6,7,8,9,10)\n        val l15 = List(1,2,3,4,5,6,7,8,9,10)\n        val l16 = List(1,2,3,4,5,6,7,8,9,10)\n        val l17 = List(1,2,3,4,5,6,7,8,9,10)\n        val l18 = List(1,2,3,4,5,6,7,8,9,10)\n        val l19 = List(1\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps37asl4i.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:27:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:28:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            lst = (sum.toFloat / nums.toFloat) :: lst\n        }\n        lst.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat5z1a5l.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat5z1a5l.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpat5z1a5l.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 to nums.toInt) {\n            var sum = 0\n            for (j <- 0 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / (i + 1)) :: list\n        }\n        return list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8we07pq_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8we07pq_.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8we07pq_.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            list = (sum / nums.toFloat) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123979,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg20wk7c.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / nums.toFloat) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg20wk7c.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbg20wk7c.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = (sum.toFloat / i.toFloat) :: lst\n        }\n        lst.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz4prg7w.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz4prg7w.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbz4prg7w.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqotc418.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ sum.toFloat / i\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123990,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdt3i9x37.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdt3i9x37.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpdt3i9x37.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(nums)\n            list += num\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4cdm0sf.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4cdm0sf.scala:8:48 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mnum\u001b[0m = scala.util.Random.nextInt(nums)\n\u001b[31m\u001b[31m  |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4cdm0sf.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi4cdm0sf.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsListLen = numsList.length\n        val numsListSum = numsList.sum\n        val numsListAvg = numsListSum / numsListLen\n        val numsListAvgList = numsListAvg.toString.toList.map(x => x.toString.toFloat)\n        numsListAvgList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzd7b17b9.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzd7b17b9.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzd7b17b9.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        var sum = 0.0\n        var count = 0\n        var num = nums\n        while (num > 0) {\n            sum += num % 10\n            count += 1\n            num /= 10\n        }\n        list = (sum / count) :: list\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ho8yvg1.scala:15:16 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        list = (sum / count) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                Found:    Double\n\u001b[31m   |\u001b[0m                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ho8yvg1.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ho8yvg1.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 0 until nums.toInt) {\n            val tuple = (i, i+1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hq6xm9y.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hq6xm9y.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp5hq6xm9y.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i.toFloat)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2va5be_8.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2va5be_8.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2va5be_8.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        for (i <- 1 to nums) {\n            sum += i\n        }\n        var avg = sum / nums\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            list = list :+ (i - avg)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7qdcvcb.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7qdcvcb.scala:12:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m   |\u001b[0m                       Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7qdcvcb.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7qdcvcb.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFl",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123992,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppclt08od.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppclt08od.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppclt08od.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j).toFloat\n            }\n            list = list :+ sum / nums\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoz739l3.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoz739l3.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoz739l3.scala:12:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ sum / nums\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    Double\n\u001b[31m   |\u001b[0m                           Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmoz739l3.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsListTuple = numsList.grouped(2).toList\n        numsListTuple.map(x => (x(0) + x(1))/2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123991,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_u9nvg0q.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_u9nvg0q.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_u9nvg0q.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2),(3,4),(5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmetvzc4d.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmetvzc4d.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmetvzc4d.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val l = tuples.map(x => (x._1 + x._2).toFloat / 2)\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4hm2gjc.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4hm2gjc.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpj4hm2gjc.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum.toFloat / i.toFloat) :: list\n        }\n        return list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpggakeyok.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpggakeyok.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpggakeyok.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsAverage = numsTuple.map(x => (x(0) + x(1)) / 2.0f)\n        numsAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt08ip8m0.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt08ip8m0.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpt08ip8m0.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = (sum.toFloat / i) :: lst\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9milcr5.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9milcr5.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpc9milcr5.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3),(4,5,6),(7,8,9))\n        val result = ListBuffer[Float]()\n        for (tuple <- tuples) {\n            var sum = 0\n            for (num <- tuple) {\n                sum += num\n            }\n            result += sum.toFloat / tuple.length\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph4svhv4y.scala:10:24 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (num <- tuple) {\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        value foreach is not a member of (Int, Int, Int)\n\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmph4svhv4y.scala:13:42 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            result += sum.toFloat / tuple.length\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                         value length is not a member of (Int, Int, Int)\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph4svhv4y.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmph4svhv4y.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        var i : Long = 0\n        while (i < nums) {\n            var j : Long = 0\n            var sum : Long = 0\n            while (j < nums) {\n                sum += i * j\n                j += 1\n            }\n            result = result :+ (sum.toFloat / nums)\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgaa_rr2h.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgaa_rr2h.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgaa_rr2h.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var res = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += Random.nextInt(100)\n            }\n            res = (sum / nums).toFloat :: res\n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123993,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp6f9ubjor.scala:10:20 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                sum += Random.nextInt(\u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            value += is not a member of Double - did you mean Double.!=?\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6f9ubjor.scala:10:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                sum += Random.nextInt(\u001b[31m100\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Not found: Random\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6f9ubjor.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6f9ubjor.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsListSum = numsList.sum\n        val numsListLength = numsList.length\n        val numsListAverage = numsListSum.toFloat / numsListLength.toFloat\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppcqdmucc.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppcqdmucc.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppcqdmucc.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            var count = 0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n                count += 1\n            }\n            result = (sum / count) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjn3hhkr.scala:14:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m            result = (sum / count) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjn3hhkr.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphjn3hhkr.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling wit",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4nostgf.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4nostgf.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / i) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4nostgf.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa4nostgf.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.sliding(2, 2).toList\n        val numsTupleAverage = numsTuple.map(x => (x(0) + x(1)) / 2.0f)\n        numsTupleAverage\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphm8nnsta.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphm8nnsta.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphm8nnsta.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val x = nums.toString.map(_.asDigit).toList\n        val y = x.map(x => x * x)\n        val z = y.map(x => x.toString.map(_.asDigit).toList)\n        val a = z.map(x => x.sum)\n        val b = a.map(x => x.toFloat)\n        val c = b.map(x => x / b.length)\n        c\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124007,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpphgfnx45.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpphgfnx45.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpphgfnx45.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.split(\"\").toList.map(x => x.toInt)\n        val numsList2 = numsList.map(x => pow(x, numsList.length).toLong)\n        val sum = numsList2.sum\n        val numsList3 = sum.toString.split(\"\").toList.map(x => x.toInt)\n        val numsList4 = numsList3.map(x => pow(x, numsList3.length).toLong)\n        val sum2 = numsList4.sum\n        if (sum2 == nums) true else false\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28s87tqz.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (sum2 == nums) \u001b[31mtrue\u001b[0m \u001b[33melse\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    (\u001b[31mtrue\u001b[0m : Boolean)\n\u001b[31m   |\u001b[0m                          Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28s87tqz.scala:12:36 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mif\u001b[0m (sum2 == nums) \u001b[31mtrue\u001b[0m \u001b[33melse\u001b[0m \u001b[31mfalse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                    Found:    (\u001b[31mfalse\u001b[0m : Boolean)\n\u001b[31m   |\u001b[0m                                    Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28s87tqz.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp28s87tqz.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum.toFloat / i)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa_tipx_2.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa_tipx_2.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpa_tipx_2.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        var sum = 0.0\n        for (i <- 1 to nums) {\n            sum += i\n            if (i % 10 == 0) {\n                lst = (sum / 10) :: lst\n                sum = 0.0\n            }\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a816h4n.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a816h4n.scala:11:23 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                lst = (sum / \u001b[31m10\u001b[0m) :: lst\n\u001b[31m\u001b[31m   |\u001b[0m                       ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                       Found:    Double\n\u001b[31m   |\u001b[0m                       Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a816h4n.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8a816h4n.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFlo",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = (numsList.take(2), numsList.takeRight(2))\n        val numsList2 = numsTuple._1.zip(numsTuple._2)\n        numsList2.map(x => (x._1 + x._2) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_4d2lfy.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_4d2lfy.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_4d2lfy.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to nums) {\n                sum += pow(i, j)\n            }\n            lst = lst :+ sum.toFloat / nums\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeumj0mw.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeumj0mw.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeumj0mw.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfeumj0mw.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = (sum.toFloat / nums) :: list\n        }\n        list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsgop8xc3.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val sum = tuples.map(x => x._1 + x._2).sum\n        val avg = sum / tuples.length\n        List(avg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2v_ah4ih.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2v_ah4ih.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2v_ah4ih.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 1 to nums.toInt) {\n            var sum : Long = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124008,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo_nlbif7.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo_nlbif7.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo_nlbif7.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(2).toList\n        val numsTuple2 = numsTuple.map(x => (x(0), x(1)))\n        val numsTuple3 = numsTuple2.map(x => (x._1 + x._2) / 2.0f)\n        numsTuple3\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfdya3ebq.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfdya3ebq.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfdya3ebq.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcshxsxog.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0.0\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:12:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_sjh_e_j.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val rand = new scala.util.Random\n            val tuple = (rand.nextInt(nums), rand.nextInt(nums))\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpweohgzb6.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpweohgzb6.scala:9:38 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtuple\u001b[0m = (rand.nextInt(nums), rand.nextInt(nums))\n\u001b[31m\u001b[31m  |\u001b[0m                                      ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                      Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                      Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpweohgzb6.scala:9:58 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtuple\u001b[0m = (rand.nextInt(nums), rand.nextInt(nums))\n\u001b[31m\u001b[31m  |\u001b[0m                                                          ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                   Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpweohgzb6.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => (x, 1))\n        val numsList3 = numsList2.foldLeft(List[(Int, Int)]())((x, y) => if (x.isEmpty) List(y) else if (x.last._1 == y._1) x.init :+ (x.last._1, x.last._2 + 1) else x :+ y)\n        numsList3.map(x => x._1.toFloat / x._2.toFloat).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyzzk4rg.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyzzk4rg.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgyzzk4rg.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList : List[Long] = nums.toString.map(_.asDigit).toList\n        val numsTuple : List[(Long, Long)] = numsList.zip(numsList.tail)\n        val numsTupleFloat : List[(Float, Float)] = numsTuple.map(x => (x._1.toFloat, x._2.toFloat))\n        val numsTupleFloatAvg : List[Float] = numsTupleFloat.map(x => (x._1 + x._2) / 2)\n        numsTupleFloatAvg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nhqchr4.scala:6:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mnumsList\u001b[0m : \u001b[35mList\u001b[0m[\u001b[35mLong\u001b[0m] = nums.toString.map(_.asDigit).toList\n\u001b[31m\u001b[31m  |\u001b[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                    Found:    List[\u001b[1m\u001b[31mInt\u001b[0m]\n\u001b[31m  |\u001b[0m                                    Required: List[\u001b[1m\u001b[32mLong\u001b[0m]\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nhqchr4.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0nhqchr4.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(nums)\n        val t = l.map(x => (x, x*x))\n        val t2 = t.map(x => (x._1, x._2, x._1*x._1))\n        val t3 = t2.map(x => (x._1, x._2, x._3, x._1*x._1))\n        val t4 = t3.map(x => (x._1, x._2, x._3, x._4, x._1*x._1))\n        val t5 = t4.map(x => (x._1, x._2, x._3, x._4, x._5, x._1*x._1))\n        val t6 = t5.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._1*x._1))\n        val t7 = t6.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._1*x._1))\n        val t8 = t7.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._1*x._1))\n        val t9 = t8.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._1*x._1))\n        val t10 = t9.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._1*x._1))\n        val t11 = t10.map(x => (x._1, x._2, x._3, x._4, x._5, x._6, x._7, x._8, x._9, x._10, x._11, x._1*x._1))\n        val t12\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmplt48ma0l.scala:19:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt48ma0l.scala:19:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt48ma0l.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplt48ma0l.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = (1 to nums).map(x => (x, x + 1, x + 2)).toList\n        tuples.map(x => (x._1 + x._2 + x._3) / 3.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:6:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = (\u001b[31m1\u001b[0m to nums).map(\u001b[36mx\u001b[0m => (x, x + \u001b[31m1\u001b[0m, x + \u001b[31m2\u001b[0m)).toList\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = (1 to nums).map(x => (x, x + 1, x + 2)).toList\n        tuples.map(x => (x._1 + x._2 + x._3) / 3.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:6:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m6 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = (\u001b[31m1\u001b[0m to nums).map(\u001b[36mx\u001b[0m => (x, x + \u001b[31m1\u001b[0m, x + \u001b[31m2\u001b[0m)).toList\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq2pooce4.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequir",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => pow(x, 5).toLong)\n        val sum = numsList2.sum\n        if (sum == nums) {\n            println(nums)\n            return List(nums)\n        }\n        return List()\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp44a5889k.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp44a5889k.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp44a5889k.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListSize = numsList.size\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListSize\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124009,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmolktff.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmolktff.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmptmolktff.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleList = numsTupleTuple.map(x => x.map(y => y.sum).sum)\n        val numsTupleTupleListFloat = numsTupleTupleList.map(_.toFloat)\n        val numsTupleTupleListFloatDivided = numsTupleTupleListFloat.map(_ / 2)\n        numsTupleTupleListFloatDivided\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mll1l1l.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mll1l1l.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0mll1l1l.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListLength = numsList.length\n        val numsListSum = numsList.sum\n        val numsListAverage = numsListSum.toFloat / numsListLength\n        val numsListAverageList = List(numsListAverage)\n        numsListAverageList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmww8lnad.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmww8lnad.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmww8lnad.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            for (j <- 1 to nums) {\n                sum += i * j\n                count += 1\n            }\n            result = result :+ (sum.toFloat / count.toFloat)\n            sum = 0\n            count = 0\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy2k4ep7.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy2k4ep7.scala:10:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy2k4ep7.scala:21:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpcy2k4ep7.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equa",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums.toFloat) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6bopve3u.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = (1L to nums).map(x => (x, x + 1, x + 2))\n        tuples.map(x => (x._1 + x._2 + x._3) / 3.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydp8i3ym.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydp8i3ym.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpydp8i3ym.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum.toFloat / i.toFloat)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93x2vf3x.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93x2vf3x.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp93x2vf3x.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            list = (sum.toFloat / nums) :: list\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxtwbsfl2.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxtwbsfl2.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxtwbsfl2.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxtwbsfl2.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = result :+ (sum.toFloat / nums.toFloat)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124010,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58bty96f.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58bty96f.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp58bty96f.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            for (j <- 1 to nums) {\n                sum += sqrt(i * i + j * j)\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124021,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cv2759c.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cv2759c.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cv2759c.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0cv2759c.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation availab",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = (sum / i) :: list\n        }\n        return list.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124023,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdvmuxow.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdvmuxow.scala:12:20 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = (sum / i) :: list\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Found:    Double\n\u001b[31m   |\u001b[0m                    Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdvmuxow.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwdvmuxow.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsListLen = numsList.length\n        val numsListSum = numsList.sum\n        val numsListAvg = numsListSum / numsListLen\n        List(numsListAvg)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwc66nec.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwc66nec.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpiwc66nec.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val rand = new scala.util.Random\n        val tuples = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples2 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples3 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples4 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples5 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples6 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples7 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples8 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples9 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples10 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples11 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples12 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples13 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples14 = for (i <- 0 until nums) yield (rand.nextInt(nums), rand.nextInt(nums))\n        val tuples15 = for (i <- 0 until nums) yield (rand.nextInt(nums\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_pa1pvnj.scala:22:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pa1pvnj.scala:7:39 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) \u001b[33myield\u001b[0m (rand.nextInt(nums), rand.nextInt(nums))\n\u001b[31m\u001b[31m  |\u001b[0m                                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pa1pvnj.scala:7:65 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) \u001b[33myield\u001b[0m (rand.nextInt(nums), rand.nextInt(nums))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                 ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                   Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pa1pvnj.scala:7:85 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mtuples\u001b[0m = \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until nums) \u001b[33myield\u001b[0m (rand.nextInt(nums), rand.nextInt(nums))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                     ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                   Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                                                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_pa1pvnj.scala:8:40 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(nums)\n        val l2 = l.map(x => x.toString.map(_.asDigit).toList)\n        val l3 = l2.map(x => x.map(x => x.toFloat))\n        val l4 = l3.map(x => x.sum / x.length)\n        l4\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprk4sd2qu.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprk4sd2qu.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmprk4sd2qu.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0\n            for (j <- 0 until nums.toInt) {\n                sum += i * j\n            }\n            result = result :+ (sum.toFloat / nums.toFloat)\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25k6nbf0.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25k6nbf0.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp25k6nbf0.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            list += (tuple._1 + tuple._2) / 2.0f\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpb3bwj7ck.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            sum += i\n            count += 1\n            if (count == 5) {\n                result = (sum / 5).toFloat :: result\n                sum = 0\n                count = 0\n            }\n        }\n        if (count != 0) result = (sum / count).toFloat :: result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9odhv5v.scala:9:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9odhv5v.scala:22:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo9odhv5v.scala:23:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            list = list :+ (sum / i)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123946,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpokrk_86r.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mF",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(x => x.toString.toInt)\n        val numsTuple = numsList.zipWithIndex\n        val numsTupleGrouped = numsTuple.groupBy(x => x._2 % 3)\n        val numsTupleGroupedSorted = numsTupleGrouped.toList.sortBy(x => x._1)\n        val numsTupleGroupedSortedMapped = numsTupleGroupedSorted.map(x => x._2)\n        val numsTupleGroupedSortedMappedMapped = numsTupleGroupedSortedMapped.map(x => x.map(y => y._1))\n        val numsTupleGroupedSortedMappedMappedMapped = numsTupleGroupedSortedMappedMapped.map(x => x.map(y => y.toFloat))\n        val numsTupleGroupedSortedMappedMappedMappedMapped = numsTupleGroupedSortedMappedMappedMapped.map(x => x.sum / x.size)\n        numsTupleGroupedSortedMappedMappedMappedMapped\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7xuaodaf.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7xuaodaf.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7xuaodaf.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val x = nums.toString.map(_.asDigit).toList\n        x.map(x => x.toFloat).grouped(2).map(x => x.sum / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybpn6mdu.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybpn6mdu.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpybpn6mdu.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuple = (1L to nums).map(x => (x, x + 1)).toList\n        tuple.map(x => (x._1 + x._2).toFloat / 2).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t0l9a61.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t0l9a61.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_t0l9a61.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(100)\n            val den = scala.util.Random.nextInt(100)\n            list += (num.toFloat / den.toFloat)\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw9tq9t6h.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw9tq9t6h.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpw9tq9t6h.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val l = List(1,2,3,4,5,6,7,8,9,10)\n        val l2 = List(1,2,3,4,5,6,7,8,9,10)\n        val l3 = List(1,2,3,4,5,6,7,8,9,10)\n        val l4 = List(1,2,3,4,5,6,7,8,9,10)\n        val l5 = List(1,2,3,4,5,6,7,8,9,10)\n        val l6 = List(1,2,3,4,5,6,7,8,9,10)\n        val l7 = List(1,2,3,4,5,6,7,8,9,10)\n        val l8 = List(1,2,3,4,5,6,7,8,9,10)\n        val l9 = List(1,2,3,4,5,6,7,8,9,10)\n        val l10 = List(1,2,3,4,5,6,7,8,9,10)\n        val l11 = List(1,2,3,4,5,6,7,8,9,10)\n        val l12 = List(1,2,3,4,5,6,7,8,9,10)\n        val l13 = List(1,2,3,4,5,6,7,8,9,10)\n        val l14 = List(1,2,3,4,5,6,7,8,9,10)\n        val l15 = List(1,2,3,4,5,6,7,8,9,10)\n        val l16 = List(1,2,3,4,5,6,7,8,9,10)\n        val l17 = List(1,2,3,4,5,6,7,8,9,10)\n        val l18 = List(1,2,3,4,5,6,7,8,9,10)\n        val l19 = List(1\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmps37asl4i.scala:25:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:25:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:27:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps37asl4i.scala:28:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp35vpaffw.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val averages = tuples.map(t => t._1 + t._2 + t._3).map(sum => sum / 3.0f)\n        averages\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr15u_pwq.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr15u_pwq.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr15u_pwq.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val nums2 = nums.toString.split(\"\").map(_.toInt).toList\n        val nums3 = nums2.map(x => x.toFloat)\n        val nums4 = nums3.grouped(2).toList\n        val nums5 = nums4.map(x => x.sum / x.size)\n        nums5\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps12gwjrm.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps12gwjrm.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmps12gwjrm.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toString.length - 1) {\n                sum += nums.toString.charAt(j).toString.toInt\n            }\n            result = result :+ (sum / nums.toString.length.toFloat)\n            nums = nums / 10\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124024,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmpo5pmsaj9.scala:13:17 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m            nums = nums / \u001b[31m10\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Reassignment to val nums\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo5pmsaj9.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo5pmsaj9.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpo5p",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).asDigit.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd6dpms3c.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd6dpms3c.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpd6dpms3c.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.asDigit)\n        val numsList2 = numsList.map(x => (x, 1))\n        val numsList3 = numsList2.foldLeft(List[(Int, Int)]())((a, b) => if (a.isEmpty) List(b) else if (a.last._1 == b._1) a.init :+ (a.last._1, a.last._2 + 1) else a :+ b)\n        val numsList4 = numsList3.map(x => (x._1, x._2, x._1 * x._2))\n        val numsList5 = numsList4.foldLeft((0, 0))((a, b) => (a._1 + b._2, a._2 + b._3))\n        val numsList6 = numsList4.map(x => (x._1, x._2, x._3, x._2.toFloat / numsList5._1, x._3.toFloat / numsList5._2))\n        numsList6.map(x => x._4 * x._5)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2hy10m_.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2hy10m_.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_2hy10m_.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 1 to nums) {\n            var tuple = (i, i + 1)\n            list = list :+ (tuple._1 + tuple._2) / 2.0f\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgqne32y1.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgqne32y1.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgqne32y1.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val tuple = (i, i + 1)\n            val average = (tuple._1 + tuple._2) / 2.0f\n            list += average\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124027,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvszkawhb.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvszkawhb.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvszkawhb.scala:16:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += (i + j)\n            }\n            result = (sum / nums.toFloat) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124025,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypeq2p2q.scala:12:22 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = (sum / nums.toFloat) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Found:    Double\n\u001b[31m   |\u001b[0m                      Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypeq2p2q.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpypeq2p2q.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        var sum = 0.0\n        var count = 0\n        var i = 0\n        while (i < nums) {\n            sum += i\n            count += 1\n            i += 1\n        }\n        result = (sum / count) :: result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx0hpgtmc.scala:15:18 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m        result = (sum / count) :: result\n\u001b[31m\u001b[31m   |\u001b[0m                  ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  Found:    Double\n\u001b[31m   |\u001b[0m                  Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx0hpgtmc.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpx0hpgtmc.scala:20:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[3",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Long = 0\n            for (j <- 0 until nums.toInt) {\n                sum += i * j\n            }\n            result = (sum.toFloat / nums) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf9z2eo6.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf9z2eo6.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmf9z2eo6.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.util.Random.nextInt(100)\n            val num2 = scala.util.Random.nextInt(100)\n            val num3 = scala.util.Random.nextInt(100)\n            val num4 = scala.util.Random.nextInt(100)\n            val num5 = scala.util.Random.nextInt(100)\n            val num6 = scala.util.Random.nextInt(100)\n            val num7 = scala.util.Random.nextInt(100)\n            val num8 = scala.util.Random.nextInt(100)\n            val num9 = scala.util.Random.nextInt(100)\n            val num10 = scala.util.Random.nextInt(100)\n            val num11 = scala.util.Random.nextInt(100)\n            val num12 = scala.util.Random.nextInt(100)\n            val num13 = scala.util.Random.nextInt(100)\n            val num14 = scala.util.Random.nextInt(100)\n            val num15 = scala.util.Random.nextInt(100)\n            val num16 = scala.util.Random.nextInt(100)\n            val num17 = scala.util.Random.nextInt(100)\n            val num18 = scala.util.Random.nextInt(100)\n            val num19 = scala.util.Random.nextInt(100)\n            val num20 = scala.util.Random.nextInt(100)\n            val num21 = scala.util.Random.nextInt(100)\n            val num22 = scala.util.Random.nextInt(100)\n            val num23 = scala.util.Random.nextInt(100)\n            val num24 = scala.util.Random.nextInt(100)\n            val num25 = scala.util.Random.nextInt(100)\n            val num26 = scala.util.Random.nextInt(100)\n            val num27 = scala.util.Random.nextInt(100)\n            val num\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124026,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq8vv1px5.scala:36:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    '=' expected, but '}' found\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpq8vv1px5.scala:44:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8vv1px5.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8vv1px5.scala:38:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpq8vv1px5.scala:39:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m1",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = lst :+ (sum.toFloat / i)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124035,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0avq1nem.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0avq1nem.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0avq1nem.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123994,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0qjm816w.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 until nums.toInt) {\n            var sum = 0.0\n            for (j <- 0 until nums.toInt) {\n                sum += pow(i, j)\n            }\n            list = list :+ (sum / nums)\n        }\n        list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpelivw49x.scala:12:28 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            list = list :+ (sum / nums)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            Found:    Double\n\u001b[31m   |\u001b[0m                            Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpelivw49x.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpelivw49x.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when c",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            lst = lst :+ (sum / i)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_oumh3p.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_oumh3p.scala:12:26 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            lst = lst :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                          Found:    Double\n\u001b[31m   |\u001b[0m                          Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_oumh3p.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpp_oumh3p.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1, 2), (3, 4), (5, 6))\n        tuples.map(x => (x._1 + x._2) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8waiex9m.scala:10:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8waiex9m.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp8waiex9m.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2), (3,4), (5,6))\n        val result = tuples.map(x => (x._1 + x._2) / 2.0f)\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpuu3r5cb3.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0.0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = result :+ (sum / i)\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510643,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:12:32 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m            result = result :+ (sum / i)\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                Found:    Double\n\u001b[31m   |\u001b[0m                                Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf7j7spyp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 0 to nums.toString.length - 1) {\n            result = result :+ nums.toString.charAt(i).toString.toFloat\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123945,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy68ixz0w.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val result = tuples.map(x => x._1 + x._2 + x._3)\n        result.map(x => x / 3.0f)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63a__7gq.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63a__7gq.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp63a__7gq.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleFloat = numsTuple.map(x => x.map(_.toFloat).sum / x.length)\n        return numsTupleFloat\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp17ep9uel.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp17ep9uel.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp17ep9uel.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result = List[Float]()\n        for (i <- 1 to nums.toInt) {\n            var sum = 0\n            for (j <- 1 to i) {\n                sum += j\n            }\n            result = (sum.toFloat / i) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_3x8v83.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_3x8v83.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7_3x8v83.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        numsTupleTuple.map(x => (x(0).sum + x(1).sum) / 2.0f).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafaz_oz9.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafaz_oz9.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpafaz_oz9.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var list = List[Float]()\n        for (i <- 0 to nums.toInt - 1) {\n            var sum = 0\n            for (j <- 0 to nums.toInt - 1) {\n                sum += (i + j)\n            }\n            list = list :+ (sum.toFloat / nums.toFloat)\n        }\n        return list\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9nradqf2.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9nradqf2.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp9nradqf2.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.toList.map(_.toString.toInt)\n        val numsList2 = numsList.combinations(2).toList\n        val numsList3 = numsList.combinations(3).toList\n        val numsList4 = numsList.combinations(4).toList\n        val numsList5 = numsList.combinations(5).toList\n        val numsList6 = numsList.combinations(6).toList\n        val numsList7 = numsList.combinations(7).toList\n        val numsList8 = numsList.combinations(8).toList\n        val numsList9 = numsList.combinations(9).toList\n        val numsList10 = numsList.combinations(10).toList\n        val numsList11 = numsList.combinations(11).toList\n        val numsList12 = numsList.combinations(12).toList\n        val numsList13 = numsList.combinations(13).toList\n        val numsList14 = numsList.combinations(14).toList\n        val numsList15 = numsList.combinations(15).toList\n        val numsList16 = numsList.combinations(16).toList\n        val numsList17 = numsList.combinations(17).toList\n        val numsList18 = numsList.combinations(18).toList\n        val numsList19 = numsList.combinations(19).toList\n        val numsList20 = numsList.combinations(20).toList\n        val numsList21 = numsList.combinations(21).toList\n        val numsList22 = numsList.combinations(22).toList\n        val numsList23 = numsList.combinations(23).toList\n        val numsList24 = numsList.combinations(24).toList\n        val numsList25 = numsList.combinations(25).toList\n        val numsList26 = numsList.combinations(26).toList\n        val numsList27 = numsList.\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp_nj6dmn2.scala:33:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_nj6dmn2.scala:33:5 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m     ^\u001b[0m\n\u001b[31m   |\u001b[0m     Found:    Unit\n\u001b[31m   |\u001b[0m     Required: List[Float]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_nj6dmn2.scala:35:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_nj6dmn2.scala:36:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0.0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1665510644,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:14:13 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m        List(sum / count)\n\u001b[31m\u001b[31m   |\u001b[0m             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m             Found:    Double\n\u001b[31m   |\u001b[0m             Required: Float\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp640fsybp.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val tuples = List((1,2,3), (4,5,6), (7,8,9))\n        val result = tuples.map(x => x._1 + x._2 + x._3)\n        result.map(x => x.toFloat / 3)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpixn2q454.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpixn2q454.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpixn2q454.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(2).toList\n        numsTuple.map(x => x.sum.toFloat / x.length).toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124037,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:11:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2fu84cca.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val list = ListBuffer[Float]()\n        for (i <- 1 to nums) {\n            val num = scala.io.StdIn.readLine.split(\" \").map(_.toFloat)\n            list += num.sum / num.length\n        }\n        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruaqvl7m.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruaqvl7m.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpruaqvl7m.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val r = scala.util.Random\n        val tuples = for (i <- 1 to nums.toInt) yield (r.nextInt(nums.toInt), r.nextInt(nums.toInt))\n        val avg = tuples.map(x => (x._1 + x._2) / 2.0f).toList\n        avg\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvx8z9ax.scala:12:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvx8z9ax.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpwvx8z9ax.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var result : List[Float] = List()\n        for (i <- 0 until nums.toInt) {\n            var sum : Float = 0\n            for (j <- 0 until nums.toInt) {\n                sum += scala.util.Random.nextInt(nums.toInt)\n            }\n            result = (sum / nums.toInt) :: result\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66iv0flj.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66iv0flj.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp66iv0flj.scala:19:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        val numsList = nums.toString.map(_.asDigit).toList\n        val numsTuple = numsList.grouped(3).toList\n        val numsTupleTuple = numsTuple.grouped(2).toList\n        val numsTupleTupleAverage = numsTupleTuple.map(x => x.map(y => y.sum.toFloat / y.size).toList).toList\n        numsTupleTupleAverage.flatten\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp48noh1ot.scala:13:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp48noh1ot.scala:14:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp48noh1ot.scala:15:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(averageTuple(((\u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m100l\u001b[0m, \u001b[31m120l\u001b[0m), (\u001b[31m300l\u001b[0m, \u001b[31m450l\u001b[0m, \u001b[31m560l\u001b[0m, \u001b[31m450l\u001b[0m), (\u001b[31m810l\u001b[0m, \u001b[31m800l\u001b[0m, \u001b[31m390l\u001b[0m, \u001b[31m320l\u001b[0m), (\u001b[31m10l\u001b[0m, \u001b[31m20l\u001b[0m, \u001b[31m30l\u001b[0m, \u001b[31m40l\u001b[0m))).equals((L",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var lst = List[Float]()\n        for (i <- 1 to nums) {\n            var sum = 0\n            for (j <- 1 to nums) {\n                sum += i * j\n            }\n            lst = lst :+ (sum.toFloat / nums)\n        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666124038,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzj2s33dq.scala:7:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzj2s33dq.scala:9:27 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mfor\u001b[0m (j <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                           Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzj2s33dq.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpzj2s33dq.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((Li",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    def averageTuple(nums : Long) : List[Float] = {\n        var sum = 0\n        var count = 0\n        for (i <- 1 to nums) {\n            if (i % 3 == 0 || i % 5 == 0) {\n                sum += i\n                count += 1\n            }\n        }\n        List(sum.toFloat / count)\n    }\n    def main(args: Array[String]) = {\n    assert(averageTuple(((10l, 10l, 10l, 12l), (30l, 45l, 56l, 45l), (81l, 80l, 39l, 32l), (1l, 2l, 3l, 4l))).equals((List[Float](30.5f.toFloat, 34.25f.toFloat, 27.0f.toFloat, 23.25f.toFloat))));\n    assert(averageTuple(((1l, 1l, -5l), (30l, -15l, 56l), (81l, -60l, -39l), (-10l, 2l, 3l))).equals((List[Float](25.5f.toFloat, -18.0f.toFloat, 3.75f.toFloat))));\n    assert(averageTuple(((100l, 100l, 100l, 120l), (300l, 450l, 560l, 450l), (810l, 800l, 390l, 320l), (10l, 20l, 30l, 40l))).equals((List[Float](305.0f.toFloat, 342.5f.toFloat, 270.0f.toFloat, 232.5f.toFloat))));\n    }\n\n}\n",
      "timestamp": 1666123978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:8:23 ---------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m to nums) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       Found:    (nums : Long)\n\u001b[31m  |\u001b[0m                       Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:17:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(averageTuple(((\u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m10l\u001b[0m, \u001b[31m12l\u001b[0m), (\u001b[31m30l\u001b[0m, \u001b[31m45l\u001b[0m, \u001b[31m56l\u001b[0m, \u001b[31m45l\u001b[0m), (\u001b[31m81l\u001b[0m, \u001b[31m80l\u001b[0m, \u001b[31m39l\u001b[0m, \u001b[31m32l\u001b[0m), (\u001b[31m1l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m, \u001b[31m4l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m30.5f\u001b[0m.toFloat, \u001b[31m34.25f\u001b[0m.toFloat, \u001b[31m27.0f\u001b[0m.toFloat, \u001b[31m23.25f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long, Long), (Long, Long, Long, Long), (Long, Long, Long, Long), (\n\u001b[31m   |\u001b[0m  Long\n\u001b[31m   |\u001b[0m, Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmppnd8b8yu.scala:18:24 --------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(averageTuple(((\u001b[31m1l\u001b[0m, \u001b[31m1l\u001b[0m, -\u001b[31m5l\u001b[0m), (\u001b[31m30l\u001b[0m, -\u001b[31m15l\u001b[0m, \u001b[31m56l\u001b[0m), (\u001b[31m81l\u001b[0m, -\u001b[31m60l\u001b[0m, -\u001b[31m39l\u001b[0m), (-\u001b[31m10l\u001b[0m, \u001b[31m2l\u001b[0m, \u001b[31m3l\u001b[0m))).equals((List[\u001b[35mFloat\u001b[0m](\u001b[31m25.5f\u001b[0m.toFloat, -\u001b[31m18.0f\u001b[0m.toFloat, \u001b[31m3.75f\u001b[0m.toFloat))));\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mFound:    ((Long, Long, Long), (Long, Long, Long), (Long, Long, Long), (Long, Long, Long))\n\u001b[31m   |\u001b[0mRequired: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}