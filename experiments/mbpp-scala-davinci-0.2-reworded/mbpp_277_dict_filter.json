{
  "name": "mbpp_277_dict_filter",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes in a map and integer n and filters the map to only include entries with values greater than or equal to n.\n    def dictFilter(dict : Map[String,Long], n : Long) : Map[String,Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (170l)).equals((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (180l)).equals((Map[String,Long](\"Alden Cantrell\" -> 180l, \"Pierre Cox\" -> 190l))));\n    assert(dictFilter((Map[String,Long](\"Cierra Vega\" -> 175l, \"Alden Cantrell\" -> 180l, \"Kierra Gentry\" -> 165l, \"Pierre Cox\" -> 190l)), (190l)).equals((Map[String,Long](\"Pierre Cox\" -> 190l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        newDict",
    "        var newDict = Map[String,Long]()\n        for (key <- dict.keys) {\n            if (dict(key) >= n) newDict += (key -> dict(key))\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(_._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var result = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) result += (k -> v)\n        }\n        result",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var filteredDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                filteredDict += (k -> v)\n            }\n        }\n        filteredDict",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) newDict += (k -> v)\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        val result = dict.filter(x => x._2 >= n)\n        result",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) newDict += (k -> v)\n        }\n        newDict",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) newDict += (k -> v)\n        }\n        newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var result : Map[String,Long] = Map()\n        for ((k,v) <- dict) {\n            if (v >= n) result += (k -> v)\n        }\n        result",
    "        var result = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) result += (k -> v)\n        }\n        result",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        val filteredDict = new HashMap[String,Long]\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                filteredDict += (k -> v)\n            }\n        }\n        return filteredDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((key,value) <- dict) {\n            if (value >= n) {\n                newDict += (key -> value)\n            }\n        }\n        newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        newDict",
    "        var newDict = Map[String,Long]()\n        for (key <- dict.keys) {\n            if (dict(key) >= n) {\n                newDict += (key -> dict(key))\n            }\n        }\n        newDict",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for (key <- dict.keys) {\n            if (dict(key) >= n) {\n                newDict += (key -> dict(key))\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for (key <- dict.keys) {\n            if (dict(key) >= n) {\n                newDict += (key -> dict(key))\n            }\n        }\n        newDict",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) newDict += (k -> v)\n        }\n        newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for (i <- dict) {\n            if (i._2 >= n) {\n                newDict += i\n            }\n        }\n        return newDict",
    "        return dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for (key <- dict.keys) {\n            if (dict(key) >= n) {\n                newDict += (key -> dict(key))\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var result = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) result += (k -> v)\n        }\n        result",
    "        dict.filter(x => x._2 >= n)",
    "        var result = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) result += (k -> v)\n        }\n        result",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((key,value) <- dict) {\n            if (value >= n) {\n                newDict += (key -> value)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) newDict += (k -> v)\n        }\n        newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for (i <- dict) {\n            if (i._2 >= n) newDict += i\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) if (v >= n) newDict += (k -> v)\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                newDict += (k -> v)\n            }\n        }\n        return newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var result = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                result += (k -> v)\n            }\n        }\n        return result",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        var filteredDict = Map[String,Long]()\n        for (key <- dict.keys) {\n            if (dict(key) >= n) filteredDict += (key -> dict(key))\n        }\n        return filteredDict",
    "        dict.filter(x => x._2 >= n)",
    "        var result = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) {\n                result += (k -> v)\n            }\n        }\n        return result",
    "        var newDict = Map[String,Long]()\n        for ((k,v) <- dict) {\n            if (v >= n) newDict += (k -> v)\n        }\n        newDict",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)",
    "        dict.filter(x => x._2 >= n)"
  ]
}