{
  "name": "mbpp_291_count_no_of_ways",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    def countNoOfWays(n : Long, k : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countNoOfWays((2l), (4l)) == (16l));\n    assert(countNoOfWays((3l), (2l)) == (6l));\n    assert(countNoOfWays((4l), (4l)) == (228l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val same_diff = same * diff\n            val diff_diff = diff * (diff - 1)\n            val total_total = total * total\n            val same_same = same * same\n            val diff_same = diff * same\n            val total_same = total * same\n            val total_diff = total * diff\n            val same_total = same * total\n            val diff_total = diff * total\n            val total_total_total = total * total * total\n            val same_same_same = same * same * same\n            val diff_same_same = diff * same * same\n            val total_same_same = total * same * same\n            val same_diff_same = same * diff * same\n            val same_same_diff = same * same * diff\n            val same_total_same = same * total * same\n            val same_same_total = same * same * total\n            val same_total_diff = same * total * diff\n            val same_diff_total = same * diff * total\n            val diff_total_same = diff * total * same\n            val diff_same_total = diff * same * total\n            val diff_total_diff = diff * total * diff\n            val diff_diff_total = diff * diff * total\n            val diff_diff_same = diff * diff * same\n            val diff_same_diff = diff * same * diff\n            val diff_diff_diff = diff * diff * diff\n            val total_total_same = total * total * same\n            val total_total_diff = total * total * diff\n            val total_same_total = total * same * total\n            val total_diff_total = total * diff * total\n            val total_same_diff = total * same * diff\n            val total_diff_same = total * diff * same\n            val total_diff_diff = total * diff * diff\n            val total_same_same = total * same * same\n            val total_total_total_total = total * total * total *",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (diff + same) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        else if (n == 1) return k\n        else if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        countNoOfWays(n - 1, same) + countNoOfWays(n - 2, diff)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * (countNoOfWays(n - 1, k) - same)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        var i = 3\n        while (i <= n) {\n            val temp = diff\n            diff = (diff + same) * (k - 1)\n            same = temp\n            i += 1\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        return same + diff * countNoOfWays(n - 2, k)",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        var sameCount = same\n        var diffCount = diff\n        for (i <- 3 to n.toInt) {\n            sameCount = diffCount\n            diffCount = (total - sameCount) * (k - 1)\n            total = sameCount + diffCount\n        }\n        total",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = diff\n        val diff2 = (k - 1) * (k - 1) * k\n        val total2 = same2 + diff2\n        val same3 = diff2\n        val diff3 = (k - 1) * (k - 1) * (k - 1) * k\n        val total3 = same3 + diff3\n        val same4 = diff3\n        val diff4 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total4 = same4 + diff4\n        val same5 = diff4\n        val diff5 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total5 = same5 + diff5\n        val same6 = diff5\n        val diff6 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total6 = same6 + diff6\n        val same7 = diff6\n        val diff7 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total7 = same7 + diff7\n        val same8 = diff7\n        val diff8 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * k\n        val total8 = same8 + diff8\n        val same9 = diff8\n        val diff9 = (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (k - 1) * (",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val sameDiff = same + diff\n        val sameDiff2 = sameDiff * (k - 2)\n        val same2 = same * (k - 1)\n        val diff2 = diff * (k - 1)\n        val sameDiff3 = same2 + diff2\n        val sameDiff4 = sameDiff3 * (k - 2)\n        val same3 = same2 * (k - 1)\n        val diff3 = diff2 * (k - 1)\n        val sameDiff5 = same3 + diff3\n        val sameDiff6 = sameDiff5 * (k - 2)\n        val same4 = same3 * (k - 1)\n        val diff4 = diff3 * (k - 1)\n        val sameDiff7 = same4 + diff4\n        val sameDiff8 = sameDiff7 * (k - 2)\n        val same5 = same4 * (k - 1)\n        val diff5 = diff4 * (k - 1)\n        val sameDiff9 = same5 + diff5\n        val sameDiff10 = sameDiff9 * (k - 2)\n        val same6 = same5 * (k - 1)\n        val diff6 = diff5 * (k - 1)\n        val sameDiff11 = same6 + diff6\n        val sameDiff12 = sameDiff11 * (k - 2)\n        val same7 = same6 * (k - 1)\n        val diff7 = diff6 * (k - 1)\n        val sameDiff13 = same7 + diff7\n        val sameDiff14 = sameDiff13 * (k - 2)\n        val same8 = same7 * (k - 1)\n        val diff8 = diff7 * (k - 1)\n        val sameDiff15 = same8 + diff8\n        val sameDiff16 = sameDiff15 * (k - 2)\n        val same9 = same8 * (k - 1)\n        val diff9 = diff8 * (k - 1)\n        val sameDiff17 = same9 + diff9\n        val sameDiff18 = same",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val result = Array.fill(n.toInt)(0L)\n        result(0) = k\n        result(1) = total\n        for (i <- 2 until n.toInt) result(i) = (same + diff) * (result(i - 2) + result(i - 1))\n        result(n.toInt - 1)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            (same + diff) * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same_prev = same\n        val diff_prev = diff\n        for (i <- 3 to n.toInt) {\n            same = diff_prev\n            diff = (total - same_prev) * (k - 1)\n            total = same + diff\n            same_prev = same\n            diff_prev = diff\n        }\n        total",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val sameDiff = same + diff\n        val sameDiffSame = same\n        val sameDiffDiff = diff * (k - 1)\n        val sameDiffSameDiff = same + diff\n        var sameDiffSameDiffSame = same\n        var sameDiffSameDiffDiff = diff * (k - 1)\n        for (i <- 5 to n.toInt) {\n            sameDiffSameDiffSame = sameDiffSameDiffDiff\n            sameDiffSameDiffDiff = sameDiffSameDiff * (k - 1)\n        }\n        sameDiffSameDiffSame + sameDiffSameDiffDiff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        total2",
    "        if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        if (n == 2) return total\n        if (n == 3) return total2\n        var same3 = 0L\n        var diff3 = 0L\n        var total3 = 0L\n        for (i <- 4 to n.toInt) {\n            same3 = total2 * (k - 1)\n            diff3 = total2 * (k - 1)\n            total3 = same3 + diff3\n            same2 = same3\n            diff2 = diff3\n            total2 = total3\n        }\n        total3",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = diff\n        val diff2 = (same + diff) * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = diff2\n        val diff3 = (same2 + diff2) * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = diff3\n        val diff4 = (same3 + diff3) * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = diff4\n        val diff5 = (same4 + diff4) * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = diff5\n        val diff6 = (same5 + diff5) * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = diff6\n        val diff7 = (same6 + diff6) * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = diff7\n        val diff8 = (same7 + diff7) * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = diff8\n        val diff9 = (same8 + diff8) * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = diff9\n        val diff10 = (same9 + diff9) * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = diff10\n        val diff11 = (same10 + diff10) * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = diff11\n        val diff12 = (same11 + diff11) * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = diff12\n        val diff13 = (same12 + diff12) * (k - 1)\n        val total13 = same13 + diff13\n",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = new Array[Long](n.toInt + 1)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        return same + diff * countNoOfWays(n - 2, k)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val total2 = total * total\n        val same2 = same * same\n        val diff2 = diff * diff\n        val total3 = total2 * total\n        val same3 = same2 * same\n        val diff3 = diff2 * diff\n        val total4 = total3 * total\n        val same4 = same3 * same\n        val diff4 = diff3 * diff\n        val total5 = total4 * total\n        val same5 = same4 * same\n        val diff5 = diff4 * diff\n        val total6 = total5 * total\n        val same6 = same5 * same\n        val diff6 = diff5 * diff\n        val total7 = total6 * total\n        val same7 = same6 * same\n        val diff7 = diff6 * diff\n        val total8 = total7 * total\n        val same8 = same7 * same\n        val diff8 = diff7 * diff\n        val total9 = total8 * total\n        val same9 = same8 * same\n        val diff9 = diff8 * diff\n        val total10 = total9 * total\n        val same10 = same9 * same\n        val diff10 = diff9 * diff\n        val total11 = total10 * total\n        val same11 = same10 * same\n        val diff11 = diff10 * diff\n        val total12 = total11 * total\n        val same12 = same11 * same\n        val diff12 = diff11 * diff\n        val total13 = total12 * total\n        val same13 = same12 * same\n        val diff13 = diff12 * diff\n        val total14 = total13 * total\n        val same14 = same13 * same\n        val diff14 = diff13 * diff\n        val total15 = total14 * total\n        val same15 = same14 * same\n        val diff15 = diff14 * diff\n        val total16 = total15 * total\n        val same16 = same15 * same\n        val diff16 = diff15 * diff\n        val total17 = total16 * total\n        val same17 = same16 *",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same_n = same\n        val diff_n = total * (k - 1)\n        return same_n + diff_n",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = total\n        for (i <- 3 to n.toInt) {\n            dp(i) = (same + diff) % mod\n            same = diff\n            diff = dp(i)\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = total * pow(k - 1, n - 2).toLong\n            result\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            var sameCount = same\n            var diffCount = diff\n            for (i <- 3L to n) {\n                sameCount = diffCount\n                diffCount = (total - sameCount) * (k - 1)\n                total = sameCount + diffCount\n            }\n            total\n        }",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val same2 = diff\n            val diff2 = same * (k - 1) + diff * (k - 1)\n            val total2 = same2 + diff2\n            val same3 = diff2\n            val diff3 = same2 * (k - 1) + diff2 * (k - 1)\n            val total3 = same3 + diff3\n            var same4 = diff3\n            var diff4 = same3 * (k - 1) + diff3 * (k - 1)\n            var total4 = same4 + diff4\n            for (i <- 5 to n.toInt) {\n                same4 = diff4\n                diff4 = same4 * (k - 1) + diff4 * (k - 1)\n                total4 = same4 + diff4\n            }\n            total4\n        }",
    "        // Let f(n) be the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        // Then f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(n - 1) * (k - 1) + f(n - 2) * (k - 1)\n        // f(n) = f(",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same1 = diff\n        val diff1 = total * (k - 1)\n        val total1 = same1 + diff1\n        countNoOfWays(n - 2, k) * total1",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val sameDiff = same + diff\n        val sameDiffSame = same\n        val sameDiffDiff = diff * (k - 1)\n        val sameDiffSameDiff = sameDiff\n        val sameDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiff = sameDiff\n        val sameDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1)\n        val sameDiffSameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = sameDiff\n        val sameDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiffDiff = diff * (k - 1",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        var total = same + diff\n        for (i <- 3 to n.toInt) {\n            same = diff\n            diff = total * (k - 1)\n            total = same + diff\n        }\n        total",
    "        // Let f(n) be the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n        // Then f(n) = k * f(n - 1) + k * f(n - 2)\n        // f(1) = k\n        // f(2) = k * k\n        // f(3) = k * k * k + k * k\n        // f(4) = k * k * k * k + 2 * k * k * k\n        // f(5) = k * k * k * k * k + 3 * k * k * k * k\n        // f(6) = k * k * k * k * k * k + 4 * k * k * k * k * k\n        // f(7) = k * k * k * k * k * k * k + 5 * k * k * k * k * k * k\n        // f(8) = k * k * k * k * k * k * k * k + 6 * k * k * k * k * k * k * k\n        // f(9) = k * k * k * k * k * k * k * k * k + 7 * k * k * k * k * k * k * k * k\n        // f(10) = k * k * k * k * k * k * k * k * k * k + 8 * k * k * k * k * k * k * k * k * k\n        // f(11) = k * k * k * k * k * k * k * k * k * k * k + 9 * k * k * k * k * k * k * k * k * k * k\n        // f(12) = k * k * k * k * k * k * k * k * k * k * k * k + 10 * k * k * k * k * k * k * k * k * k * k * k\n        // f(13) = k * k * k * k * k * k * k * k * k * k * k * k * k + 11 * k * k * k * k * k * k * k * k * k * k * k * k",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        total2",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            var sameCount = same\n            var diffCount = diff\n            for (i <- 3 to n.toInt) {\n                sameCount = diffCount\n                diffCount = (total - sameCount) * (k - 1)\n                total = sameCount + diffCount\n            }\n            total\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            (same * (total - diff) + diff * (total - same)) % 1000000007\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val dp = Array.fill(n.toInt)(0L)\n        dp(0) = same\n        dp(1) = diff\n        for (i <- 2 until n.toInt) {\n            dp(i) = (same * dp(i - 1) + diff * (dp(i - 2) - dp(i - 1))) % mod\n        }\n        dp(n.toInt - 1)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = same\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        var same3 = same2\n        var diff3 = total2 * (k - 1)\n        var total3 = same3 + diff3\n        for (i <- 4 to n.toInt) {\n            same3 = diff2\n            diff3 = total3 * (k - 1)\n            total3 = same3 + diff3\n            same2 = diff\n            diff2 = total2 * (k - 1)\n            total2 = same2 + diff2\n            same = diff\n            diff = total * (k - 1)\n            total = same + diff\n        }\n        total3",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val same_n = pow(same, n).toLong % mod\n        val diff_n = pow(diff, n).toLong % mod\n        val total_n = pow(total, n).toLong % mod\n        val result = (total_n - diff_n + mod) % mod\n        result",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        var sameCount = same\n        var diffCount = diff\n        for (i <- 3 to n.toInt) {\n            sameCount = diffCount\n            diffCount = (total - sameCount) * (k - 1)\n            total = sameCount + diffCount\n        }\n        total",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val same_diff = same + diff\n        val same_same = same\n        val diff_diff = diff\n        var total = same_diff\n        for (i <- 3 to n.toInt) {\n            total = same_diff * diff_diff + same_same * same\n            same_diff = total\n            same_same = same_diff - diff_diff\n            diff_diff = same_diff - same_same\n        }\n        total",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to k.toInt) {\n                if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = j\n                else if (i == 2) dp(i)(j) = j * j\n                else dp(i)(j) = (j - 1) * (dp(i - 1)(j) + dp(i - 2)(j))\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val same_diff = same + diff\n        val same_diff_same = same\n        val diff_same_diff = diff\n        val same_diff_same_diff = same * diff\n        val diff_same_diff_same = diff * same\n        val same_diff_same_diff_same = same * diff\n        val diff_same_diff_same_diff = diff * same\n        val same_diff_same_diff_same_diff = same * diff\n        val diff_same_diff_same_diff_same = diff * same\n        val same_diff_same_diff_same_diff_same = same * diff\n        val diff_same_diff_same_diff_same_diff = diff * same\n        val same_diff_same_diff_same_diff_same_diff = same * diff\n        val diff_same_diff_same_diff_same_diff_same = diff * same\n        val same_diff_same_diff_same_diff_same_diff_same = same * diff\n        val diff_same_diff_same_diff_same_diff_same_diff = diff * same\n        val same_diff_same_diff_same_diff_same_diff_same_diff = same * diff\n        val diff_same_diff_same_diff_same_diff_same_diff_same = diff * same\n        val same_diff_same_diff_same_diff_same_diff_same_diff_same = same * diff\n        val diff_same_diff_same_diff_same_diff_same_diff_same_diff = diff * same\n        val same_diff_same_diff_same_diff_same_diff_same_diff_same_diff = same * diff\n        val diff_same_diff_same_diff_same_diff_same_diff_same_diff_same = diff * same\n        val same_diff_same_diff_same_diff_same_diff_same_diff_same_diff_same = same * diff\n        val diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            (same + diff) * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = total * pow(k - 1, n - 2).toLong\n            result\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1)\n        val total13 = same13 + diff13",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        var sameCount = same\n        var diffCount = diff\n        for (i <- 3 to n.toInt) {\n            sameCount = diffCount\n            diffCount = (total - sameCount) * (k - 1)\n            total = sameCount + diffCount\n        }\n        total",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        val same3 = total2 * (k - 1)\n        val diff3 = total2 * (k - 1)\n        val total3 = same3 + diff3\n        val same4 = total3 * (k - 1)\n        val diff4 = total3 * (k - 1)\n        val total4 = same4 + diff4\n        val same5 = total4 * (k - 1)\n        val diff5 = total4 * (k - 1)\n        val total5 = same5 + diff5\n        val same6 = total5 * (k - 1)\n        val diff6 = total5 * (k - 1)\n        val total6 = same6 + diff6\n        val same7 = total6 * (k - 1)\n        val diff7 = total6 * (k - 1)\n        val total7 = same7 + diff7\n        val same8 = total7 * (k - 1)\n        val diff8 = total7 * (k - 1)\n        val total8 = same8 + diff8\n        val same9 = total8 * (k - 1)\n        val diff9 = total8 * (k - 1)\n        val total9 = same9 + diff9\n        val same10 = total9 * (k - 1)\n        val diff10 = total9 * (k - 1)\n        val total10 = same10 + diff10\n        val same11 = total10 * (k - 1)\n        val diff11 = total10 * (k - 1)\n        val total11 = same11 + diff11\n        val same12 = total11 * (k - 1)\n        val diff12 = total11 * (k - 1)\n        val total12 = same12 + diff12\n        val same13 = total12 * (k - 1)\n        val diff13 = total12 * (k - 1",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val same_diff = same + diff\n        val same_same = same\n        val diff_diff = diff\n        var same_diff_same = same_diff\n        var diff_diff_same = diff_diff\n        for (i <- 3 to n.toInt) {\n            same_diff_same = same_diff * same + diff_diff * diff\n            diff_diff_same = same_diff * diff + diff_diff * (k - 1)\n            same_diff = same_diff_same\n            diff_diff = diff_diff_same\n        }\n        same_diff_same",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 1 to n.toInt) {\n            for (j <- 1 to k.toInt) {\n                if (i == 1) dp(i)(j) = j\n                else if (i == 2) dp(i)(j) = j * j\n                else dp(i)(j) = (dp(i - 1)(j) + dp(i - 2)(j)) * (j - 1)\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                var temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            val result = total * pow(k - 1, n - 3).toLong\n            result\n        }",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = 0L\n        var diff = k\n        for (i <- 2 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.ofDim[Long](n.toInt, 2)\n        dp(0)(0) = k\n        dp(0)(1) = 0\n        for (i <- 1 until n.toInt) {\n            dp(i)(0) = (dp(i - 1)(0) + dp(i - 1)(1)) * (k - 1)\n            dp(i)(1) = dp(i - 1)(0)\n        }\n        dp(n.toInt - 1)(0) + dp(n.toInt - 1)(1)",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        val dp = Array.ofDim[Long](n.toInt + 1, k.toInt + 1)\n        for (i <- 0 to n.toInt) {\n            for (j <- 0 to k.toInt) {\n                if (i == 0) dp(i)(j) = 0\n                else if (j == 0) dp(i)(j) = 0\n                else if (i == 1) dp(i)(j) = j\n                else if (i == 2) dp(i)(j) = j * j\n                else dp(i)(j) = (dp(i - 1)(j) * (j - 1) + dp(i - 2)(j) * (j - 1)) % 1000000007\n            }\n        }\n        dp(n.toInt)(k.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            var same = k\n            var diff = k * (k - 1)\n            for (i <- 3 to n.toInt) {\n                val temp = diff\n                diff = (same + diff) * (k - 1)\n                same = temp\n            }\n            same + diff\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            val temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val mod = 1000000007L\n        val same2 = (same * same) % mod\n        val diff2 = (diff * diff) % mod\n        val total2 = (total * total) % mod\n        val same3 = (same2 * same) % mod\n        val diff3 = (diff2 * diff) % mod\n        val total3 = (total2 * total) % mod\n        val same4 = (same3 * same) % mod\n        val diff4 = (diff3 * diff) % mod\n        val total4 = (total3 * total) % mod\n        val same5 = (same4 * same) % mod\n        val diff5 = (diff4 * diff) % mod\n        val total5 = (total4 * total) % mod\n        val same6 = (same5 * same) % mod\n        val diff6 = (diff5 * diff) % mod\n        val total6 = (total5 * total) % mod\n        val same7 = (same6 * same) % mod\n        val diff7 = (diff6 * diff) % mod\n        val total7 = (total6 * total) % mod\n        val same8 = (same7 * same) % mod\n        val diff8 = (diff7 * diff) % mod\n        val total8 = (total7 * total) % mod\n        val same9 = (same8 * same) % mod\n        val diff9 = (diff8 * diff) % mod\n        val total9 = (total8 * total) % mod\n        val same10 = (same9 * same) % mod\n        val diff10 = (diff9 * diff) % mod\n        val total10 = (total9 * total) % mod\n        val same11 = (same10 * same) % mod\n        val diff11 = (diff10 * diff) % mod\n        val total11 = (total10 * total) % mod\n        val same12 = (same11 * same) % mod\n        val diff12 = (diff11 * diff) % mod",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            val total = same + diff\n            (total * total) % 1000000007\n        }",
    "        if (n == 0) 0\n        else if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 1) k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        var same = k\n        var diff = k * (k - 1)\n        for (i <- 3 to n.toInt) {\n            var temp = diff\n            diff = (same + diff) * (k - 1)\n            same = temp\n        }\n        same + diff",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        val dp = Array.fill(n.toInt + 1)(0L)\n        dp(1) = k\n        dp(2) = k * k\n        for (i <- 3 to n.toInt) {\n            dp(i) = (k - 1) * (dp(i - 1) + dp(i - 2))\n        }\n        dp(n.toInt)",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 1, k)\n        }",
    "        if (n == 1) k\n        else if (n == 2) k * k\n        else {\n            val same = k\n            val diff = k * (k - 1)\n            same + diff * countNoOfWays(n - 2, k)\n        }",
    "        if (n == 0) return 0\n        if (n == 1) return k\n        if (n == 2) return k * k\n        val same = k\n        val diff = k * (k - 1)\n        val total = same + diff\n        val same2 = total * (k - 1)\n        val diff2 = total * (k - 1)\n        val total2 = same2 + diff2\n        return total2"
  ]
}