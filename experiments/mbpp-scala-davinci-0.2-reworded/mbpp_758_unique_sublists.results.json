{
  "name": "mbpp_758_unique_sublists",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_758_unique_sublists.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[Tuple2[Any, Any]]\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ot6pypd.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ot6pypd.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0d23c21c.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0d23c21c.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc__edlo8.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpc__edlo8.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_y_oyzwa.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_y_oyzwa.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[ListBuffer[Any]].length) {\n            if (list1.asInstanceOf[ListBuffer[Any]].apply(i).isInstanceOf[ListBuffer[Any]]) {\n                list2 += list1.asInstanceOf[ListBuffer[Any]].apply(i).asInstanceOf[ListBuffer[Any]]\n            }\n        }\n        for (i <- 0 until list2.length) {\n            var count = 0\n            for (j <- 0 until list2.length) {\n                if (list2.apply(i).asInstanceOf[ListBuffer[Any]] == list2.apply(j).asInstanceOf[ListBuffer[Any]]) {\n                    count += 1\n                }\n            }\n            map += (list2.apply(i).asInstanceOf[ListBuffer[Any]] -> count)\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2i8jswt.scala:25:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpw2i8jswt.scala:25:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe1_1vvk0.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpe1_1vvk0.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_e1ecgn.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_e1ecgn.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> (map.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1))\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (x <- list) {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyd6daor.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyd6daor.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (elem <- list) {\n            val tuple = elem.asInstanceOf[List[Any]].toSet\n            if (map.contains(tuple)) map(tuple) += 1\n            else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpehw0vy3n.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpehw0vy3n.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) map(i) += 1 else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9z0wswrr.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9z0wswrr.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb7s2ezj3.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb7s2ezj3.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    if (map.contains(item)) {\n                        map(item) = map(item) + 1\n                    } else {\n                        map(item) = 1\n                    }\n                }\n            }\n            case _ => {\n                if (map.contains(list1)) {\n                    map(list1) = map(list1) + 1\n                } else {\n                    map(list1) = 1\n                }\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr0i94mlz.scala:28:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpr0i94mlz.scala:28:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn76ht8ba.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn76ht8ba.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = new HashMap[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509989,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpf1ls2dhz.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf1ls2dhz.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf1ls2dhz.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpf1ls2dhz.scala:11:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf1ls2dhz.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90pb27p8.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp90pb27p8.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (x <- list2) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgum3jbnb.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpgum3jbnb.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9j962ww.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:11:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9j962ww.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        var list = list1.asInstanceOf[List[Any]]\n        for (i <- 0 until list.length) {\n            var sublist = list.slice(i, list.length)\n            if (map.contains(sublist)) map(sublist) += 1\n            else map(sublist) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjqvepaz5.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpjqvepaz5.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[List[Any]]]\n        val map = new HashMap[List[Any], Int]\n        for (list <- list2) {\n            if (map.contains(list)) map(list) += 1\n            else map(list) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9i6x3xe.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpu9i6x3xe.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaj0k4lfn.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaj0k4lfn.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 to list2.length - 1) {\n            var tuple = list2(i).asInstanceOf[Tuple2[Any, Any]]\n            if (map.contains(tuple)) map(tuple) += 1\n            else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkd18xn0.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdkd18xn0.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 to list2.length - 1) {\n            var list3 = list2(i).asInstanceOf[List[Any]]\n            if (map.contains(list3)) {\n                map(list3) += 1\n            } else {\n                map(list3) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_evaih_7.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_evaih_7.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            var list2 = list1(i)\n            var tuple = (list2)\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2gz1cw6k.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2gz1cw6k.scala:8:24 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mlist2\u001b[0m = list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2gz1cw6k.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2gz1cw6k.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong),",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4iqs3x36.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4iqs3x36.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoidaja8h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoidaja8h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgcey4bz.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgcey4bz.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (sublist <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(sublist)) {\n                map(sublist) += 1\n            } else {\n                map(sublist) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk02qwcvf.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpk02qwcvf.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (x <- list) {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyd6daor.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdyd6daor.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        list1.asInstanceOf[List[Any]].foreach(x => {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        })\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpipaunysm.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpipaunysm.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = ListBuffer[Any]()\n        var list3 = ListBuffer[Any]()\n        var list4 = ListBuffer[Any]()\n        var list5 = ListBuffer[Any]()\n        var list6 = ListBuffer[Any]()\n        var list7 = ListBuffer[Any]()\n        var list8 = ListBuffer[Any]()\n        var list9 = ListBuffer[Any]()\n        var list10 = ListBuffer[Any]()\n        var list11 = ListBuffer[Any]()\n        var list12 = ListBuffer[Any]()\n        var list13 = ListBuffer[Any]()\n        var list14 = ListBuffer[Any]()\n        var list15 = ListBuffer[Any]()\n        var list16 = ListBuffer[Any]()\n        var list17 = ListBuffer[Any]()\n        var list18 = ListBuffer[Any]()\n        var list19 = ListBuffer[Any]()\n        var list20 = ListBuffer[Any]()\n        var list21 = ListBuffer[Any]()\n        var list22 = ListBuffer[Any]()\n        var list23 = ListBuffer[Any]()\n        var list24 = ListBuffer[Any]()\n        var list25 = ListBuffer[Any]()\n        var list26 = ListBuffer[Any]()\n        var list27 = ListBuffer[Any]()\n        var list28 = ListBuffer[Any]()\n        var list29 = ListBuffer[Any]()\n        var list30 = ListBuffer[Any]()\n        var list31 = ListBuffer[Any]()\n        var list32 = ListBuffer[Any]()\n        var list33 = ListBuffer[Any]()\n        var list34 = ListBuffer[Any]()\n        var list35 = ListBuffer[Any]()\n        var list36 = ListBuffer[Any]()\n        var list37 = ListBuffer[Any]()\n        var list38 = ListBuffer[Any]()\n        var list39 = ListBuffer[Any]()\n        var list40 = ListBuffer[Any]()\n        var list41 = ListBuffer[Any]()\n        var list42 = ListBuffer[Any]()\n        var list43 = ListBuffer[Any]()\n        var list44 = ListBuffer\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp953vf1v8.scala:51:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp953vf1v8.scala:51:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m51 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.toSet)\n        var list5 = list4.map(x => x.toList)\n        var list6 = list5.map(x => x.sorted)\n        var list7 = list6.map(x => x.toString)\n        var list8 = list7.map(x => x.replace(\"List(\", \"(\"))\n        var list9 = list8.map(x => x.replace(\")\", \"\"))\n        var list10 = list9.map(x => x.replace(\" \", \"\"))\n        var list11 = list10.map(x => x.replace(\",\", \" \"))\n        var list12 = list11.map(x => x.replace(\"(\", \"(\"))\n        var list13 = list12.map(x => x.replace(\")\", \")\"))\n        var list14 = list13.map(x => x.replace(\" \", \",\"))\n        var list15 = list14.map(x => x.replace(\"(\", \"(\"))\n        var list16 = list15.map(x => x.replace(\")\", \")\"))\n        var list17 = list16.map(x => x.replace(\" \", \",\"))\n        var list18 = list17.map(x => x.replace(\"(\", \"(\"))\n        var list19 = list18.map(x => x.replace(\")\", \")\"))\n        var list20 = list19.map(x => x.replace(\" \", \",\"))\n        var list21 = list20.map(x => x.replace(\"(\", \"(\"))\n        var list22 = list21.map(x => x.replace(\")\", \")\"))\n        var list23 = list22.map(x => x.replace(\" \", \",\"))\n        var list24 = list23.map(x => x.replace(\"(\", \"(\"))\n        var list25 = list24.map(x => x.replace(\")\", \")\"))\n        var list26 = list25.\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122418,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmptrdnh5p8.scala:31:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    an identifier expected, but '}' found\n\u001b[31m\u001b[31m-- Error: /tmp/tmptrdnh5p8.scala:10:43 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist6\u001b[0m = list5.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m   |\u001b[0m                                           ^\u001b[0m\n\u001b[31m   |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m   |\u001b[0mI found:\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m   |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m   |\u001b[0m    )\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrdnh5p8.scala:33:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmptrdnh5p8.scala:33:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.to",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map += (i -> (map(i) + 1))\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfvh6df23.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfvh6df23.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsv0b1o7.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppsv0b1o7.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhgtvki6.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhgtvki6.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => (x, xs.count(_ == x)) :: uniqueSublists(xs.filter(_ != x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnvw2f0hf.scala:8:50 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => (x, xs.count(_ == x)) :: uniqueSublists(xs.filter(_ != x))\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                           value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnvw2f0hf.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnvw2f0hf.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2immu57e.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2immu57e.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            } else {\n                map += (list2(i) -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3lzl1nfv.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3lzl1nfv.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 to list2.length - 1) {\n            var tuple = list2(i).asInstanceOf[List[Any]].toTuple\n            if (map.contains(tuple)) map(tuple) += 1\n            else map += (tuple -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp97v6rod_.scala:9:57 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list2(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toTuple\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        value toTuple is not a member of List[Any]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp97v6rod_.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp97v6rod_.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var list3 = list2.map(x => x.asInstanceOf[List[Any]])\n        var list4 = list3.map(x => x.sorted)\n        var list5 = list4.map(x => x.toString)\n        var list6 = list5.groupBy(x => x)\n        var list7 = list6.map(x => (x._1.replace(\"List(\", \"\").replace(\")\", \"\").split(\",\").map(x => x.trim).toList, x._2.length))\n        return list7\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpfix5fxhq.scala:8:43 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mvar\u001b[0m \u001b[36mlist4\u001b[0m = list3.map(\u001b[36mx\u001b[0m => x.sorted)\n\u001b[31m\u001b[31m  |\u001b[0m                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.ordered[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type scala.math.Ordering.AsComparable[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfix5fxhq.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfix5fxhq.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vq_q8tr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp9vq_q8tr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (item <- list) {\n            if (map.contains(item)) {\n                map(item) = map(item) + 1\n            } else {\n                map(item) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn48mgco_.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpn48mgco_.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val sublists = list.map(x => x.asInstanceOf[List[Any]]).toSet\n        val map = new HashMap[List[Any], Int]\n        for (sublist <- sublists) {\n            map(sublist) = list.map(x => x.asInstanceOf[List[Any]]).count(x => x == sublist)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy00up_em.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpy00up_em.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var sublist = list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)\n            if (map.contains(sublist)) map(sublist) += 1\n            else map += (sublist -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6lvl4d_7.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp6lvl4d_7.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_y_oyzwa.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_y_oyzwa.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_d0x1hz8.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_d0x1hz8.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> (map(list1.asInstanceOf[List[Any]].apply(i)) + 1))\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt93ht0ad.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpt93ht0ad.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xvj8k3r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xvj8k3r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        return null\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55yub1ov.scala:10:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp55yub1ov.scala:10:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhgtvki6.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhgtvki6.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map += (list1(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpndiujp7a.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpndiujp7a.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpndiujp7a.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpndiujp7a.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map += (list1(i) -> \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpndiujp7a.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x6831sj.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3x6831sj.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_e1ecgn.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv_e1ecgn.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (item <- list) {\n            if (map.contains(item)) {\n                map(item) += 1\n            } else {\n                map(item) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntwqrnqr.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpntwqrnqr.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhgtvki6.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpfhgtvki6.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoidaja8h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoidaja8h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map.update(list1.asInstanceOf[List[Any]].apply(i), map.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1)\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5__jbh0_.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5__jbh0_.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case list1 : List[Any] => {\n                var map = Map[Any, Int]()\n                for (item <- list1) {\n                    if (map.contains(item)) {\n                        map(item) += 1\n                    } else {\n                        map(item) = 1\n                    }\n                }\n                map\n            }\n            case _ => list1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq_tq7_ex.scala:22:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpq_tq7_ex.scala:22:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- 0 until list.length) {\n            val tuple = list(i).asInstanceOf[List[Any]].toTuple\n            if (map.contains(tuple)) map(tuple) += 1 else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122433,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp_w1loh9w.scala:9:56 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtuple\u001b[0m = list(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toTuple\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        value toTuple is not a member of List[Any]\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_w1loh9w.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_w1loh9w.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m)))",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122430,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cxbe8n6.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1cxbe8n6.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => (x, xs.count(y => y == x)) :: uniqueSublists(xs.filter(y => y != x))\n            case x :: xs => uniqueSublists(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122435,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpb5fdntyq.scala:8:69 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m (x : List[Any]) :: xs => (x, xs.count(y => y == x)) :: uniqueSublists(xs.filter(y => y != x))\n\u001b[31m\u001b[31m  |\u001b[0m                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                           value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb5fdntyq.scala:13:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpb5fdntyq.scala:13:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) map(list1(i)) += 1\n            else map(list1(i)) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122436,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpvxm01vgh.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvxm01vgh.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvxm01vgh.scala:8:44 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                                            ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                  \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpvxm01vgh.scala:9:21 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33melse\u001b[0m map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpvxm01vgh.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:27 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                           Not found: Any\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpird34et5.scala:9:260 ------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m  |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                                            Not found: Any\n\u001b[31m ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[List[Any]]]\n        val map = Map[List[Any], Int]()\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122432,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpium6nfko.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpium6nfko.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122434,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpma0psz90.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpma0psz90.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (list1.asInstanceOf[List[Any]].apply(i).isInstanceOf[List[Any]]) {\n                var tuple = (list1.asInstanceOf[List[Any]].apply(i).asInstanceOf[List[Any]].apply(0), list1.asInstanceOf[List[Any]].apply(i).asInstanceOf[List[Any]].apply(1))\n                if (map.contains(tuple)) map(tuple) += 1\n                else map += tuple -> 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ura0c9z.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1ura0c9z.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaj0k4lfn.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaj0k4lfn.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xvj8k3r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4xvj8k3r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (x <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map += (x -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122442,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg09o15p5.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg09o15p5.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            }\n            else {\n                map += (list1(i) -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp2ygg1qiw.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2ygg1qiw.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2ygg1qiw.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp2ygg1qiw.scala:12:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m                map += (list1(i) -> \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2ygg1qiw.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) += 1\n            }\n            else {\n                map += (list2(i) -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi7zqftdk.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpi7zqftdk.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Map()\n            case _ => {\n                val list2 = list1.asInstanceOf[List[Any]]\n                val list3 = list2.map(x => (x, list2.count(y => y == x)))\n                val list4 = list3.distinct\n                list4.toMap\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzxyahtro.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzxyahtro.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list = list1.asInstanceOf[List[Any]]\n        var map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                var value = map(list(i))\n                map(list(i)) = value + 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf2egaby6.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpf2egaby6.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2immu57e.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2immu57e.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            }\n            else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_y_oyzwa.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp_y_oyzwa.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- 0 until list.length) {\n            val tuple = list(i).asInstanceOf[List[Any]].toList.toString\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyty0df8_.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpyty0df8_.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> (map.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1))\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (map.contains(list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length))) {\n                map(list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)) += 1\n            } else {\n                map += (list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eodgf02.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5eodgf02.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (elem <- list) {\n            val tuple = elem.asInstanceOf[List[Any]].toSet\n            if (map.contains(tuple)) map(tuple) += 1 else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpws2qt92x.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpws2qt92x.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.length) {\n            var tuple = list1(i)\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp70f9qcov.scala:7:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until list1.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp70f9qcov.scala:8:24 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp70f9qcov.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp70f9qcov.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), Lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgcey4bz.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgcey4bz.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoidaja8h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoidaja8h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    if (map.contains(i)) {\n                        map(i) += 1\n                    } else {\n                        map(i) = 1\n                    }\n                }\n            }\n            case _ => {\n                map(list1) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg_czi4fm.scala:24:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpg_czi4fm.scala:24:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykj_4wsp.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykj_4wsp.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        var list = list1.asInstanceOf[List[Any]]\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toSet.toList\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122446,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4m3gy01s.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4m3gy01s.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for(i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            var tuple = list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)\n            if(map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122445,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0o4u90d1.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0o4u90d1.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[List[Any]]]\n        val map = new HashMap[List[Any], Int]()\n        for (l <- list) {\n            if (map.contains(l)) map(l) += 1\n            else map(l) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzn3j9ipe.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzn3j9ipe.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3jz71994.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp3jz71994.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        var list = list1.asInstanceOf[List[Any]]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122447,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxnvmfuw.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbxnvmfuw.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdknn1izl.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdknn1izl.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            val tuple = list(i).asInstanceOf[List[Any]].toSet.toList.sorted\n            if (map.contains(tuple)) map(tuple) += 1 else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122453,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa28v_dwx.scala:9:75 ------------------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mtuple\u001b[0m = list(i).asInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]].toSet.toList.sorted\n\u001b[31m\u001b[31m  |\u001b[0m                                                                           ^\u001b[0m\n\u001b[31m  |\u001b[0mNo implicit Ordering defined for Any..\n\u001b[31m  |\u001b[0mI found:\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m    scala.math.Ordering.comparatorToOrdering[\u001b[35mAny\u001b[0m](\n\u001b[31m  |\u001b[0m      /* missing */summon[java.util.Comparator[Any]]\n\u001b[31m  |\u001b[0m    )\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0mBut no implicit values were found that match type java.util.Comparator[Any].\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa28v_dwx.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa28v_dwx.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong,",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            if (map.contains(list(i))) {\n                map(list(i)) += 1\n            } else {\n                map(list(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122450,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1zqyrkcl.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1zqyrkcl.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map(list1.asInstanceOf[List[Any]].apply(i)) += 1\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwyxb9fui.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwyxb9fui.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122451,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuebnom8r.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuebnom8r.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        var list = list1.asInstanceOf[List[Any]]\n        for (i <- 0 until list.length) {\n            var tuple = list(i).asInstanceOf[List[Any]].toList\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map(tuple) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa71kter4.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpa71kter4.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- 0 until list.length) {\n            val sublist = list(i)\n            if (map.contains(sublist)) map(sublist) += 1\n            else map(sublist) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldk72bmg.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpldk72bmg.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Map()\n            case (x : List[Any]) :: xs => {\n                val map = uniqueSublists(xs).asInstanceOf[Map[List[Any], Int]]\n                map.get(x) match {\n                    case Some(i) => map + (x -> (i + 1))\n                    case None => map + (x -> 1)\n                }\n            }\n            case x :: xs => uniqueSublists(xs)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122457,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4irve5tf.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp4irve5tf.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122448,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdknn1izl.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpdknn1izl.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> (map.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1))\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2053exwq.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2053exwq.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcmkedc_m.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpcmkedc_m.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9j962ww.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:11:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9j962ww.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case list1 : List[Any] => {\n                val list2 = list1.map(x => x match {\n                    case x : List[Any] => x.toSet\n                    case _ => x\n                })\n                val list3 = list2.groupBy(x => x).map(x => (x._1, x._2.length))\n                list3\n            }\n            case _ => \"The argument must be a list.\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp78vawkc1.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp78vawkc1.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpowk1hu2w.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9j962ww.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:11:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9j962ww.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = new HashMap[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmp38d3r1z1.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp38d3r1z1.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp38d3r1z1.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmp38d3r1z1.scala:11:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp38d3r1z1.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122444,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykj_4wsp.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpykj_4wsp.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = new HashMap[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) map(i) += 1\n            else map += (i -> 1)\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0yjt7fuj.scala:14:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp0yjt7fuj.scala:14:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m14 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            val tuple = i.asInstanceOf[List[Any]].toSet.toList.toString\n            if (map.contains(tuple)) map(tuple) += 1\n            else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps9854gxe.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmps9854gxe.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = new HashMap[Any, Int]\n        for (i <- 0 until list2.length) {\n            if (map.contains(list2(i))) {\n                map(list2(i)) = map(list2(i)) + 1\n            } else {\n                map(list2(i)) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpef8xonhy.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpef8xonhy.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (x <- list) {\n            if (map.contains(x)) {\n                map(x) += 1\n            } else {\n                map(x) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122459,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmrc2ye69.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpmrc2ye69.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122429,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp7792ig61.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) map(i) += 1\n            else map(i) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122414,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2wjia04r.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122428,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmph59r46gp.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map(list1.asInstanceOf[List[Any]].apply(i)) = map(list1.asInstanceOf[List[Any]].apply(i)) + 1\n            } else {\n                map(list1.asInstanceOf[List[Any]].apply(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiyiczc1l.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpiyiczc1l.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122460,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uuz6xy2.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1uuz6xy2.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            if (list2(i).isInstanceOf[List[Any]]) {\n                var tuple = list2(i).asInstanceOf[List[Any]].toSet\n                if (map.contains(tuple)) {\n                    map(tuple) += 1\n                } else {\n                    map(tuple) = 1\n                }\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo9oe_7hl.scala:21:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpo9oe_7hl.scala:21:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m21 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    if (map.contains(i)) {\n                        map(i) += 1\n                    } else {\n                        map += (i -> 1)\n                    }\n                }\n                return map\n            }\n            case _ => return \"Not a list\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122461,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1oulfdfc.scala:22:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp1oulfdfc.scala:22:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        // Write your code here\n        val list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzizql3et.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpzizql3et.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- list) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhx2tstg.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbhx2tstg.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.length) {\n            var tuple = list1(i)\n            if (map.contains(tuple)) map(tuple) += 1\n            else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpggy6gd_h.scala:7:32 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until list1.length) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                          value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpggy6gd_h.scala:8:24 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mvar\u001b[0m \u001b[36mtuple\u001b[0m = list1(i)\n\u001b[31m\u001b[31m  |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpggy6gd_h.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpggy6gd_h.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), Lis",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpuc8g1clr.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (x <- list2) {\n            if (map.contains(x)) map(x) += 1\n            else map(x) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxxfbkcxp.scala:15:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpxxfbkcxp.scala:15:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m15 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list2 = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]\n        for (i <- list2) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122434,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpma0psz90.scala:18:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpma0psz90.scala:18:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m18 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = new HashMap[Any, Int]()\n        for (i <- 0 until list.length) {\n            val tuple = list(i).asInstanceOf[List[Any]].toList\n            if (map.contains(tuple)) map(tuple) += 1\n            else map(tuple) = 1\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122462,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13h8vbqt.scala:16:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp13h8vbqt.scala:16:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        val list = list1.asInstanceOf[List[Any]]\n        val map = Map[Any, Int]()\n        for (i <- 0 until list.length) {\n            val sublist = list(i)\n            if (map.contains(sublist)) {\n                map(sublist) += 1\n            } else {\n                map(sublist) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122463,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppcdqcqp4.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppcdqcqp4.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var count = 0\n        var map = Map[Any, Int]()\n        for(i <- 0 to list1.length - 1) {\n            if(list1(i).isInstanceOf[List[Any]]) {\n                if(map.contains(list1(i))) {\n                    map(list1(i)) += 1\n                } else {\n                    map += (list1(i) -> 1)\n                }\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmppjqv8w2_.scala:8:28 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        \u001b[33mfor\u001b[0m(i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjqv8w2_.scala:9:15 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            \u001b[33mif\u001b[0m(list1(i).isInstanceOf[\u001b[35mList\u001b[0m[\u001b[35mAny\u001b[0m]]) {\n\u001b[31m\u001b[31m  |\u001b[0m               ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m               \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjqv8w2_.scala:10:32 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m                \u001b[33mif\u001b[0m(map.contains(list1(i))) {\n\u001b[31m\u001b[31m   |\u001b[0m                                ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjqv8w2_.scala:11:24 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                    map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                        \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmppjqv8w2_.scala:13:28 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m                    map += (list1(i) -> \u001b[31m1\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                            ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                            \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmppjqv8w2_.scala:20:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m20 |\u001b[0m    a",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122443,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpaveimh5h.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.length - 1) {\n            if (map.contains(list1(i))) {\n                map(list1(i)) += 1\n            } else {\n                map(list1(i)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpv9j962ww.scala:7:29 -------------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m to list1.length - \u001b[31m1\u001b[0m) {\n\u001b[31m\u001b[31m  |\u001b[0m                       ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                       value length is not a member of Any\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:8:29 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mif\u001b[0m (map.contains(list1(i))) {\n\u001b[31m\u001b[31m  |\u001b[0m                             ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                             \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:9:20 ------------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m                map(list1(i)) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpv9j962ww.scala:11:20 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                map(list1(i)) = \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    \u001b[33mparameter\u001b[0m \u001b[35mlist1\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpv9j962ww.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m)",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var list2 = list1.asInstanceOf[List[Any]]\n        var map = Map[Any, Int]()\n        for (i <- 0 until list2.length) {\n            var tuple = list2(i).asInstanceOf[Tuple2[Any, Any]]\n            if (map.contains(tuple)) {\n                map(tuple) += 1\n            } else {\n                map += (tuple -> 1)\n            }\n        }\n        return map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ot6pypd.scala:19:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp5ot6pypd.scala:19:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any,Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp05ez5k5s.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp05ez5k5s.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) += 1\n            } else {\n                map(i) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmphlz00rwm.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        list1 match {\n            case Nil => Nil\n            case x :: xs => (x, xs.count(_ == x)) :: uniqueSublists(xs.filter(_ != x))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122416,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpnvw2f0hf.scala:8:50 -------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m            \u001b[33mcase\u001b[0m x :: xs => (x, xs.count(_ == x)) :: uniqueSublists(xs.filter(_ != x))\n\u001b[31m\u001b[31m  |\u001b[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                                           value :: is not a member of Any\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnvw2f0hf.scala:12:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpnvw2f0hf.scala:12:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map(list1.asInstanceOf[List[Any]].apply(i)) += 1\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122449,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwyxb9fui.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpwyxb9fui.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 until list1.asInstanceOf[List[Any]].length) {\n            if (map.contains(list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length))) {\n                map(list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)) += 1\n            } else {\n                map(list1.asInstanceOf[List[Any]].slice(i, list1.asInstanceOf[List[Any]].length)) = 1\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122464,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2741cav9.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmp2741cav9.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- list1.asInstanceOf[List[Any]]) {\n            if (map.contains(i)) {\n                map(i) = map(i) + 1\n            } else {\n                map += (i -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1666122413,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgcey4bz.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpbgcey4bz.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to count lists within a list. The function should return a map where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    def uniqueSublists(list1 : Any) : Any = {\n        var map = Map[Any, Int]()\n        for (i <- 0 to list1.asInstanceOf[List[Any]].length - 1) {\n            if (map.contains(list1.asInstanceOf[List[Any]].apply(i))) {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> (map.apply(list1.asInstanceOf[List[Any]].apply(i)) + 1))\n            } else {\n                map += (list1.asInstanceOf[List[Any]].apply(i) -> 1)\n            }\n        }\n        map\n    }\n    def main(args: Array[String]) = {\n    assert(uniqueSublists((Any(List[Long](1l.toLong, 3l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](1l.toLong, 3l.toLong), List[Long](13l.toLong, 15l.toLong, 17l.toLong), List[Long](5l.toLong, 7l.toLong), List[Long](9l.toLong, 11l.toLong)))).equals((Any((1l, 3l) -> 2l, (5l, 7l) -> 2l, (13l, 15l, 17l) -> 1l, (9l, 11l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"green\", \"orange\"), List[String](\"black\"), List[String](\"green\", \"orange\"), List[String](\"white\")))).equals((Any((\"green\", \"orange\") -> 2l, (\"black\") -> 1l, (\"white\") -> 1l))));\n    assert(uniqueSublists((Any(List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong), List[Long](60l.toLong, 70l.toLong, 50l.toLong, 50l.toLong), List[Long](90l.toLong, 100l.toLong, 200l.toLong)))).equals((Any((10l, 20l, 30l, 40l) -> 1l, (60l, 70l, 50l, 50l) -> 1l, (90l, 100l, 200l) -> 1l))));\n    assert(uniqueSublists((Any(List[String](\"john\")))).equals((Any((\"john\") -> 1l))));\n    }\n\n}\n",
      "timestamp": 1665509988,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:27 ------------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Not found: Any\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpty1dvuol.scala:17:260 -----------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m    assert(uniqueSublists((Any(List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m1l\u001b[0m.toLong, \u001b[31m3l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m13l\u001b[0m.toLong, \u001b[31m15l\u001b[0m.toLong, \u001b[31m17l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m5l\u001b[0m.toLong, \u001b[31m7l\u001b[0m.toLong), List[\u001b[35mLong\u001b[0m](\u001b[31m9l\u001b[0m.toLong, \u001b[31m11l\u001b[0m.toLong)))).equals((Any((\u001b[31m1l\u001b[0m, \u001b[31m3l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m5l\u001b[0m, \u001b[31m7l\u001b[0m) -> \u001b[31m2l\u001b[0m, (\u001b[31m13l\u001b[0m, \u001b[31m15l\u001b[0m, \u001b[31m17l\u001b[0m) -> \u001b[31m1l\u001b[0m, (\u001b[31m9l\u001b[0m, \u001b[31m11l\u001b[0m) -> \u001b[31m1l\u001b[0m))));\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                                                                                                                                                                                    ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                          Not found: Any\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}