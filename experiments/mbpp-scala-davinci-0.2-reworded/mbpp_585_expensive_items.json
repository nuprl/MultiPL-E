{
  "name": "mbpp_585_expensive_items",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the n most expensive items in a given dataset.\n    def expensiveItems(items : List[Map[String,Either[String, Float]]], n : Long) : List[Map[String,Either[String, Float]]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f))), (2l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f)))));\n    assert(expensiveItems((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-1\", \"price\" -> 101.1f), Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f), Map[String,String](\"name\" -> \"Item-3\", \"price\" -> 45.09f), Map[String,String](\"name\" -> \"Item-4\", \"price\" -> 22.75f))), (1l)).equals((List[Map[String,Either[String, Float]]](Map[String,String](\"name\" -> \"Item-2\", \"price\" -> 555.22f)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortWith((x,y) => x(\"price\").right.get > y(\"price\").right.get).take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortWith((x, y) => x(\"price\").right.get > y(\"price\").right.get).take(n.toInt)",
    "        items.sortBy(item => item(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x.get(\"price\").get.right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(item => item(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortWith((a, b) => a(\"price\").right.get > b(\"price\").right.get).take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)",
    "        items.sortWith((a, b) => a(\"price\").right.get > b(\"price\").right.get).take(n.toInt)",
    "        items.sortBy(x => x(\"price\").right.get).reverse.take(n.toInt)"
  ]
}