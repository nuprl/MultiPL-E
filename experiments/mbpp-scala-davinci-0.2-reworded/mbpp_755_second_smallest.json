{
  "name": "mbpp_755_second_smallest",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the second smallest number in a list.\n    def secondSmallest(numbers : Any) : Option[Float] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(secondSmallest((Any(1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(-2l));\n    assert(secondSmallest((Any(1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(-0.5f));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong))).equals(None));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong, 2l.toLong))).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case x : List[Long] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : List[Int] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(0))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val nums = numbers.asInstanceOf[List[Float]]\n        if (nums.length < 2) {\n            None\n        } else {\n            val sorted = nums.sorted\n            Some(sorted(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))"
  ]
}