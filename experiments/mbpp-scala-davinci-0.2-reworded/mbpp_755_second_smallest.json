{
  "name": "mbpp_755_second_smallest",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the second smallest number in a list.\n    def secondSmallest(numbers : Any) : Option[Float] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(secondSmallest((Any(1l.toLong, 2l.toLong, -8l.toLong, -2l.toLong, 0l.toLong, -2l.toLong))).equals(-2l));\n    assert(secondSmallest((Any(1l.toLong, 1l.toLong, -0.5f.toLong, 0l.toLong, 2l.toLong, -2l.toLong, -2l.toLong))).equals(-0.5f));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong))).equals(None));\n    assert(secondSmallest((Any(2l.toLong, 2l.toLong, 2l.toLong))).equals(None));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case x : List[Long] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : List[Int] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(0))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val nums = numbers.asInstanceOf[List[Float]]\n        if (nums.length < 2) {\n            None\n        } else {\n            val sorted = nums.sorted\n            Some(sorted(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        return Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Int] => xs.sorted\n            case xs : List[Float] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val list = numbers.asInstanceOf[List[Float]]\n        if (list.length < 2) None\n        else Some(list.sortWith(_ < _)(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        numbers match {\n            case list : List[Float] => {\n                for (number <- list) {\n                    if (number < min) {\n                        secondMin = min\n                        min = number\n                    }\n                    else if (number < secondMin) {\n                        secondMin = number\n                    }\n                }\n            }\n            case _ => return None\n        }\n        if (secondMin == Float.MaxValue) return None\n        return Some(secondMin)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1).asInstanceOf[Float])\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            } else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sortedNumbers = numbers.asInstanceOf[List[Float]].sorted\n        if (sortedNumbers.length < 2) None\n        else Some(sortedNumbers(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers.asInstanceOf[List[Float]]\n        if (list.length < 2) None\n        else {\n            val sortedList = list.sorted\n            Some(sortedList(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            var temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        return Some(secondSmallest)",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length > 1) {\n                val min = list.min\n                val minIndex = list.indexOf(min)\n                val listWithoutMin = list.patch(minIndex, Nil, 1)\n                val secondMin = listWithoutMin.min\n                Some(secondMin)\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val sortedNumbers = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n            if (sortedNumbers.length > 1) {\n                Some(sortedNumbers(1))\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sortedList = list.sorted\n        Some(sortedList(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (n <- numbers.asInstanceOf[List[Float]]) {\n            if (n < min) {\n                secondMin = min\n                min = n\n            } else if (n < secondMin) {\n                secondMin = n\n            }\n        }\n        if (secondMin == Float.MaxValue) None else Some(secondMin)",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sortedNumbers = numbers.asInstanceOf[List[Float]].sorted\n        if (sortedNumbers.length < 2) None\n        else Some(sortedNumbers(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            } else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val list = numbers match {\n            case l : List[Float] => l\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = Float.MaxValue\n        var min2 = Float.MaxValue\n        for (i <- 0 until list.length) {\n            if (list(i) < min) {\n                min2 = min\n                min = list(i)\n            }\n            else if (list(i) < min2) {\n                min2 = list(i)\n            }\n        }\n        if (min2 == Float.MaxValue) return None\n        return Some(min2)",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            }\n            else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sortWith(_ < _)\n            case x : List[Float] => x.sortWith(_ < _)\n            case x : List[Double] => x.sortWith(_ < _)\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sorted\n            case xs : Array[Float] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Int]]) {\n            val list = numbers.asInstanceOf[List[Int]]\n            if (list.length < 2) {\n                return None\n            }\n            val sorted = list.sortWith(_ < _)\n            return Some(sorted(1))\n        }\n        return None",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case x : List[Long] => x.map(_.toFloat)\n            case x : List[Short] => x.map(_.toFloat)\n            case x : List[Byte] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sortWith(_ < _)\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        var smallest = Float.MaxValue\n        var secondSmallest = Float.MaxValue\n        for (number <- numbers.asInstanceOf[List[Float]]) {\n            if (number < smallest) {\n                secondSmallest = smallest\n                smallest = number\n            } else if (number < secondSmallest) {\n                secondSmallest = number\n            }\n        }\n        if (secondSmallest == Float.MaxValue) None else Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case list : List[Int] => list\n            case list : List[Float] => list\n            case list : List[Double] => list\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Int] => xs.sortWith(_ < _)\n            case xs : List[Float] => xs.sortWith(_ < _)\n            case xs : List[Double] => xs.sortWith(_ < _)\n            case _ => return None\n        }\n        if (sorted.length < 2)\n            return None\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.size < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val nums = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (nums.length < 2) return None\n        val sorted = nums.sorted\n        return Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var first = list(0)\n        var second = list(1)\n        if (first > second) {\n            val temp = first\n            first = second\n            second = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < first) {\n                second = first\n                first = list(i)\n            }\n            else if (list(i) < second) {\n                second = list(i)\n            }\n        }\n        Some(second)",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1).asInstanceOf[Float])\n            }\n        }",
    "        val sortedNumbers = numbers match {\n            case x: List[Int] => x.sorted\n            case x: List[Float] => x.sorted\n            case x: List[Double] => x.sorted\n            case x: List[Long] => x.sorted\n            case x: List[Short] => x.sorted\n            case x: List[Byte] => x.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length > 1) Some(sortedNumbers(1)) else None",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        return Some(secondSmallest)",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case _ => {\n                val sorted = numbers.asInstanceOf[List[Float]].sorted\n                if (sorted.length > 1) Some(sorted(1)) else None\n            }\n        }",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length >= 2) {\n                val sorted = list.sorted\n                Some(sorted(1))\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var min2 = list(0)\n        for (i <- 1 until list.length) {\n            if (list(i) < min) {\n                min2 = min\n                min = list(i)\n            }\n            else if (list(i) < min2) {\n                min2 = list(i)\n            }\n        }\n        return Some(min2)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val list = numbers match {\n            case xs: List[Int] => xs\n            case xs: List[Float] => xs\n            case xs: List[Double] => xs\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (number <- numbers.asInstanceOf[List[Float]]) {\n            if (number < min) {\n                secondMin = min\n                min = number\n            } else if (number < secondMin) {\n                secondMin = number\n            }\n        }\n        if (secondMin == Float.MaxValue) {\n            return None\n        } else {\n            return Some(secondMin)\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var first = list(0)\n        var second = list(1)\n        if (first > second) {\n            val temp = first\n            first = second\n            second = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < first) {\n                second = first\n                first = list(i)\n            }\n            else if (list(i) < second) {\n                second = list(i)\n            }\n        }\n        return Some(second)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                var min = x.asInstanceOf[Float]\n                var min2 = min\n                for (i <- xs) {\n                    if (i.asInstanceOf[Float] < min) {\n                        min2 = min\n                        min = i.asInstanceOf[Float]\n                    } else if (i.asInstanceOf[Float] < min2) {\n                        min2 = i.asInstanceOf[Float]\n                    }\n                }\n                Some(min2)\n            }\n        }",
    "        val sortedNumbers = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        return Some(sortedNumbers(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var smallest : Float = Float.MaxValue\n        var secondSmallest : Float = Float.MaxValue\n        for (number <- numbers.asInstanceOf[List[Float]]) {\n            if (number < smallest) {\n                secondSmallest = smallest\n                smallest = number\n            } else if (number < secondSmallest) {\n                secondSmallest = number\n            }\n        }\n        if (secondSmallest == Float.MaxValue) None else Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sortedNumbers = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        return Some(sortedNumbers(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Int] => xs.sorted\n            case xs : List[Float] => xs.sorted\n            case xs : List[Double] => xs.sorted\n            case xs : List[Long] => xs.sorted\n            case xs : List[Short] => xs.sorted\n            case xs : List[Byte] => xs.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        sorted(1) match {\n            case x : Int => Some(x.toFloat)\n            case x : Float => Some(x)\n            case x : Double => Some(x.toFloat)\n            case _ => None\n        }",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Double] => x.map(x => x.toFloat)\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Long] => x.map(x => x.toFloat)\n            case x : List[Short] => x.map(x => x.toFloat)\n            case x : List[Byte] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Any] => x\n            case _ => return None\n        }\n        val sorted = list.sorted\n        if (sorted.length < 2) return None\n        Some(sorted(1).asInstanceOf[Float])",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith((a, b) => a.asInstanceOf[Float] < b.asInstanceOf[Float])\n                Some(sorted(0).asInstanceOf[Float])\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) {\n            return None\n        }\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length > 1) {\n                val sorted = list.sorted\n                Some(sorted(1))\n            } else {\n                None\n            }\n        } else {\n            None\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val n = numbers.asInstanceOf[List[Float]]\n        if (n.length < 2) {\n            None\n        } else {\n            Some(n.sortWith(_ < _)(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            }\n            else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length >= 2) {\n            Some(sorted(1))\n        } else {\n            None\n        }",
    "        val sortedNumbers = numbers match {\n            case list : List[Int] => list.sorted\n            case list : List[Float] => list.sorted\n            case list : List[Double] => list.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        return Some(sortedNumbers(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Float] => x.sorted\n            case x : List[Int] => x.sorted.map(_.toFloat)\n            case x : List[Double] => x.sorted.map(_.toFloat)\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sorted = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var first = list(0)\n        var second = list(1)\n        if (first > second) {\n            val temp = first\n            first = second\n            second = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < first) {\n                second = first\n                first = list(i)\n            }\n            else if (list(i) < second) {\n                second = list(i)\n            }\n        }\n        Some(second)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                sorted match {\n                    case y :: ys => Some(y)\n                    case _ => None\n                }\n            }\n        }",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        return Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1).asInstanceOf[Float])\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val sorted = numbers.asInstanceOf[List[Float]].sorted\n            if (sorted.length > 1) Some(sorted(1)) else None\n        } else None",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => Some(xs.sortWith(_ < _).head)\n        }",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            } else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var min = list(0)\n        var secondMin = list(1)\n        if (min > secondMin) {\n            val temp = min\n            min = secondMin\n            secondMin = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < min) {\n                secondMin = min\n                min = list(i)\n            } else if (list(i) < secondMin) {\n                secondMin = list(i)\n            }\n        }\n        Some(secondMin)",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(x => x.toFloat)\n            case x : List[Double] => x.map(x => x.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers match {\n            case xs : List[Float] => xs.sortWith(_ < _)\n            case xs : List[Int] => xs.sortWith(_ < _)\n            case xs : List[Double] => xs.sortWith(_ < _)\n            case _ => return None\n        }\n        if (sorted.length < 2) return None\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case _ => {\n                val sorted = numbers.asInstanceOf[List[Float]].sorted\n                if (sorted.length < 2) None\n                else Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sortedList = list.sorted\n        Some(sortedList(1))",
    "        val list = numbers match {\n            case list : List[Int] => list\n            case list : List[Float] => list\n            case list : List[Double] => list\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        sorted(1) match {\n            case i : Int => Some(i.toFloat)\n            case f : Float => Some(f)\n            case d : Double => Some(d.toFloat)\n            case _ => None\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val list = numbers match {\n            case x : List[Float] => x\n            case x : List[Int] => x.map(_.toFloat)\n            case x : List[Double] => x.map(_.toFloat)\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val list = numbers match {\n            case x: List[Int] => x\n            case x: List[Float] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (number <- numbers.asInstanceOf[List[Float]]) {\n            if (number < min) {\n                secondMin = min\n                min = number\n            } else if (number < secondMin) {\n                secondMin = number\n            }\n        }\n        if (secondMin == Float.MaxValue) None else Some(secondMin)",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        return Some(sorted(1))",
    "        val list = numbers match {\n            case s : String => s.split(\",\").map(_.toFloat).toList\n            case l : List[Float] => l\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        var smallest = list(0)\n        var secondSmallest = list(1)\n        if (smallest > secondSmallest) {\n            val temp = smallest\n            smallest = secondSmallest\n            secondSmallest = temp\n        }\n        for (i <- 2 until list.length) {\n            if (list(i) < smallest) {\n                secondSmallest = smallest\n                smallest = list(i)\n            } else if (list(i) < secondSmallest) {\n                secondSmallest = list(i)\n            }\n        }\n        Some(secondSmallest)",
    "        val list = numbers match {\n            case x : List[Int] => x\n            case x : List[Float] => x\n            case x : List[Double] => x\n            case _ => return None\n        }\n        if (list.length < 2) return None\n        val sorted = list.sorted\n        Some(sorted(1))",
    "        val sortedNumbers = numbers match {\n            case x : List[Int] => x.sorted\n            case x : List[Float] => x.sorted\n            case x : List[Double] => x.sorted\n            case _ => return None\n        }\n        if (sortedNumbers.length < 2) return None\n        return Some(sortedNumbers(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sortWith(_ < _)\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                val sorted = xs.sortWith(_ < _)\n                Some(sorted(1))\n            }\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        if (numbers.isInstanceOf[List[Float]]) {\n            val list = numbers.asInstanceOf[List[Float]]\n            if (list.length < 2) {\n                None\n            }\n            else {\n                val sorted = list.sorted\n                Some(sorted(1))\n            }\n        }\n        else {\n            None\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        numbers match {\n            case Nil => None\n            case x :: Nil => None\n            case x :: xs => {\n                var sorted = xs.sortWith(_ < _)\n                sorted match {\n                    case y :: ys => Some(y)\n                    case _ => None\n                }\n            }\n        }",
    "        val nums = numbers.asInstanceOf[List[Float]]\n        if (nums.length < 2) {\n            None\n        } else {\n            Some(nums.sortWith(_ < _)(1))\n        }",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length > 1) Some(sorted(1)) else None",
    "        val sorted = numbers.asInstanceOf[List[Float]].sorted\n        if (sorted.length < 2) None\n        else Some(sorted(1))",
    "        var min = Float.MaxValue\n        var secondMin = Float.MaxValue\n        for (i <- numbers.asInstanceOf[List[Float]]) {\n            if (i < min) {\n                secondMin = min\n                min = i\n            }\n            else if (i < secondMin) {\n                secondMin = i\n            }\n        }\n        if (secondMin == Float.MaxValue) None else Some(secondMin)"
  ]
}