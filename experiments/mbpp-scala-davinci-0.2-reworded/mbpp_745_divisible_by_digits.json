{
  "name": "mbpp_745_divisible_by_digits",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/scalathon-exercises/lambda/scalathon-lambda-exercise-24.php\n    def divisibleByDigits(startnum : Long, endnum : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(divisibleByDigits((1l), (22l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong, 22l.toLong))));\n    assert(divisibleByDigits((1l), (15l)).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 11l.toLong, 12l.toLong, 15l.toLong))));\n    assert(divisibleByDigits((20l), (25l)).equals((List[Long](22l.toLong, 24l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList\n            var divisible = true\n            for (digit <- digits) {\n                if (i % digit.toString.toInt != 0) {\n                    divisible = false\n                }\n            }\n            if (divisible) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        val result = new ListBuffer[Long]\n        for (i <- startnum to endnum) {\n            if (i.toString.forall(c => i % c.asDigit == 0)) result += i\n        }\n        result.toList",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Long]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.asDigit.toLong))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisible(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(divisible).toList",
    "        def isDivisibleByDigits(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit)\n            digits.forall(digit => digit != 0 && num % digit == 0)\n        }\n        (startnum to endnum).filter(isDivisibleByDigits).toList",
    "        def divisibleByDigitsHelper(num : Long, divisor : Long) : Boolean = {\n            if (divisor == 0) true\n            else if (num % divisor == 0) divisibleByDigitsHelper(num, divisor / 10)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.toString.toInt)\n            if (digits.forall(x => i % x == 0)) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        var result : List[Long] = List()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                var digit = num % 10\n                if (digit == 0) {\n                    flag = false\n                    num = 0\n                } else if (i % digit != 0) {\n                    flag = false\n                    num = 0\n                } else {\n                    num /= 10\n                }\n            }\n            if (flag) result = result :+ i\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var digits = i.toString.toList.map(_.asDigit)\n            if (digits.forall(i % _ == 0)) result = i :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def divisibleByDigitsHelper2(num : Long) : Boolean = {\n            divisibleByDigitsHelper(num, num.toString.toList.map(_.toString.toInt))\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper2).toList",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.map(_.asDigit).toList\n            digits.forall(digit => digit == 0 || num % digit == 0)\n        }\n        (startnum to endnum).filter(num => divisibleByDigitsHelper(num)).toList",
    "        var result = List[Long]()\n        for (i <- startnum to endnum) {\n            var flag = true\n            var num = i\n            while (num > 0) {\n                val digit = num % 10\n                if (digit != 0 && i % digit != 0) {\n                    flag = false\n                    num = 0\n                }\n                num /= 10\n            }\n            if (flag) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (num <- startnum to endnum) {\n            var digits = num.toString.toList.map(_.asDigit)\n            if (digits.forall(num % _ == 0)) result = num :: result\n        }\n        result",
    "        def divisibleByDigitsHelper(num : Long, digits : List[Int]) : Boolean = {\n            if (digits.isEmpty) true\n            else if (num % digits.head == 0) divisibleByDigitsHelper(num, digits.tail)\n            else false\n        }\n        def getDigits(num : Long) : List[Int] = {\n            if (num == 0) List()\n            else (num % 10).toInt :: getDigits(num / 10)\n        }\n        def divisibleByDigitsRangeHelper(startnum : Long, endnum : Long, acc : List[Long]) : List[Long] = {\n            if (startnum > endnum) acc\n            else if (divisibleByDigitsHelper(startnum, getDigits(startnum))) divisibleByDigitsRangeHelper(startnum + 1, endnum, startnum :: acc)\n            else divisibleByDigitsRangeHelper(startnum + 1, endnum, acc)\n        }\n        divisibleByDigitsRangeHelper(startnum, endnum, List())",
    "        def divisibleByDigitsHelper(num : Long) : Boolean = {\n            val digits = num.toString.toList.map(_.asDigit)\n            digits.forall(digit => num % digit == 0)\n        }\n        (startnum to endnum).filter(divisibleByDigitsHelper).toList",
    "        def isDivisible(n : Long) : Boolean = {\n            val digits = n.toString.map(_.asDigit)\n            digits.forall(d => d != 0 && n % d == 0)\n        }\n        (startnum to endnum).filter(isDivisible).toList"
  ]
}