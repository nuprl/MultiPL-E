{
  "name": "mbpp_75_find_tuples",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    def findTuples(test_list : List[Long], K : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(findTuples((List[Long]((6l, 24l, 12l), (7l, 9l, 6l), (12l, 18l, 21l))), (6l)).equals((List[Long]((6l, 24l, 12l)))));\n    assert(findTuples((List[Long]((5l, 25l, 30l), (4l, 2l, 3l), (7l, 8l, 9l))), (5l)).equals((List[Long]((5l, 25l, 30l)))));\n    assert(findTuples((List[Long]((7l, 9l, 16l), (8l, 16l, 4l), (19l, 17l, 18l))), (4l)).equals((List[Long]((8l, 16l, 4l)))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        val result = test_list.filter(x => x % K == 0)\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result : List[Long] = List()\n        for (tuple <- test_list) {\n            if (tuple % K == 0) {\n                result = result :+ tuple\n            }\n        }\n        return result",
    "        var result_list = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j && test_list(i) % test_list(j) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list += test_list(i)\n        }\n        return result_list.toList",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag == true) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        val result = ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += test_list(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list = result_list :+ test_list(i)\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = test_list(i) :: result\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            var flag = true\n            for (j <- i) {\n                if (j % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = i :: result\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = i :: result\n        }\n        result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result_list : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = i :: result_list\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            val tuple = test_list(i)\n            if (tuple % K == 0) result = result :+ tuple\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = test_list(i) :: result\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toInt - 48 == 0 || test_list(i).toString.charAt(j).toInt - 48 > K || test_list(i).toString.charAt(j).toInt - 48 < 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result += test_list(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0 && test_list(j) % test_list(i) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = test_list(i) :: result\n            }\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        val result = for (i <- test_list if i % K == 0) yield i\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result += test_list(i)\n            }\n        }\n        result.toList",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) result = result ::: List(i)\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (tuple <- test_list) {\n            if (tuple % K == 0) {\n                result = tuple :: result\n            }\n        }\n        return result",
    "        var result_list : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list",
    "        val result = test_list.filter(x => x % K == 0)\n        return result",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list = result_list :+ test_list(i)\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = i :: result\n        }\n        result",
    "        var result_list = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list.length - 1) {\n                if (test_list(j) % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result_list = test_list :: result_list\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) result = result :+ i\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = test_list(i) :: result\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        val result = for (i <- test_list if (i % K == 0)) yield i\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (test_list(j) % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result = test_list :: result\n            }\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        return result",
    "        val result = for (i <- test_list if i % K == 0) yield i\n        result.toList",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toLong % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        var result : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var output_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toInt % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag) {\n                output_list = output_list :+ test_list(i)\n            }\n        }\n        return output_list",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (tuple <- test_list) {\n            var flag = true\n            for (i <- tuple) {\n                if (i % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = tuple :: result\n        }\n        return result",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toInt % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = new ListBuffer[Long]\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result += test_list(i)\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toLong % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (test_list(i) % test_list(j) != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list",
    "        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            var num = test_list(i)\n            while (num > 0) {\n                if (num % K != 0) {\n                    flag = false\n                    break\n                }\n                num /= K\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        return result",
    "        var result_list : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result_list = result_list :+ test_list(i)\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list(i).toString.length - 1) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).asDigit % K != 0) {\n                    flag = false\n                }\n            }\n            if (flag == true) {\n                result = test_list(i) :: result\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = i :: result_list\n            }\n        }\n        return result_list",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toInt - '0' != 0 && test_list(i).toString.charAt(j).toInt - '0' != K) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = test_list(i) :: result\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result_list : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        var result_list = List[Long]()\n        for (tuple <- test_list) {\n            if (tuple % K == 0) {\n                result_list = tuple :: result_list\n            }\n        }\n        return result_list",
    "        var result : List[Long] = List()\n        for (i <- 0 to test_list.length - 1) {\n            var flag = true\n            for (j <- 0 to test_list.length - 1) {\n                if (test_list(j) % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = new ListBuffer[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result += test_list(i)\n            }\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list(i).toString.length) {\n                if (test_list(i).toString.charAt(j).toString.toInt % K != 0) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) result = result :+ test_list(i)\n        }\n        return result",
    "        val result = test_list.filter(x => x % K == 0)\n        result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 to test_list.length - 1) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result_list = result_list :+ test_list(i)\n            }\n        }\n        return result_list",
    "        test_list.filter(x => x % K == 0)",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = result :+ i\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) result = result :+ test_list(i)\n        }\n        return result",
    "        var result : List[Long] = List()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result = i :: result\n            }\n        }\n        return result",
    "        test_list.filter(x => x % K == 0)",
    "        var result : List[Long] = List()\n        for (i <- 0 until test_list.length) {\n            if (test_list(i) % K == 0) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result = List[Long]()\n        for (i <- 0 until test_list.length) {\n            var flag = true\n            for (j <- 0 until test_list.length) {\n                if (i != j) {\n                    if (test_list(i) % test_list(j) != 0) {\n                        flag = false\n                    }\n                }\n            }\n            if (flag) {\n                result = result :+ test_list(i)\n            }\n        }\n        return result",
    "        var result_list = List[Long]()\n        for (i <- test_list) {\n            if (i % K == 0) {\n                result_list = result_list :+ i\n            }\n        }\n        return result_list"
  ]
}