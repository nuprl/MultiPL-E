{
  "name": "mbpp_3_is_not_prime",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to identify non-prime numbers.\n    def isNotPrime(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isNotPrime((2l)) == (false));\n    assert(isNotPrime((10l)) == (true));\n    assert(isNotPrime((35l)) == (true));\n    assert(isNotPrime((37l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toInt\n        for (i <- 3 to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = math.sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3L to sqrt(n).toLong by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        for (i <- 2 to sqrt(n).toInt) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n <= 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        for (i <- 3 to sqrt(n).toInt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        var i = 3\n        while (i <= sqrt(n)) {\n            if (n % i == 0) return true\n            i += 2\n        }\n        return false",
    "        if (n < 2) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val limit = sqrt(n).toLong\n        for (i <- 3L to limit by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrt = sqrt(n).toLong\n        for (i <- 3L to sqrt by 2) {\n            if (n % i == 0) return true\n        }\n        return false",
    "        if (n < 2) {\n            return true\n        }\n        if (n == 2) {\n            return false\n        }\n        if (n % 2 == 0) {\n            return true\n        }\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) {\n                return true\n            }\n        }\n        return false",
    "        if (n == 1) return true\n        if (n == 2) return false\n        if (n % 2 == 0) return true\n        val sqrtN = sqrt(n).toLong\n        for (i <- 3L to sqrtN by 2) {\n            if (n % i == 0) return true\n        }\n        return false"
  ]
}