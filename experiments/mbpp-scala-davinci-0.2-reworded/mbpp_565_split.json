{
  "name": "mbpp_565_split",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to split a string into characters.\n    def split(word : String) : List[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(split((\"python\")).equals((List[String](\"p\", \"y\", \"t\", \"h\", \"o\", \"n\"))));\n    assert(split((\"Name\")).equals((List[String](\"N\", \"a\", \"m\", \"e\"))));\n    assert(split((\"program\")).equals((List[String](\"p\", \"r\", \"o\", \"g\", \"r\", \"a\", \"m\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        return result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = word(i).toString :: result\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result : List[String] = Nil\n        for (c <- word) {\n            result = c.toString :: result\n        }\n        result",
    "        var l = List[String]()\n        for (i <- 0 until word.length) {\n            l = l :+ word.substring(i, i + 1)\n        }\n        l",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result",
    "        val list = new ListBuffer[String]\n        for (i <- 0 to word.length - 1) {\n            list += word(i).toString\n        }\n        list.toList",
    "        word.toList.map(_.toString)",
    "        var list = List[String]()\n        for (i <- 0 to word.length - 1) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list : List[String] = Nil\n        for (i <- 0 until word.length) {\n            list = list ::: List(word.substring(i, i + 1))\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var list : List[String] = List()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        if (word.length == 0)\n            List()\n        else\n            word.substring(0, 1) :: split(word.substring(1))",
    "        word.toList.map(_.toString)",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 to word.length - 1) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        result",
    "        var result = List[String]()\n        for (c <- word) {\n            result = result :+ c.toString\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 to word.length - 1) {\n            result = word(i).toString :: result\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for(i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(x => x.toString)",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        word.toList.map(_.toString)",
    "        word.toList.map(x => x.toString)",
    "        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(x => x.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        return result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) result = word(i).toString :: result\n        result",
    "        var list = List[String]()\n        for (c <- word) {\n            list = list :+ c.toString\n        }\n        return list",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result",
    "        return word.split(\"\").toList",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i+1)\n        }\n        return result",
    "        var result = List[String]()\n        for (i <- 0 until word.length)\n            result = result :+ word.substring(i, i + 1)\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        word.toList.map(x => x.toString)",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word(i).toString\n        }\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val l = new ListBuffer[String]()\n        for (i <- 0 until word.length) {\n            l += word.substring(i, i+1)\n        }\n        l.toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val result = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList",
    "        var lst = List[String]()\n        for (i <- 0 until word.length) {\n            lst = lst :+ word.charAt(i).toString\n        }\n        lst",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = word(i).toString :: result\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = word.charAt(i).toString :: result\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 to word.length - 1) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val list = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            list += word.substring(i, i+1)\n        }\n        list.toList",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var list : List[String] = List()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var list = List[String]()\n        for(i <- 0 to word.length - 1) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        return list",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val list = new ListBuffer[String]\n        for (i <- 0 until word.length) {\n            list += word.charAt(i).toString\n        }\n        list.toList",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(x => x.toString)",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (c <- word) {\n            result = c.toString :: result\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        list",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result : List[String] = Nil\n        for (i <- 0 to word.length - 1) {\n            result = word(i).toString :: result\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        return word.split(\"\").toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i+1)\n        }\n        return list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = word.substring(i, i + 1) :: result\n        }\n        result.reverse",
    "        word.toList.map(x => x.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var list = List[String]()\n        for (i <- 0 until word.length) {\n            list = list :+ word.substring(i, i + 1)\n        }\n        list",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        val result = new ListBuffer[String]()\n        for (i <- 0 until word.length) {\n            result += word.substring(i, i + 1)\n        }\n        result.toList",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = Nil\n        for (i <- 0 until word.length) {\n            result = word(i).toString :: result\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        return result",
    "        var result : List[String] = List()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 to word.length - 1) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        word.toList.map(_.toString)",
    "        word.toList.map(_.toString)",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word.substring(i, i + 1)\n        }\n        result",
    "        var result = List[String]()\n        for (i <- 0 until word.length) {\n            result = result :+ word(i).toString\n        }\n        result"
  ]
}