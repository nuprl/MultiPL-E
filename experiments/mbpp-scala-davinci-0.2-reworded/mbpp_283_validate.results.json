{
  "name": "mbpp_283_validate",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        digits.map(x => digits.count(_ == x)).zip(digits).forall(x => x._1 <= x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = (m % 10).toInt\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts.getOrElse(d, 0) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        for (digit <- digits) {\n            if (freq(digit) > digit) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.length)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        digits.groupBy(identity).mapValues(_.size).forall(x => x._2 <= x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(c => c.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digitCounts.forall(x => x._1 >= x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(freq(_) <= _)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp6oisepaw.scala:8:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        digits.forall(freq(_) <= _)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Wrong number of parameters, expected: 1\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freqs = digits.groupBy(identity).map(x => (x._1, x._2.length))\n        digits.forall(x => freqs(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val m = n.toString.map(_.asDigit).groupBy(identity).mapValues(_.size)\n        m.forall(x => x._1 >= x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(x => x.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => freq(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        digits.groupBy(identity).mapValues(_.size).forall(x => x._2 <= x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(frequency(_) <= _)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp5gf4954o.scala:8:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        digits.forall(frequency(_) <= _)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Wrong number of parameters, expected: 1\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = Array.fill(10)(0)\n        var m = n\n        while (m > 0) {\n            freq(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvc2t2eox.scala:9:17 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            freq(m % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                 Found:    Long\n\u001b[31m  |\u001b[0m                 Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => freq(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        var digits = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            digits(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) {\n            if (digits(i) > i) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122917,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp0an6c44j.scala:9:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            digits(m % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Long\n\u001b[31m  |\u001b[0m                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val s = n.toString\n        val m = new HashMap[Char, Int]\n        for (c <- s) {\n            if (m.contains(c)) m(c) += 1\n            else m(c) = 1\n        }\n        for (c <- s) {\n            if (m(c) > c.asDigit) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val counts = Array.fill(10)(0)\n        var m = n\n        while (m > 0) {\n            counts(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) if (counts(i) > i) return false\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp2eczwl6z.scala:9:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            counts(m % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Long\n\u001b[31m  |\u001b[0m                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val map = new HashMap[Int, Int]\n        var temp = n\n        while (temp > 0) {\n            val digit = (temp % 10).toInt\n            if (map.contains(digit)) map(digit) += 1\n            else map(digit) = 1\n            temp /= 10\n        }\n        for (i <- 0 to 9) {\n            if (map.contains(i) && map(i) > i) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var x = n\n        while(x > 0) {\n            freq(x % 10) += 1\n            x /= 10\n        }\n        for(i <- 0 until 10) {\n            if(freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122918,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpsoze98ge.scala:9:17 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            freq(x % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                 Found:    Long\n\u001b[31m  |\u001b[0m                 Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val digitCount = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(digit => digitCount(digit) <= digit)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        digits.groupBy(identity).mapValues(_.size).forall(x => x._2 <= x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(x => x.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => freq(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122926,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = (m % 10).toInt\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val counts = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            counts(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (counts(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpi61r8egw.scala:9:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            counts(m % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Long\n\u001b[31m  |\u001b[0m                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val counts = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            counts(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (counts(i) > i) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpr6xhzs_4.scala:9:19 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            counts(m % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                   ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                   Found:    Long\n\u001b[31m  |\u001b[0m                   Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = m % 10\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmt9bbif8.scala:10:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            freq(d) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (d : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val digitCount = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(digitCount(_) <= _)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122925,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpt61v890e.scala:8:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        digits.forall(digitCount(_) <= _)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Wrong number of parameters, expected: 1\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => freq(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(frequency(_) <= _)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122915,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmp5gf4954o.scala:8:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        digits.forall(frequency(_) <= _)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Wrong number of parameters, expected: 1\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = m % 10\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpmt9bbif8.scala:10:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m            freq(d) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                 Found:    (d : Long)\n\u001b[31m   |\u001b[0m                 Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            freq(m % 10) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (freq(i) > i) return false\n        }\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122928,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpqyj7_tpk.scala:9:17 ---------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m            freq(m % \u001b[31m10\u001b[0m) += \u001b[31m1\u001b[0m\n\u001b[31m\u001b[31m  |\u001b[0m                 ^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                 Found:    Long\n\u001b[31m  |\u001b[0m                 Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(x => counts(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val counts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => counts(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val m = n.toString.groupBy(identity).mapValues(_.length)\n        m.forall(x => x._1.asDigit <= x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmptowavzfv.scala:10)\n\tat Problem.main(tmptowavzfv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val s = n.toString\n        val m = new HashMap[Char, Int]\n        for (i <- 0 until s.length) {\n            if (m.contains(s(i))) m(s(i)) += 1\n            else m(s(i)) = 1\n        }\n        for (i <- 0 until s.length) {\n            if (m(s(i)) > s(i).asDigit) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = new Array[Int](10)\n        var m = n\n        while (m > 0) {\n            val d = (m % 10).toInt\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 until 10) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val digitCounts = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(digit => digitCounts(digit) <= digit)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(x => x.toString.toInt)\n        val counts = digits.groupBy(x => x).map(x => (x._1, x._2.length))\n        digits.forall(x => counts(x) <= x)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val freq = Array.fill(10)(0)\n        var m = n\n        while (m > 0) {\n            val d = (m % 10).toInt\n            freq(d) += 1\n            m /= 10\n        }\n        for (i <- 0 to 9) {\n            if (freq(i) > i) return false\n        }\n        true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt)\n        val freq = new Array[Int](10)\n        for (i <- 0 to 9) freq(i) = 0\n        for (digit <- digits) freq(digit) += 1\n        for (i <- 0 to 9) if (freq(i) > i) return false\n        return true\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.length)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        digits.map(d => digits.count(_ == d)).forall(_ <= digits.max)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_o49al8v.scala:11)\n\tat Problem.main(tmp_o49al8v.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        freq.forall(x => x._1 >= x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.toString.toInt)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.toList.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        freq.forall(x => x._2 <= x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.length)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122919,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val frequency = digits.groupBy(identity).mapValues(_.size)\n        frequency.forall(x => x._1 >= x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val m = n.toString.map(_.asDigit).groupBy(identity).mapValues(_.size)\n        m.forall(x => x._2 <= x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(freq(_) <= _)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122927,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E086] Syntax Error: /tmp/tmpwrrezc8q.scala:8:22 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m8 |\u001b[0m        digits.forall(freq(_) <= _)\n\u001b[31m\u001b[31m  |\u001b[0m                      ^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                      Wrong number of parameters, expected: 1\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freqs = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freqs(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1666122929,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit).toList\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    def validate(n : Long) : Boolean = {\n        val digits = n.toString.map(_.asDigit)\n        val freq = digits.groupBy(identity).mapValues(_.size)\n        digits.forall(d => freq(d) <= d)\n    }\n    def main(args: Array[String]) = {\n    assert(validate((1234l)) == (true));\n    assert(validate((51241l)) == (false));\n    assert(validate((321l)) == (true));\n    }\n\n}\n",
      "timestamp": 1665510247,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}