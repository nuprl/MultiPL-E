{
  "name": "mbpp_138_is_Sum_Of_Powers_Of_Two",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    def isSumOfPowersOfTwo(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSumOfPowersOfTwo((10l)) == (true));\n    assert(isSumOfPowersOfTwo((7l)) == (false));\n    assert(isSumOfPowersOfTwo((14l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        while (m > 0) {\n            val x = (log(m) / log(2)).toInt\n            if (m == pow(2, x).toLong) return true\n            m = m - pow(2, x).toLong\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        // Write your code here\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            val p = pow(2, i).toLong\n            if (m >= p) {\n                m -= p\n                i += 1\n            } else {\n                i += 1\n            }\n        }\n        return m == 0",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var k = n\n        while (k > 0) {\n            if (k % 2 == 1 && k != 1) return false\n            k /= 2\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            i += 1\n            m /= 2\n        }\n        return true",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                val y = x - pow(2, i).toLong\n                if (y == 0) return true\n                if (isSumOfPowersOfTwo(y)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        var p = 1\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            p *= 2\n        }\n        false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (m == 1) return true\n                else return false\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        false",
    "        if (n == 0) return false\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) return false\n            x /= 2\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                val y = x - pow(2, i).toLong\n                if (y == 0) return true\n                if (isSumOfPowersOfTwo(y)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        false",
    "        val powers = (0 to 63).map(x => pow(2, x).toLong)\n        def isSum(n : Long, p : List[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else if (p.isEmpty) false\n            else isSum(n - p.head, p.tail) || isSum(n, p.tail)\n        }\n        isSum(n, powers.toList)",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        val powers = new ArrayBuffer[Long]\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSumOfPowersOfTwo(n : Long, powers : ArrayBuffer[Long]) : Boolean = {\n            if (n == 0) return true\n            if (powers.isEmpty) return false\n            val p = powers.last\n            if (n < p) return isSumOfPowersOfTwo(n, powers.dropRight(1))\n            if (n == p) return true\n            return isSumOfPowersOfTwo(n - p, powers) || isSumOfPowersOfTwo(n, powers.dropRight(1))\n        }\n        return isSumOfPowersOfTwo(n, powers)",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        true",
    "        val powers = ListBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        powers.reverse.foreach(println)\n        def isSumOfPowersOfTwo(n : Long, powers : ListBuffer[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else {\n                var found = false\n                for (i <- 0 until powers.length) {\n                    if (isSumOfPowersOfTwo(n - powers(i), powers)) {\n                        found = true\n                        powers -= powers(i)\n                    }\n                }\n                found\n            }\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= 1\n            }\n            x /= 2\n        }\n        x == 0",
    "        var sum = 0L\n        var i = 1\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            x /= 2\n            i += 1\n        }\n        return true",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) return false\n            x = x / 2\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 == 0) {\n                x /= 2\n            } else {\n                x -= 1\n            }\n        }\n        x == 0",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        // Write your code here\n        var num = n\n        var sum = 0\n        var i = 0\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                sum += pow(2, i).toLong\n            }\n            num >>= 1\n            i += 1\n        }\n        return sum == n",
    "        if (n == 0) return true\n        var i = 0\n        while (i < 63) {\n            val p = pow(2, i).toLong\n            if (p > n) return false\n            if (isSumOfPowersOfTwo(n - p)) return true\n            i += 1\n        }\n        false",
    "        val powers = (0 to 63).map(pow(2, _).toLong).toList\n        def isSumOfPowersOfTwo(n : Long, powers : List[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else if (powers.isEmpty) false\n            else isSumOfPowersOfTwo(n - powers.head, powers) || isSumOfPowersOfTwo(n, powers.tail)\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        if (n == 0) return false\n        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSumOfPowersOfTwo(n : Long, powers : ArrayBuffer[Long]) : Boolean = {\n            if (n == 0) return true\n            if (powers.isEmpty) return false\n            val p = powers.last\n            if (n < p) return isSumOfPowersOfTwo(n, powers.dropRight(1))\n            if (n == p) return true\n            return isSumOfPowersOfTwo(n - p, powers) || isSumOfPowersOfTwo(n, powers.dropRight(1))\n        }\n        return isSumOfPowersOfTwo(n, powers)",
    "        if (n == 0) return false\n        var x = n\n        var p = 1\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            p *= 2\n            x /= 2\n        }\n        return false",
    "        var x = n\n        var i = 1\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= pow(2, i).toLong\n                if (x < 0) return false\n            }\n            i += 1\n        }\n        return true",
    "        if (n == 0) return false\n        var i = 0\n        var m = n\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        return true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= 1\n            }\n            else {\n                x /= 2\n            }\n        }\n        x == 0",
    "        var x = n\n        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSum(n : Long, powers : ArrayBuffer[Long]) : Boolean = {\n            if (n == 0) return true\n            if (powers.isEmpty) return false\n            val p = powers.last\n            if (n < p) return isSum(n, powers.dropRight(1))\n            if (n == p) return true\n            isSum(n - p, powers) || isSum(n, powers.dropRight(1))\n        }\n        isSum(n, powers)",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (m == 1) return true\n                else return false\n            }\n            m = m / 2\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= 1\n                if (x == 0) return true\n            }\n            x /= 2\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            val y = x & (-x)\n            if (y == x) return true\n            x -= y\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                val p = pow(2, i).toLong\n                if (p == 1) return true\n                if (isSumOfPowersOfTwo(n - p)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        if (n < 0) return false\n        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        if (n == 0) return true\n        var i = 0\n        while (pow(2, i) <= n) {\n            if (isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            i += 1\n        }\n        false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong == 0) return true\n                if (isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n == pow(2, i).toLong) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n == pow(2, i).toLong) return true\n                else if (isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        var x = n\n        while (x > 0) {\n            val y = x & -x\n            if (y == x) return true\n            x -= y\n        }\n        return false",
    "        if (n == 0) return false\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= 1\n                if (x == 0) return true\n            }\n            x /= 2\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 1\n        while (i <= n) {\n            if (isPowerOfTwo(n - i)) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n != pow(2, i).toLong) return false\n                else return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        var x = n\n        var sum = 0\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                sum += pow(2, i).toLong\n            }\n            x /= 2\n            i += 1\n        }\n        sum == n",
    "        // Write your code here\n        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        if (sum == n) true else false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 1\n        while (i <= n) {\n            if (n - i == 0) return true\n            if (isSumOfPowersOfTwo(n - i)) return true\n            i = i * 2\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            x /= 2\n            i += 1\n        }\n        true",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 1\n        while (i <= n) {\n            if (isSumOfPowersOfTwo(n - i)) return true\n            i *= 2\n        }\n        return false",
    "        var i = 0\n        while (i < n) {\n            if (isPowerOfTwo(n - i)) return true\n            i += 1\n        }\n        false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        val powers = new HashSet[Long]()\n        var i = 0\n        while (i < 32) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSumOfPowersOfTwo(n : Long, powers : HashSet[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else if (powers.contains(n)) true\n            else {\n                var result = false\n                for (power <- powers) {\n                    result = result || isSumOfPowersOfTwo(n - power, powers)\n                }\n                result\n            }\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        var m = n\n        while (m > 0) {\n            val p = (log(m) / log(2)).toInt\n            if (pow(2, p) == m) return true\n            m -= pow(2, p).toLong\n        }\n        false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        if (n == 0) return true\n        var i = 0\n        while (i < n) {\n            if (isPowerOfTwo(n - i) && isSumOfPowersOfTwo(i)) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        while (m > 0) {\n            if (m % 2 == 1) {\n                m -= 1\n            }\n            else {\n                m /= 2\n            }\n        }\n        return m == 0",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSumOfPowersOfTwo(n : Long, powers : ArrayBuffer[Long]) : Boolean = {\n            if (n == 0) return true\n            if (powers.isEmpty) return false\n            val p = powers.last\n            if (n < p) return isSumOfPowersOfTwo(n, powers.dropRight(1))\n            if (n == p) return true\n            isSumOfPowersOfTwo(n - p, powers) || isSumOfPowersOfTwo(n, powers.dropRight(1))\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        if (n == 0) return true\n        var x = n\n        var p = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, p).toLong == 0) return true\n                else if (isSumOfPowersOfTwo(n - pow(2, p).toLong)) return true\n            }\n            x /= 2\n            p += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var x = n\n        var p = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            p += 1\n        }\n        return false",
    "        var x = n\n        var count = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                count += 1\n            }\n            x /= 2\n        }\n        return count == 1",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSumOfPowersOfTwo(n : Long, powers : ArrayBuffer[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else {\n                var i = powers.length - 1\n                while (i >= 0) {\n                    if (isSumOfPowersOfTwo(n - powers(i), powers)) return true\n                    i -= 1\n                }\n                false\n            }\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        if (n == 0) return false\n        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                val t = pow(2, i).toLong\n                if (t == n) return true\n                else if (isSumOfPowersOfTwo(n - t)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        val powers = (0 to 63).map(x => pow(2, x).toLong)\n        def isSumOfPowersOfTwo(n : Long, i : Int) : Boolean = {\n            if (n == 0) true\n            else if (i < 0) false\n            else if (n < powers(i)) isSumOfPowersOfTwo(n, i - 1)\n            else isSumOfPowersOfTwo(n - powers(i), i)\n        }\n        isSumOfPowersOfTwo(n, 63)",
    "        var x = n\n        var y = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                y += 1\n            }\n            x /= 2\n        }\n        return y == 1",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var x = n\n        var y = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (y == 0) return false\n                x -= pow(2, y).toLong\n            }\n            y += 1\n        }\n        return x == 0",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 0\n        while (pow(2, i) <= n) {\n            if (isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        def isSumOfPowersOfTwo(n : Long, powers : ArrayBuffer[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else {\n                var found = false\n                for (i <- 0 until powers.length) {\n                    if (isSumOfPowersOfTwo(n - powers(i), powers)) {\n                        found = true\n                        return true\n                    }\n                }\n                found\n            }\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        if (n == 0) return false\n        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                val y = pow(2, i).toLong\n                if (y == n) return true\n                if (isSumOfPowersOfTwo(n - y)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 1\n        while (i <= n) {\n            var j = 0\n            while (j <= n) {\n                if (i + j == n) return true\n                j = pow(2, j).toLong\n            }\n            i = pow(2, i).toLong\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && !isSumOfPowersOfTwo(n - pow(2, i).toLong)) return false\n            }\n            m /= 2\n            i += 1\n        }\n        return true",
    "        var num = n\n        var sum = 0\n        var i = 0\n        while (num > 0) {\n            if ((num & 1) == 1) {\n                sum += pow(2, i).toLong\n            }\n            num >>= 1\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                val k = pow(2, i).toLong\n                if (k == n) return true\n                if (isSumOfPowersOfTwo(n - k)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        false",
    "        var i = 1\n        var sum = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        powers.reverse.foreach(x => if (x == n) return true else if (x < n) return isSumOfPowersOfTwo(n - x))\n        false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                val y = x - pow(2, i).toLong\n                if (y == 0) return true\n                if (isSumOfPowersOfTwo(y)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n != pow(2, i).toLong) return false\n                else return true\n            }\n            x /= 2\n            i += 1\n        }\n        false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var num = n\n        var sum = 0\n        while (num > 0) {\n            val power = (log(num) / log(2)).toInt\n            sum += pow(2, power).toLong\n            num -= pow(2, power).toLong\n        }\n        sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        val powers = (0 to 63).map(pow(2, _).toLong).toList\n        def isSumOfPowersOfTwo(n : Long, powers : List[Long]) : Boolean = {\n            if (n == 0) true\n            else if (n < 0) false\n            else if (powers.isEmpty) false\n            else isSumOfPowersOfTwo(n - powers.head, powers) || isSumOfPowersOfTwo(n, powers.tail)\n        }\n        isSumOfPowersOfTwo(n, powers)",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        // Write your code here\n        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (n - pow(2, i).toLong != 0 && isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        val powers = ArrayBuffer[Long]()\n        var i = 0\n        while (pow(2, i) <= n) {\n            powers += pow(2, i).toLong\n            i += 1\n        }\n        val dp = Array.ofDim[Boolean](n + 1, powers.length)\n        for (i <- 0 to n) {\n            for (j <- 0 until powers.length) {\n                if (i == 0) dp(i)(j) = true\n                else if (j == 0) dp(i)(j) = (i == powers(j))\n                else if (i < powers(j)) dp(i)(j) = dp(i)(j - 1)\n                else dp(i)(j) = dp(i)(j - 1) || dp(i - powers(j).toInt)(j)\n            }\n        }\n        dp(n)(powers.length - 1)",
    "        if (n == 0) return true\n        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (n - pow(2, i).toLong == 0) return true\n                if (isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var i = 1\n        var sum = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= 1\n            }\n            x /= 2\n        }\n        return x == 0",
    "        var num = n\n        var sum = 0\n        var i = 0\n        while (num > 0) {\n            if (num % 2 == 1) {\n                sum += pow(2, i).toLong\n            }\n            num /= 2\n            i += 1\n        }\n        return sum == n",
    "        if (n == 0) return false\n        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        if (n == 0) return false\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) return false\n            x /= 2\n        }\n        return true",
    "        if (n == 0) return true\n        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var i = 0\n        var sum = 0L\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                val x = pow(2, i).toLong\n                if (x == n) return true\n                else if (isSumOfPowersOfTwo(n - x)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                if (m == 1) return true\n                else return false\n            }\n            m /= 2\n            i += 1\n        }\n        return false",
    "        if (n == 0) return false\n        var x = n\n        while (x > 0) {\n            if (x % 2 == 1) {\n                x -= 1\n                if (x == 0) return true\n            }\n            x /= 2\n        }\n        return false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x == 1) return true\n                else return false\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        if (sum == n) true else false",
    "        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (x != 1) return false\n                else return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false",
    "        var sum = 0\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            i += 1\n        }\n        return sum == n",
    "        var sum = 0L\n        var i = 0\n        while (sum < n) {\n            sum += pow(2, i).toLong\n            if (sum == n) return true\n            i += 1\n        }\n        return false",
    "        if (n == 0) return true\n        var i = 0\n        while (i < n) {\n            if (isPowerOfTwo(n - i)) return true\n            i += 1\n        }\n        false",
    "        var m = n\n        var i = 0\n        while (m > 0) {\n            if (m % 2 == 1) {\n                val k = pow(2, i).toLong\n                if (k == n) return true\n                if (isSumOfPowersOfTwo(n - k)) return true\n            }\n            m /= 2\n            i += 1\n        }\n        false",
    "        if (n == 0) return true\n        if (n == 1) return false\n        var x = n\n        var i = 0\n        while (x > 0) {\n            if (x % 2 == 1) {\n                if (isSumOfPowersOfTwo(n - pow(2, i).toLong)) return true\n            }\n            x /= 2\n            i += 1\n        }\n        return false"
  ]
}