{
  "name": "mbpp_784_mul_even_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var result = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                result = even * odd\n                return result\n            }\n            else {\n                odd = list1(i).toInt\n            }\n        }\n        return result",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head * odd.head",
    "        val (even, odd) = list1.partition(_ % 2 == 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        if (list1.length == 0) return 0\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        if (even.length == 0 || odd.length == 0) return 0\n        even.head * odd.head"
  ]
}