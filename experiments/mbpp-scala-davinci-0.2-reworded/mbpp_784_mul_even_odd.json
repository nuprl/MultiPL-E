{
  "name": "mbpp_784_mul_even_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the product of first even and odd number of a given list.\n    def mulEvenOdd(list1 : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(mulEvenOdd((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 4l.toLong, 1l.toLong, 6l.toLong, 8l.toLong))) == (4l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))) == (2l));\n    assert(mulEvenOdd((List[Long](1l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))) == (10l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var result = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                result = even * odd\n                return result\n            }\n            else {\n                odd = list1(i).toInt\n            }\n        }\n        return result",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) 0\n        else even.head * odd.head",
    "        val (even, odd) = list1.partition(_ % 2 == 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        if (list1.length == 0) return 0\n        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        if (even.length == 0 || odd.length == 0) return 0\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = true\n        var prod = 1L\n        while(flag) {\n            if(list1(i) % 2 == 0) {\n                prod *= list1(i)\n                even += 1\n            }\n            else {\n                prod *= list1(i)\n                odd += 1\n            }\n            if(even == 1 && odd == 1) flag = false\n            i += 1\n        }\n        prod",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- list1) {\n            if (even == 0 && i % 2 == 0) {\n                even = i\n            }\n            if (odd == 0 && i % 2 == 1) {\n                odd = i\n            }\n            if (even != 0 && odd != 0) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (evenFound == false && list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                evenFound = true\n            }\n            if (oddFound == false && list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                oddFound = true\n            }\n            if (evenFound == true && oddFound == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        return even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for(i <- 0 until list1.length) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i)\n                break\n            }\n        }\n        for(i <- 0 until list1.length) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i)\n                break\n            }\n        }\n        product = even * odd\n        product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenNum = 0\n        var oddNum = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even += 1\n                if (even == 1) evenNum = list1(i)\n            }\n            else {\n                odd += 1\n                if (odd == 1) oddNum = list1(i)\n            }\n            if (even == 1 && odd == 1) return evenNum * oddNum\n        }\n        return 0",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                product *= odd\n                break\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                break\n            }\n        }\n        product = even * odd\n        product",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n            } else {\n                odd = list1(i).toInt\n                product *= odd\n            }\n        }\n        product",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var flag = true\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (flag) {\n                even = list1(i).toInt\n                flag = false\n            } else {\n                odd = list1(i).toInt\n                flag = true\n            }\n            product *= even * odd\n        }\n        product",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var evenNum = 0L\n        var oddNum = 0L\n        while(i < list1.length) {\n            if(list1(i) % 2 == 0) {\n                evenNum = list1(i)\n                even = 1\n            }\n            else {\n                oddNum = list1(i)\n                odd = 1\n            }\n            if(even == 1 && odd == 1) return evenNum * oddNum\n            i += 1\n        }\n        return 0",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even * odd",
    "        var even : Long = 1\n        var odd : Long = 1\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even *= list1(i)\n            else odd *= list1(i)\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = list1(i).toInt\n            else odd = list1(i).toInt\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var even_found = false\n        var odd_found = false\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && !even_found) {\n                even = list1(i).toInt\n                even_found = true\n            }\n            if (list1(i) % 2 == 1 && !odd_found) {\n                odd = list1(i).toInt\n                odd_found = true\n            }\n            if (even_found && odd_found) return even * odd\n        }\n        return 0",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        even.head * odd.head",
    "        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        if (even.length == 0 || odd.length == 0) return 0\n        else return even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(i % 2 == 0 && even == 0) even = list1(i)\n            if(i % 2 == 1 && odd == 0) odd = list1(i)\n            i += 1\n        }\n        even * odd",
    "        list1.zipWithIndex.filter(x => x._2 % 2 == 0).map(_._1).product * list1.zipWithIndex.filter(x => x._2 % 2 == 1).map(_._1).product",
    "        var even = 0\n        var odd = 0\n        var evenFlag = false\n        var oddFlag = false\n        var result = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                if (!evenFlag) {\n                    even = i\n                    evenFlag = true\n                }\n            }\n            else {\n                if (!oddFlag) {\n                    odd = i\n                    oddFlag = true\n                }\n            }\n            if (evenFlag && oddFlag) {\n                result = list1(even) * list1(odd)\n                return result\n            }\n        }\n        result",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = true\n        var product = 1\n        while(i < list1.length && flag) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                flag = false\n            }\n            i += 1\n        }\n        flag = true\n        i = 0\n        while(i < list1.length && flag) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                flag = false\n            }\n            i += 1\n        }\n        product = even * odd\n        product",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i)\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i)\n                product *= odd\n                break\n            }\n        }\n        product",
    "        var even = 0\n        var odd = 0\n        var evenFlag = false\n        var oddFlag = false\n        var product = 1\n        for (i <- list1) {\n            if (i % 2 == 0 && !evenFlag) {\n                even = i\n                evenFlag = true\n            }\n            else if (i % 2 != 0 && !oddFlag) {\n                odd = i\n                oddFlag = true\n            }\n            if (evenFlag && oddFlag) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 == 1)\n        var even_product = even.reduceLeft(_ * _)\n        var odd_product = odd.reduceLeft(_ * _)\n        return even_product * odd_product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (evenFound == false && list1(i) % 2 == 0) {\n                even = list1(i)\n                evenFound = true\n            }\n            if (oddFound == false && list1(i) % 2 != 0) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound == true && oddFound == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        var flag = 0\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && flag == 0) {\n                even = list1(i)\n                flag = 1\n            }\n            else if (list1(i) % 2 != 0 && flag == 1) {\n                odd = list1(i)\n                flag = 2\n            }\n        }\n        product = even * odd\n        product",
    "        var even = 0\n        var odd = 0\n        var evenFlag = false\n        var oddFlag = false\n        var result = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFlag) {\n                even = list1(i).toInt\n                evenFlag = true\n            }\n            else if (list1(i) % 2 != 0 && !oddFlag) {\n                odd = list1(i).toInt\n                oddFlag = true\n            }\n            if (evenFlag && oddFlag) result = even * odd\n        }\n        result",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenNum = 0\n        var oddNum = 0\n        for (i <- list1) {\n            if (even == 0 && i % 2 == 0) {\n                evenNum = i\n                even = 1\n            }\n            else if (odd == 0 && i % 2 == 1) {\n                oddNum = i\n                odd = 1\n            }\n            if (even == 1 && odd == 1) return evenNum * oddNum\n        }\n        return 0",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = 0\n        var product = 1\n        while(i < list1.length && flag < 2) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                flag += 1\n            }\n            else {\n                odd = list1(i).toInt\n                flag += 1\n            }\n            i += 1\n        }\n        product = even * odd\n        return product",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (i % 2 == 0 && even == 0) even = list1(i)\n            if (i % 2 == 1 && odd == 0) odd = list1(i)\n            i += 1\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val (even, odd) = list1.partition(_ % 2 == 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 == 1)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for(i <- 0 until list1.length) {\n            if(list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i).toInt\n                evenFound = true\n            } else if(list1(i) % 2 != 0 && !oddFound) {\n                odd = list1(i).toInt\n                oddFound = true\n            }\n            if(evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val (even, odd) = list1.partition(_ % 2 == 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0).head\n        val odd = list1.filter(_ % 2 != 0).head\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var count = 0\n        for (i <- list1) {\n            if (count == 0) {\n                even = i.toInt\n                count += 1\n            } else if (count == 1) {\n                odd = i.toInt\n                count += 1\n            } else {\n                count += 1\n            }\n        }\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = true\n        var product = 1L\n        while(i < list1.length && (even == 0 || odd == 0)) {\n            if(flag) {\n                if(list1(i) % 2 == 0) {\n                    even = list1(i)\n                    flag = false\n                }\n            }\n            else {\n                if(list1(i) % 2 != 0) {\n                    odd = list1(i)\n                    flag = true\n                }\n            }\n            i += 1\n        }\n        if(even != 0 && odd != 0) product = even * odd\n        product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var even_found = false\n        var odd_found = false\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && !even_found) {\n                even = list1(i)\n                even_found = true\n            }\n            if (list1(i) % 2 == 1 && !odd_found) {\n                odd = list1(i)\n                odd_found = true\n            }\n            if (even_found && odd_found) return even * odd\n        }\n        return 0",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1L\n        for (i <- list1) {\n            if (evenFound == false && i % 2 == 0) {\n                even = i\n                evenFound = true\n            }\n            else if (oddFound == false && i % 2 != 0) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound == true && oddFound == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 == 1).head\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- list1) {\n            if (i % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            else if (i % 2 != 0 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1L\n        for (i <- list1) {\n            if (evenFound == false) {\n                if (i % 2 == 0) {\n                    even = i\n                    evenFound = true\n                }\n            }\n            if (oddFound == false) {\n                if (i % 2 == 1) {\n                    odd = i\n                    oddFound = true\n                }\n            }\n            if (evenFound == true && oddFound == true) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 1L\n        for (i <- list1) {\n            if (i % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            else if (i % 2 != 0 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                result = even * odd\n                return result\n            }\n        }\n        return result",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i)\n                evenFound = true\n            }\n            else if (list1(i) % 2 != 0 && !oddFound) {\n                odd = list1(i)\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even += list1(i)\n            else odd += list1(i)\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var evenNum = 0\n        var oddNum = 0\n        for (i <- list1) {\n            if (even == 0 && i % 2 == 0) {\n                evenNum = i\n                even = 1\n            }\n            else if (odd == 0 && i % 2 == 1) {\n                oddNum = i\n                odd = 1\n            }\n            if (even == 1 && odd == 1) return evenNum * oddNum\n        }\n        return 0",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            if (list1(i) % 2 == 1 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                result = list1(even) * list1(odd)\n                return result\n            }\n        }\n        result",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var product = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            if (list1(i) % 2 == 1 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                product = list1(even) * list1(odd)\n                return product\n            }\n        }\n        product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var flag = 0\n        var product = 1\n        for(i <- 0 to list1.length - 1) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                flag = 1\n            }\n            else {\n                odd = list1(i).toInt\n                flag = 2\n            }\n            if(flag == 2) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        var flag = false\n        while(i < list1.length && !flag) {\n            if(list1(i) % 2 == 0) {\n                even = list1(i)\n                flag = true\n            }\n            i += 1\n        }\n        flag = false\n        i = 0\n        while(i < list1.length && !flag) {\n            if(list1(i) % 2 != 0) {\n                odd = list1(i)\n                flag = true\n            }\n            i += 1\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even = even + list1(i).toInt\n            else odd = odd + list1(i).toInt\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var evenNum = 0L\n        var oddNum = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                evenNum = list1(i)\n                evenFound = true\n            }\n            else if (list1(i) % 2 != 0 && !oddFound) {\n                oddNum = list1(i)\n                oddFound = true\n            }\n        }\n        evenNum * oddNum",
    "        val even = list1.filter(x => x % 2 == 0).head\n        val odd = list1.filter(x => x % 2 != 0).head\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = list1(i).toInt\n                evenFound = true\n            }\n            if (list1(i) % 2 != 0 && !oddFound) {\n                odd = list1(i).toInt\n                oddFound = true\n            }\n            if (evenFound && oddFound) return even * odd\n        }\n        return 0",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 to list1.length - 1) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        return even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var even_found = false\n        var odd_found = false\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !even_found) {\n                even = list1(i)\n                even_found = true\n            }\n            else if (list1(i) % 2 != 0 && !odd_found) {\n                odd = list1(i)\n                odd_found = true\n            }\n            if (even_found && odd_found) {\n                product = even * odd\n                return product\n            }\n        }\n        return product",
    "        val evens = list1.filter(x => x % 2 == 0)\n        val odds = list1.filter(x => x % 2 != 0)\n        evens.head * odds.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 == 1)\n        var evenProduct = even.reduceLeft(_ * _)\n        var oddProduct = odd.reduceLeft(_ * _)\n        return evenProduct * oddProduct",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 0L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            if (list1(i) % 2 == 1 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n        }\n        if (evenFound && oddFound) result = list1(even) * list1(odd)\n        result",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 1) {\n                odd = list1(i).toInt\n                break\n            }\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 until list1.length) {\n            if (i % 2 == 0) even += 1\n            else odd += 1\n            if (even > 0 && odd > 0) return list1(even - 1) * list1(odd - 1)\n        }\n        return 0",
    "        list1.filter(x => x % 2 == 0).head * list1.filter(x => x % 2 != 0).head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- list1) {\n            if (even == 0 && i % 2 == 0) {\n                even = i\n                product *= even\n            }\n            else if (odd == 0 && i % 2 == 1) {\n                odd = i\n                product *= odd\n            }\n            else if (even != 0 && odd != 0) {\n                return product\n            }\n        }\n        return product",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        while (even == 0 || odd == 0) {\n            if (i % 2 == 0 && even == 0) even = list1(i)\n            if (i % 2 == 1 && odd == 0) odd = list1(i)\n            i += 1\n        }\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        if (list1.isEmpty) 1\n        else if (list1.length == 1) list1.head\n        else if (list1.length == 2) list1.head * list1.last\n        else list1.head * list1.last",
    "        var even = 0\n        var odd = 0\n        var evenFlag = false\n        var oddFlag = false\n        var result = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFlag) {\n                even = list1(i)\n                evenFlag = true\n            }\n            else if (list1(i) % 2 != 0 && !oddFlag) {\n                odd = list1(i)\n                oddFlag = true\n            }\n            if (evenFlag && oddFlag) {\n                result = even * odd\n                return result\n            }\n        }\n        return result",
    "        var even = list1.filter(x => x % 2 == 0)\n        var odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i % 2 == 0) {\n                even += list1(i)\n            } else {\n                odd += list1(i)\n            }\n        }\n        even * odd",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(list1(i) % 2 == 0) even = list1(i)\n            if(list1(i) % 2 == 1) odd = list1(i)\n            i += 1\n        }\n        even * odd",
    "        var even = 0\n        var odd = 0\n        var evenFound = false\n        var oddFound = false\n        var result = 1L\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0 && !evenFound) {\n                even = i\n                evenFound = true\n            }\n            if (list1(i) % 2 == 1 && !oddFound) {\n                odd = i\n                oddFound = true\n            }\n            if (evenFound && oddFound) {\n                result = list1(even) * list1(odd)\n                return result\n            }\n        }\n        result",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var i = 0\n        while(even == 0 || odd == 0) {\n            if(i % 2 == 0 && even == 0) even = list1(i)\n            if(i % 2 == 1 && odd == 0) odd = list1(i)\n            i += 1\n        }\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        return product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var product = 1\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 == 0) {\n                even = list1(i).toInt\n                product *= even\n                break\n            }\n        }\n        for (i <- 0 until list1.length) {\n            if (list1(i) % 2 != 0) {\n                odd = list1(i).toInt\n                product *= odd\n                break\n            }\n        }\n        product",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        even.head * odd.head",
    "        var even = 0\n        var odd = 0\n        var even_found = false\n        var odd_found = false\n        var i = 0\n        while (i < list1.length) {\n            if (list1(i) % 2 == 0 && !even_found) {\n                even = list1(i)\n                even_found = true\n            } else if (list1(i) % 2 != 0 && !odd_found) {\n                odd = list1(i)\n                odd_found = true\n            }\n            i += 1\n        }\n        even * odd",
    "        val even = list1.filter(_ % 2 == 0)\n        val odd = list1.filter(_ % 2 != 0)\n        even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 != 0)\n        if (even.isEmpty || odd.isEmpty) 0\n        else even.head * odd.head",
    "        val even = list1.filter(x => x % 2 == 0)\n        val odd = list1.filter(x => x % 2 == 1)\n        even.head * odd.head"
  ]
}