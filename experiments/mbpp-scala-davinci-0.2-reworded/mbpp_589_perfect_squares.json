{
  "name": "mbpp_589_perfect_squares",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find perfect squares between two given numbers.\n    def perfectSquares(a : Long, b : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(perfectSquares((1l), (30l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong))));\n    assert(perfectSquares((50l), (100l)).equals((List[Long](64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(perfectSquares((100l), (200l)).equals((List[Long](100l.toLong, 121l.toLong, 144l.toLong, 169l.toLong, 196l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt - sqrt.toInt == 0) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = result :+ i\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) list = i :: list\n        }\n        list.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) l += i\n        }\n        l.toList",
    "        var squares = List[Long]()\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares = i * i :: squares\n            i += 1\n        }\n        squares",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            squares += i * i\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            squares += i * i\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            var sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) {\n                squares = i :: squares\n            }\n        }\n        squares",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) squares = i :: squares\n        }\n        squares",
    "        var squares = List[Long]()\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares = i * i :: squares\n            i += 1\n        }\n        squares.reverse",
    "        var result : List[Long] = List()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = new ListBuffer[Long]\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result += i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) list = i :: list\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        val squares = ListBuffer[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares += i\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        var squares = List[Long]()\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares = i * i :: squares\n            i += 1\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toLong) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                squares = i :: squares\n            }\n        }\n        squares",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            squares += i * i\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        var i = a\n        while (i <= b) {\n            if (isPerfectSquare(i)) result = i :: result\n            i += 1\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (sqrt(i) % 1 == 0) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a)\n        val sqrtB = sqrt(b)\n        val start = if (sqrtA == floor(sqrtA)) sqrtA.toLong else floor(sqrtA).toLong + 1\n        val end = if (sqrtB == floor(sqrtB)) sqrtB.toLong else floor(sqrtB).toLong - 1\n        val result = new ListBuffer[Long]\n        for (i <- start to end) {\n            result += i * i\n        }\n        result.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            var sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        var n = 1\n        while (n * n <= b) {\n            if (n * n >= a) squares = n * n :: squares\n            n += 1\n        }\n        squares.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var squares = List[Long]()\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares = i * i :: squares\n            i += 1\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        var i = a\n        while (i <= b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n            i += 1\n        }\n        squares.reverse",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        val squares = new ListBuffer[Long]\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares += i * i\n            i += 1\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        val squares = ListBuffer[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                squares += i\n            }\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            var sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = result :+ i\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val s = sqrt(i)\n            if (s == floor(s)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt - sqrt.toInt == 0) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = result :+ i\n            }\n        }\n        result",
    "        val list = new ListBuffer[Long]\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) list += i\n        }\n        list.toList",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) result = result :+ i\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) squares = i :: squares\n        }\n        squares.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = ListBuffer[Long]()\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) list = i :: list\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares = i * i :: squares\n            i += 1\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        var l = List[Long]()\n        for (i <- a to b) {\n            val s = sqrt(i).toLong\n            if (s * s == i) l = i :: l\n        }\n        l",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            var sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val sqrtA2 = sqrtA * sqrtA\n        val sqrtB2 = sqrtB * sqrtB\n        if (sqrtA2 >= a && sqrtA2 <= b) List(sqrtA2)\n        else if (sqrtB2 >= a && sqrtB2 <= b) List(sqrtB2)\n        else if (sqrtA2 > b || sqrtB2 < a) List()\n        else {\n            val sqrtA3 = sqrtA2 + sqrtA\n            val sqrtB3 = sqrtB2 - sqrtB\n            if (sqrtA3 >= a && sqrtA3 <= b) List(sqrtA3)\n            else if (sqrtB3 >= a && sqrtB3 <= b) List(sqrtB3)\n            else List()\n        }",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) list = list :+ i\n        }\n        list",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        var i = a\n        while (i <= b) {\n            if (isPerfectSquare(i)) result = i :: result\n            i += 1\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                list = list :+ i\n            }\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        val sqrtA = ceil(sqrt(a)).toLong\n        val sqrtB = floor(sqrt(b)).toLong\n        val squares = ListBuffer[Long]()\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) list = list :+ i\n        }\n        list",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result.reverse",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            var sqrt = sqrt(i)\n            if (sqrt == sqrt.toLong) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                list = list :+ i\n            }\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) squares = squares :+ i\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        val squares = new ListBuffer[Long]\n        var i = 1\n        while (i * i <= b) {\n            if (i * i >= a) squares += i * i\n            i += 1\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) squares = i :: squares\n        }\n        squares",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result"
  ]
}