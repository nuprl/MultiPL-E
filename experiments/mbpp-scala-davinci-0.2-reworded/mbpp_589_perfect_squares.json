{
  "name": "mbpp_589_perfect_squares",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find perfect squares between two given numbers.\n    def perfectSquares(a : Long, b : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(perfectSquares((1l), (30l)).equals((List[Long](1l.toLong, 4l.toLong, 9l.toLong, 16l.toLong, 25l.toLong))));\n    assert(perfectSquares((50l), (100l)).equals((List[Long](64l.toLong, 81l.toLong, 100l.toLong))));\n    assert(perfectSquares((100l), (200l)).equals((List[Long](100l.toLong, 121l.toLong, 144l.toLong, 169l.toLong, 196l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt % 1 == 0) list = list :+ i\n        }\n        list",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt - sqrt.toInt == 0) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = i :: result\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) {\n                result = result :+ i\n            }\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = i :: result\n        }\n        result.reverse",
    "        var list = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) list = i :: list\n        }\n        list.reverse",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) result = i :: result\n        }\n        result",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            if (isPerfectSquare(i)) result = i :: result\n        }\n        result",
    "        var squares = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) squares = i :: squares\n        }\n        squares",
    "        val sqrtA = sqrt(a).toLong\n        val sqrtB = sqrt(b).toLong\n        val squares = new ListBuffer[Long]\n        for (i <- sqrtA to sqrtB) {\n            val square = i * i\n            if (square >= a && square <= b) squares += square\n        }\n        squares.toList",
    "        var result = List[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i)\n            if (sqrt == sqrt.toInt) result = result :+ i\n        }\n        result",
    "        val l = ListBuffer[Long]()\n        for (i <- a to b) {\n            val sqrt = sqrt(i).toLong\n            if (sqrt * sqrt == i) l += i\n        }\n        l.toList"
  ]
}