{
  "name": "mbpp_391_convert_list_dictionary",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to convert more than one list to nested map.\n    def convertListDictionary(l1 : List[String], l2 : List[String], l3 : List[Long]) : List[Map[String,Map[String,Long]]] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(convertListDictionary((List[String](\"S001\", \"S002\", \"S003\", \"S004\")), (List[String](\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\")), (List[Long](85l.toLong, 98l.toLong, 89l.toLong, 92l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"S001\" -> Map[String,Long](\"Adina Park\" -> 85l)), Map[String,Map[String,Long]](\"S002\" -> Map[String,Long](\"Leyton Marsh\" -> 98l)), Map[String,Map[String,Long]](\"S003\" -> Map[String,Long](\"Duncan Boyle\" -> 89l)), Map[String,Map[String,Long]](\"S004\" -> Map[String,Long](\"Saim Richards\" -> 92l))))));\n    assert(convertListDictionary((List[String](\"abc\", \"def\", \"ghi\", \"jkl\")), (List[String](\"python\", \"program\", \"language\", \"programs\")), (List[Long](100l.toLong, 200l.toLong, 300l.toLong, 400l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"abc\" -> Map[String,Long](\"python\" -> 100l)), Map[String,Map[String,Long]](\"def\" -> Map[String,Long](\"program\" -> 200l)), Map[String,Map[String,Long]](\"ghi\" -> Map[String,Long](\"language\" -> 300l)), Map[String,Map[String,Long]](\"jkl\" -> Map[String,Long](\"programs\" -> 400l))))));\n    assert(convertListDictionary((List[String](\"A1\", \"A2\", \"A3\", \"A4\")), (List[String](\"java\", \"C\", \"C++\", \"DBMS\")), (List[Long](10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong))).equals((List[Map[String,Map[String,Long]]](Map[String,Map[String,Long]](\"A1\" -> Map[String,Long](\"java\" -> 10l)), Map[String,Map[String,Long]](\"A2\" -> Map[String,Long](\"C\" -> 20l)), Map[String,Map[String,Long]](\"A3\" -> Map[String,Long](\"C++\" -> 30l)), Map[String,Map[String,Long]](\"A4\" -> Map[String,Long](\"DBMS\" -> 40l))))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        if (l1.length != l2.length || l1.length != l3.length) {\n            throw new IllegalArgumentException(\"All lists must be of equal length\")\n        }\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get)).toList\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = new HashMap[String,Map[String,Long]]()\n            val map2 = new HashMap[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2.toMap)\n            result += map.toMap\n        }\n        result.toList",
    "        val map = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val map2 = new HashMap[String,Map[String,Long]]\n            val map3 = new HashMap[String,Long]\n            map3 += (l2(i) -> l3(i))\n            map2 += (l1(i) -> map3)\n            map += map2.toMap\n        }\n        map.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        m4.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        // Write your code here\n        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        result",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => (x, m1.get(x).get)).toMap\n        val m4 = l2.map(x => (x, m2.get(x).get)).toMap\n        val m5 = m3.map(x => (x._1, m4)).toList\n        m5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).getOrElse(0))).getOrElse(Map())))\n        m3",
    "        val m1 = l1.zip(l2).map(x => (x._1, x._2)).toMap\n        val m2 = l2.zip(l3).map(x => (x._1, x._2)).toMap\n        val m3 = l1.map(x => (x, m1.get(x).map(y => (y, m2.get(y))).toMap)).toMap\n        l1.map(x => (x, m3.get(x).get)).toList",
    "        if (l1.length == 0) Nil\n        else {\n            val m = Map(l1.head -> Map(l2.head -> l3.head))\n            m :: convertListDictionary(l1.tail, l2.tail, l3.tail)\n        }",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        val m5 = l1.zip(m4).toMap\n        val m6 = l1.zip(m5).toMap\n        val m7 = l1.zip(m6).toMap\n        val m8 = l1.zip(m7).toMap\n        val m9 = l1.zip(m8).toMap\n        val m10 = l1.zip(m9).toMap\n        val m11 = l1.zip(m10).toMap\n        val m12 = l1.zip(m11).toMap\n        val m13 = l1.zip(m12).toMap\n        val m14 = l1.zip(m13).toMap\n        val m15 = l1.zip(m14).toMap\n        val m16 = l1.zip(m15).toMap\n        val m17 = l1.zip(m16).toMap\n        val m18 = l1.zip(m17).toMap\n        val m19 = l1.zip(m18).toMap\n        val m20 = l1.zip(m19).toMap\n        val m21 = l1.zip(m20).toMap\n        val m22 = l1.zip(m21).toMap\n        val m23 = l1.zip(m22).toMap\n        val m24 = l1.zip(m23).toMap\n        val m25 = l1.zip(m24).toMap\n        val m26 = l1.zip(m25).toMap\n        val m27 = l1.zip(m26).toMap\n        val m28 = l1.zip(m27).toMap\n        val m29 = l1.zip(m28).toMap\n        val m30 = l1.zip(m29).toMap\n        val m31 = l1.zip(m30).toMap\n        val m32 = l1.zip(m31).toMap",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => (x._1._1, (x._1._2, x._2))).groupBy(_._1).map(x => (x._1, x._2.map(y => (y._2._1, y._2._2)).toMap)).toList\n        val m2 = l2.zip(l3).groupBy(_._1).map(x => (x._1, x._2.map(y => y._2).toList)).toList\n        val m3 = m1.map(x => (x._1, m2.filter(y => x._2.contains(y._1)).map(y => (y._1, y._2)).toMap)).toList\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m = new HashMap[String,Map[String,Long]]\n            val m2 = new HashMap[String,Long]\n            m2 += (l2(i) -> l3(i))\n            m += (l1(i) -> m2.toMap)\n            result += m.toMap\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            list += map\n        }\n        list.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => (x, m1(x).map(y => (y, m2(y))).toMap)).toMap\n        l1.map(x => Map(x -> m3(x)))",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => x -> m1.get(x).map(y => y -> m2.get(y).get).toMap).toMap\n        l1.map(x => Map(x -> m3.get(x).get))",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = new HashMap[String,Map[String,Long]]()\n            val m2 = new HashMap[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1,l2,l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2(l2(i)) = l3(i)\n            m1(l1(i)) = m2\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).map(x => Map(x._1 -> Map(x._2 -> l3(l1.indexOf(x._1))))).toList\n        m1",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m1 = new HashMap[String,Map[String,Long]]\n            val m2 = new HashMap[String,Long]\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2.toMap)\n            result += m1.toMap\n        }\n        result.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get)).toList\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).getOrElse(0))).getOrElse(Map())))\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        m4.toList",
    "        val m1 = l1.zip(l2).map(x => (x._1, x._2)).toMap\n        val m2 = l2.zip(l3).map(x => (x._1, x._2)).toMap\n        val m3 = l1.map(x => (x, m1.get(x).get, m2.get(m1.get(x).get).get)).toMap\n        val m4 = l1.map(x => (x, m3.get(x).get._1, m3.get(x).get._2, m3.get(x).get._3)).toMap\n        val m5 = l1.map(x => (x, m4.get(x).get._1, m4.get(x).get._2, m4.get(x).get._3, m4.get(x).get._4)).toMap\n        val m6 = l1.map(x => (x, m5.get(x).get._1, m5.get(x).get._2, m5.get(x).get._3, m5.get(x).get._4, m5.get(x).get._5)).toMap\n        val m7 = l1.map(x => (x, m6.get(x).get._1, m6.get(x).get._2, m6.get(x).get._3, m6.get(x).get._4, m6.get(x).get._5, m6.get(x).get._6)).toMap\n        val m8 = l1.map(x => (x, m7.get(x).get._1, m7.get(x).get._2, m7.get(x).get._3, m7.get(x).get._4, m7.get(x).get._5, m7.get(x).get._6, m7.get(x).get._7)).toMap\n        val m9 = l1.map(x => (x, m8.get(x).get._1, m8.get(x).get._2, m8.get(x).get",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var result = List[Map[String,Map[String,Long]]]()\n        var map1 = Map[String,Map[String,Long]]()\n        var map2 = Map[String,Long]()\n        for(i <- 0 until l1.length){\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        val m2 = m1.groupBy(_.keys.head).map(x => Map(x._1 -> x._2.map(_.values.head).reduce(_ ++ _))).toList\n        m2",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => x -> m1(x).map(y => y -> m2(y)))\n        m3",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = m1.mapValues(x => m2)\n        m3.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val map = new HashMap[String,Map[String,Long]]\n            val map2 = new HashMap[String,Long]\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2.toMap)\n            result += map.toMap\n        }\n        result.toList",
    "        val m1 = l1.zip(l2).map(x => (x._1, x._2)).toMap\n        val m2 = l2.zip(l3).map(x => (x._1, x._2)).toMap\n        val m3 = l1.map(x => (x, m1.get(x).map(y => m2.get(y).getOrElse(0)).getOrElse(0))).toMap\n        val m4 = l1.map(x => (x, m3.get(x).getOrElse(0))).toMap\n        val m5 = l1.map(x => (x, m4.get(x).getOrElse(0))).toMap\n        val m6 = l1.map(x => (x, m5.get(x).getOrElse(0))).toMap\n        val m7 = l1.map(x => (x, m6.get(x).getOrElse(0))).toMap\n        val m8 = l1.map(x => (x, m7.get(x).getOrElse(0))).toMap\n        val m9 = l1.map(x => (x, m8.get(x).getOrElse(0))).toMap\n        val m10 = l1.map(x => (x, m9.get(x).getOrElse(0))).toMap\n        val m11 = l1.map(x => (x, m10.get(x).getOrElse(0))).toMap\n        val m12 = l1.map(x => (x, m11.get(x).getOrElse(0))).toMap\n        val m13 = l1.map(x => (x, m12.get(x).getOrElse(0))).toMap\n        val m14 = l1.map(x => (x, m13.get(x).getOrElse(0))).toMap\n        val m15 = l1.map(x => (x, m14.get(x).getOrElse(0))).toMap\n        val m16 = l1.map(x => (x, m15.get(",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).getOrElse(0))).getOrElse(Map())))\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        val m = l.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        m",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var map = Map[String,Map[String,Long]]()\n        for (i <- 0 until l1.length) {\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = map :: result\n        }\n        result",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map[String,Map[String,Long]]()\n            val map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            list += map\n        }\n        list.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = m1.map(x => (x._1, m2.get(x._2).get))\n        val m4 = m3.groupBy(x => x._1.head)\n        m4.map(x => Map(x._1.toString -> x._2.map(y => (y._1, y._2)).toMap)).toList",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map[String,Map[String,Long]]()\n            val map1 = Map[String,Long]()\n            map1 += (l2(i) -> l3(i))\n            map += (l1(i) -> map1)\n            list += map\n        }\n        list.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        val m5 = l1.zip(m4).toMap\n        val m6 = l1.zip(m5).toMap\n        val m7 = l1.zip(m6).toMap\n        val m8 = l1.zip(m7).toMap\n        val m9 = l1.zip(m8).toMap\n        val m10 = l1.zip(m9).toMap\n        val m11 = l1.zip(m10).toMap\n        val m12 = l1.zip(m11).toMap\n        val m13 = l1.zip(m12).toMap\n        val m14 = l1.zip(m13).toMap\n        val m15 = l1.zip(m14).toMap\n        val m16 = l1.zip(m15).toMap\n        val m17 = l1.zip(m16).toMap\n        val m18 = l1.zip(m17).toMap\n        val m19 = l1.zip(m18).toMap\n        val m20 = l1.zip(m19).toMap\n        val m21 = l1.zip(m20).toMap\n        val m22 = l1.zip(m21).toMap\n        val m23 = l1.zip(m22).toMap\n        val m24 = l1.zip(m23).toMap\n        val m25 = l1.zip(m24).toMap\n        val m26 = l1.zip(m25).toMap\n        val m27 = l1.zip(m26).toMap\n        val m28 = l1.zip(m27).toMap\n        val m29 = l1.zip(m28).toMap\n        val m30 = l1.zip(m29).toMap\n        val m31 = l1.zip(m30).toMap\n        val m32 = l1.zip(m31).toMap",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => (x, m1(x).map(y => (y, m2(y))).toMap)).toMap\n        val l = l1.map(x => m3(x))\n        l",
    "        val map = new HashMap[String,Map[String,Long]]\n        for (i <- 0 until l1.length) {\n            val map2 = new HashMap[String,Long]\n            map2(l2(i)) = l3(i)\n            map(l1(i)) = map2\n        }\n        map.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x).map(y => Map(y -> m2(y)))))\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => (x, m1.get(x).get)).map(x => (x._1, m2.get(x._2).get)).map(x => Map(x._1 -> Map(m1.get(x._1).get -> x._2))).toList\n        m3",
    "        val m1 = l1.zip(l2).map(x => Map(x._1 -> Map(x._2 -> l3(l1.indexOf(x._1))))).toList\n        m1",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        val l1_map = l1.zipWithIndex.toMap\n        val l2_map = l2.zipWithIndex.toMap\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m += (l1(i) -> m2)\n            result = m :: result\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = new ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = new HashMap[String,Map[String,Long]]()\n            var map2 = new HashMap[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result += map.toMap\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).map(x => Map(x._1 -> Map(x._2 -> l3(l1.indexOf(x._1)))))\n        m1",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        val m5 = l1.zip(m4).toMap\n        val m6 = l1.zip(m5).toMap\n        val m7 = l1.zip(m6).toMap\n        val m8 = l1.zip(m7).toMap\n        val m9 = l1.zip(m8).toMap\n        val m10 = l1.zip(m9).toMap\n        val m11 = l1.zip(m10).toMap\n        val m12 = l1.zip(m11).toMap\n        val m13 = l1.zip(m12).toMap\n        val m14 = l1.zip(m13).toMap\n        val m15 = l1.zip(m14).toMap\n        val m16 = l1.zip(m15).toMap\n        val m17 = l1.zip(m16).toMap\n        val m18 = l1.zip(m17).toMap\n        val m19 = l1.zip(m18).toMap\n        val m20 = l1.zip(m19).toMap\n        val m21 = l1.zip(m20).toMap\n        val m22 = l1.zip(m21).toMap\n        val m23 = l1.zip(m22).toMap\n        val m24 = l1.zip(m23).toMap\n        val m25 = l1.zip(m24).toMap\n        val m26 = l1.zip(m25).toMap\n        val m27 = l1.zip(m26).toMap\n        val m28 = l1.zip(m27).toMap\n        val m29 = l1.zip(m28).toMap\n        val m30 = l1.zip(m29).toMap\n        val m31 = l1.zip(m30).toMap\n        val m32 = l1.zip(m31).toMap",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m1 = new HashMap[String,Map[String,Long]]\n            val m2 = new HashMap[String,Long]\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2.toMap)\n            result += m1.toMap\n        }\n        result.toList",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m\n        }\n        result.toList",
    "        val l = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        l",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        val m5 = l1.zip(m4).toMap\n        val m6 = l1.zip(m5).toMap\n        val m7 = l1.zip(m6).toMap\n        val m8 = l1.zip(m7).toMap\n        val m9 = l1.zip(m8).toMap\n        val m10 = l1.zip(m9).toMap\n        val m11 = l1.zip(m10).toMap\n        val m12 = l1.zip(m11).toMap\n        val m13 = l1.zip(m12).toMap\n        val m14 = l1.zip(m13).toMap\n        val m15 = l1.zip(m14).toMap\n        val m16 = l1.zip(m15).toMap\n        val m17 = l1.zip(m16).toMap\n        val m18 = l1.zip(m17).toMap\n        val m19 = l1.zip(m18).toMap\n        val m20 = l1.zip(m19).toMap\n        val m21 = l1.zip(m20).toMap\n        val m22 = l1.zip(m21).toMap\n        val m23 = l1.zip(m22).toMap\n        val m24 = l1.zip(m23).toMap\n        val m25 = l1.zip(m24).toMap\n        val m26 = l1.zip(m25).toMap\n        val m27 = l1.zip(m26).toMap\n        val m28 = l1.zip(m27).toMap\n        val m29 = l1.zip(m28).toMap\n        val m30 = l1.zip(m29).toMap\n        val m31 = l1.zip(m30).toMap\n        val m32 = l1.zip(m31).toMap",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val map = Map[String,Map[String,Long]]()\n        val list = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n        }\n        list :+ map",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2))).toList\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m\n        }\n        result.toList",
    "        val m1 = l1.zip(l2).map(x => Map(x._1 -> Map(x._2 -> l3(l1.indexOf(x._1)))))\n        m1",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get)).toList\n        m3",
    "        val result = new ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = new HashMap[String,Map[String,Long]]()\n            val map2 = new HashMap[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result += map.toMap\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m += (l1(i) -> m2)\n            result = result :+ m\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        m4.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        m4.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map[String,Map[String,Long]]()\n            val innerMap = Map[String,Long]()\n            innerMap(l2(i)) = l3(i)\n            map(l1(i)) = innerMap\n            result += map\n        }\n        result.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = m1.map(x => x._1 -> m2)\n        l1.map(x => Map(x -> m3(x)))",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).getOrElse(0))).getOrElse(Map())))\n        m3",
    "        if (l1.length != l2.length || l1.length != l3.length) {\n            throw new Exception(\"Lists are not of same length\")\n        }\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        result",
    "        val m1 = l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))\n        m1",
    "        // Write your code here\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = map1 :: result\n        }\n        result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x).map(y => y -> m2(y))))\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3)\n        val l4 = l.transpose\n        val l5 = l4.map(x => Map(x(0) -> Map(x(1) -> x(2))))\n        l5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result : List[Map[String,Map[String,Long]]] = List()\n        for (i <- 0 until l1.length) {\n            var map : Map[String,Map[String,Long]] = Map()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = m1.map(x => Map(x._1 -> m2))\n        m3.toList",
    "        if (l1.length != l2.length || l2.length != l3.length) {\n            return List()\n        }\n        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val m1 = Map(l1(i) -> Map(l2(i) -> l3(i)))\n            result += m1\n        }\n        result.toList",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val l = List(l1,l2,l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1(x).map(y => Map(y -> m2(y)))))\n        m3",
    "        val map = Map[String,Map[String,Long]]()\n        val list = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            list :+ map\n        }\n        list",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = m1.zip(m3).toMap\n        val m5 = m4.toList\n        m5",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map1 = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map1 += (l1(i) -> map2)\n            result = result :+ map1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            var temp2 = Map[String,Long]()\n            temp2 += (l2(i) -> l3(i))\n            temp += (l1(i) -> temp2)\n            result = result :+ temp\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        var map = Map[String,Map[String,Long]]()\n        for (i <- 0 until l1.length) {\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = map :: result\n        }\n        result",
    "        val r = new ListBuffer[Map[String,Map[String,Long]]]\n        for (i <- 0 until l1.length) {\n            val m = new HashMap[String,Map[String,Long]]\n            val m1 = new HashMap[String,Long]\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            r += m.toMap\n        }\n        r.toList",
    "        val list = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            list += map\n        }\n        list.toList",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            var m1 = Map[String,Long]()\n            m1 += (l2(i) -> l3(i))\n            m += (l1(i) -> m1)\n            result = result :+ m\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m = Map[String,Map[String,Long]]()\n            m += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ m\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        result",
    "        val m1 = l1.zip(l2).map(x => (x._1, x._2)).toMap\n        val m2 = l2.zip(l3).map(x => (x._1, x._2)).toMap\n        val m3 = l1.zip(m2).map(x => (x._1, x._2)).toMap\n        val m4 = l1.zip(m3).map(x => (x._1, x._2)).toMap\n        val m5 = l1.zip(m4).map(x => (x._1, x._2)).toMap\n        m5.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => Map(x -> m1.get(x).map(y => Map(y -> m2.get(y).get)).get))\n        m3",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var temp = Map[String,Map[String,Long]]()\n            temp += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ temp\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => (x, m1.get(x).map(y => (y, m2.get(y))).toMap))\n        m3",
    "        var list = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 to l1.length - 1) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            list = list :+ map\n        }\n        list",
    "        l1.zip(l2).zip(l3).map(x => Map(x._1._1 -> Map(x._1._2 -> x._2)))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        val l = List(l1, l2, l3).transpose\n        l.map(x => Map(x(0) -> Map(x(1) -> x(2))))",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => x -> m1(x).map(y => y -> m2(y)).toMap).toMap\n        l1.map(x => Map(x -> m3(x)))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        // Write your code here\n        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            map += (l1(i) -> innerMap)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        val result = ListBuffer[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            val innerMap = Map(l2(i) -> l3(i))\n            val outerMap = Map(l1(i) -> innerMap)\n            result += outerMap\n        }\n        result.toList",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.zip(m2).toMap\n        val m4 = l1.zip(m3).toMap\n        val m5 = l1.zip(m4).toMap\n        l1.map(x => m5(x))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            var map2 = Map[String,Long]()\n            map2 += (l2(i) -> l3(i))\n            map += (l1(i) -> map2)\n            result = result :+ map\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var innerMap = Map[String,Long]()\n            innerMap += (l2(i) -> l3(i))\n            var outerMap = Map[String,Map[String,Long]]()\n            outerMap += (l1(i) -> innerMap)\n            result = result :+ outerMap\n        }\n        return result",
    "        val m1 = l1.zip(l2).toMap\n        val m2 = l2.zip(l3).toMap\n        val m3 = l1.map(x => x -> m1(x).map(y => y -> m2(y)).toMap).toMap\n        l1.map(x => Map(x -> m3(x)))",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var m1 = Map[String,Map[String,Long]]()\n            var m2 = Map[String,Long]()\n            m2 += (l2(i) -> l3(i))\n            m1 += (l1(i) -> m2)\n            result = result :+ m1\n        }\n        return result",
    "        var result = List[Map[String,Map[String,Long]]]()\n        for (i <- 0 until l1.length) {\n            var map = Map[String,Map[String,Long]]()\n            map += (l1(i) -> Map(l2(i) -> l3(i)))\n            result = result :+ map\n        }\n        result"
  ]
}