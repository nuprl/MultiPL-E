{
  "name": "mbpp_77_is_Diff",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find whether a number is divisible by 11.\n    def isDiff(n : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isDiff((12345l)) == (false));\n    assert(isDiff((1212112l)) == (true));\n    assert(isDiff((1212l)) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).toInt - '0'\n            else sum2 += s(i).toInt - '0'\n        }\n        abs(sum1 - sum2) % 11 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        var n2 = n\n        while (n2 > 0) {\n            if (i % 2 == 0) sum1 += n2 % 10\n            else sum2 += n2 % 10\n            n2 /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        while (n > 0) {\n            if (i % 2 == 0) sum1 += n % 10\n            else sum2 += n % 10\n            n /= 10\n            i += 1\n        }\n        sum1 == sum2",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        var nn = n\n        while (nn > 0) {\n            if (i % 2 == 0) sum1 += nn % 10\n            else sum2 += nn % 10\n            nn /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        while (n > 0) {\n            if (i % 2 == 0) sum1 += n % 10\n            else sum2 += n % 10\n            n /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).toString.toInt\n            else sum2 += s(i).toString.toInt\n        }\n        sum1 - sum2 == 0",
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).toInt - '0'\n            else sum2 += s(i).toInt - '0'\n        }\n        sum1 - sum2 == 0",
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).toInt - '0'\n            else sum2 += s(i).toInt - '0'\n        }\n        abs(sum1 - sum2) % 11 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        var n2 = n\n        while (n2 > 0) {\n            if (i % 2 == 0) sum1 += n2 % 10\n            else sum2 += n2 % 10\n            n2 /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        var n1 = n\n        while (n1 > 0) {\n            if (i % 2 == 0) {\n                sum1 += n1 % 10\n            } else {\n                sum2 += n1 % 10\n            }\n            n1 /= 10\n            i += 1\n        }\n        return abs(sum1 - sum2) % 11 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        while (n > 0) {\n            if (i % 2 == 0) sum1 += n % 10\n            else sum2 += n % 10\n            n /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        val s = n.toString\n        val l = s.length\n        val d = (0 until l).map(i => if (i % 2 == 0) s(i).asDigit else -s(i).asDigit).sum\n        d % 11 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        while (n > 0) {\n            if (i % 2 == 0) {\n                sum1 += n % 10\n            } else {\n                sum2 += n % 10\n            }\n            n /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).toInt - '0'\n            else sum2 += s(i).toInt - '0'\n        }\n        abs(sum1 - sum2) % 11 == 0",
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).asDigit\n            else sum2 += s(i).asDigit\n        }\n        return abs(sum1 - sum2) % 11 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        while (n > 0) {\n            if (i % 2 == 0) sum1 += n % 10\n            else sum2 += n % 10\n            n /= 10\n            i += 1\n        }\n        sum1 - sum2 == 0",
    "        val s = n.toString\n        val l = s.length\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until l) {\n            if (i % 2 == 0) sum1 += s(i).toInt - '0'.toInt\n            else sum2 += s(i).toInt - '0'.toInt\n        }\n        sum1 - sum2 == 0",
    "        var sum1 = 0\n        var sum2 = 0\n        var i = 0\n        var n1 = n\n        while (n1 > 0) {\n            if (i % 2 == 0) sum1 += n1 % 10\n            else sum2 += n1 % 10\n            n1 /= 10\n            i += 1\n        }\n        return abs(sum1 - sum2) % 11 == 0",
    "        val s = n.toString\n        var sum1 = 0\n        var sum2 = 0\n        for (i <- 0 until s.length) {\n            if (i % 2 == 0) sum1 += s(i).toInt - '0'.toInt\n            else sum2 += s(i).toInt - '0'.toInt\n        }\n        return abs(sum1 - sum2) % 11 == 0",
    "        val s = n.toString\n        var even = 0\n        var odd = 0\n        for (i <- 0 until s.length) {\n            if (i % 2 == 0) even += s(i) - '0'\n            else odd += s(i) - '0'\n        }\n        abs(even - odd) % 11 == 0"
  ]
}