{
  "name": "mbpp_119_search",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) arr(start)\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else search(arr, start, mid)\n                } else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else if (arr(mid) != arr(mid - 1)) search(arr, mid + 1, high)\n                    else search(arr, low, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        return arr(mid)",
    "        var i = 0\n        while(i < arr.length) {\n            if(i == 0) {\n                if(arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if(i == arr.length - 1) {\n                if(arr(i) != arr(i - 1)) return arr(i)\n            }\n            else {\n                if(arr(i) != arr(i + 1) && arr(i) != arr(i - 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) {\n                    val diff = arr(mid) - arr(mid - 1)\n                    if (diff == 1) return search(arr, mid + 1, end)\n                    else return search(arr, start, mid - 2)\n                }\n                else {\n                    val diff = arr(mid + 1) - arr(mid)\n                    if (diff == 1) return search(arr, start, mid - 1)\n                    else return search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m > 0 && arr(m) == arr(m - 1)) {\n                    if ((m - l) % 2 == 0) search(arr, l, m - 2)\n                    else search(arr, m + 1, r)\n                }\n                else if (m < arr.length - 1 && arr(m) == arr(m + 1)) {\n                    if ((r - m) % 2 == 0) search(arr, m + 2, r)\n                    else search(arr, l, m - 1)\n                }\n                else arr(m)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                } else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            } else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                } else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else -1\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else -1\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                    else search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) return arr(i)\n            if (arr(i) != arr(i + 1)) return arr(i)\n            search(arr, i + 2)\n        }\n        search(arr, 0)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(arr.length / 2) == arr(arr.length / 2 - 1)) return search(arr.slice(0, arr.length / 2))\n        if (arr(arr.length / 2) == arr(arr.length / 2 + 1)) return search(arr.slice(arr.length / 2 + 1, arr.length))\n        arr(arr.length / 2)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            }\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        return arr(mid)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)",
    "        arr.groupBy(x => x).mapValues(_.size).filter(x => x._2 == 1).keys.head",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        var start = 0\n        var end = arr.length - 1\n        while (start < end) {\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) start = mid + 2\n                else end = mid\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) start = mid + 1\n                else end = mid - 1\n            }\n        }\n        arr(start)",
    "        if (arr.size == 1) return arr(0)\n        val mid = arr.size / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(mid + 1, arr.size))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(0, mid))\n        else arr(mid)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else return arr(mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                else if (arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                else return arr(mid)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid - 1) == arr(mid)) search(arr.slice(0, mid))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n        else arr(mid)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid - 1) != arr(mid) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid - 1) == arr(mid)) search(arr, left, mid - 1)\n            else search(arr, mid + 1, right)\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else 0\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) -1 else arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        arr(mid)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == high || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (1, arr.length - 2)\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            } else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        arr(left)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                    else arr(mid)\n                } else {\n                    if (arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                    else arr(mid)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else search(arr, mid + 2, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            if (start + 1 == end) {\n                if (arr(start) == arr(end)) return arr(end)\n                else return arr(start)\n            }\n            val mid = (start + end) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) return search(arr, mid + 1, end)\n                else return search(arr, start, mid - 2)\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((end - mid) % 2 == 0) return search(arr, start, mid - 1)\n                else return search(arr, mid + 2, end)\n            }\n            else return arr(mid)\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, start, mid - 1)\n                else search(arr, mid + 1, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n            else arr(mid)\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        arr(mid)",
    "        if (arr.size == 1) return arr(0)\n        if (arr(arr.size / 2) == arr(arr.size / 2 - 1)) search(arr.slice(0, arr.size / 2))\n        else if (arr(arr.size / 2) == arr(arr.size / 2 + 1)) search(arr.slice(arr.size / 2 + 1, arr.size))\n        else arr(arr.size / 2)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, left, mid - 2)\n                else search(arr, mid + 1, right)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, mid + 2, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) l = m + 2\n                else r = m\n            } else {\n                if (arr(m) == arr(m - 1)) l = m + 1\n                else r = m - 1\n            }\n        }\n        arr(l)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) == arr(1)) return search(arr.tail.tail)\n        if (arr(0) != arr(1)) return arr(0)\n        return -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(0, mid - 1))\n        } else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(mid + 2, arr.length))\n        } else arr(mid)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, start, mid - 1)\n                else search(arr, mid + 1, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (arr(m) == arr(m - 1)) {\n                if (m % 2 == 0) l = m + 1\n                else r = m - 1\n            }\n            else {\n                if (m % 2 == 0) r = m - 1\n                else l = m + 1\n            }\n        }\n        return -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start + 1) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid + 1) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) {\n                i += 2\n            }\n            else {\n                return arr(i)\n            }\n        }\n        return arr(arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        while(i < arr.length - 1) {\n            if(arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (m == arr.length - 1 || arr(m) == arr(m + 1)) search(arr, l, m - 1)\n                    else if (arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - low) % 2 == 0) search(arr, low, mid - 2)\n                else search(arr, mid + 1, high)\n            }\n            else {\n                if ((high - mid) % 2 == 0) search(arr, mid + 2, high)\n                else search(arr, low, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, start, mid)\n                else search(arr, mid + 1, end)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 1)\n                else search(arr, mid, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) r = m - 2\n                else l = m + 1\n            }\n            else if (arr(m) == arr(m + 1)) {\n                if ((r - m) % 2 == 0) l = m + 2\n                else r = m - 1\n            }\n            else return arr(m)\n        }\n        return arr(l)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (m == arr.length - 1 || arr(m) == arr(m + 1)) search(arr, l, m - 1)\n                    else if (arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return -1\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) search(arr, low, mid - 2)\n                else search(arr, mid + 1, high)\n            }\n            else {\n                if ((mid - 1) % 2 == 0) search(arr, mid + 1, high)\n                else search(arr, low, mid - 2)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (0, arr.length - 1)\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        return -1",
    "        if (arr.length == 1) return arr.head\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(0, mid))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n        else arr(mid)",
    "        arr.groupBy(identity).mapValues(_.size).filter(_._2 == 1).keys.head",
    "        var i = 0\n        while(i < arr.length - 1) {\n            if(arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, right)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, left, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                    else search(arr, left, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                    else search(arr, mid + 2, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        val mid = arr.length / 2\n        if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        else return search(arr.slice(0, mid))",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid - 1) != arr(mid) && arr(mid + 1) != arr(mid)) return arr(mid)\n            if (arr(mid - 1) == arr(mid)) {\n                if ((mid - left) % 2 == 0) search(arr, left, mid - 2)\n                else search(arr, mid + 1, right)\n            }\n            else {\n                if ((right - mid) % 2 == 0) search(arr, mid + 2, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(1) else arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) search(arr.slice(mid + 1, arr.length))\n        else if (arr(mid) == arr(mid + 1)) search(arr.slice(0, mid))\n        else arr(mid)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return -1\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                else search(arr, mid + 1, high)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - i) % 2 == 0) i = mid + 1\n                else j = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((j - mid) % 2 == 0) j = mid - 1\n                else i = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else {\n                    if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) return -1\n            val mid = (left + right) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, left, mid - 2)\n                else search(arr, mid + 1, right)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, mid + 2, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            }\n            else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                else search(arr, low, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                else search(arr, low, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        val n = arr.length\n        if (n == 1) return arr(0)\n        if (n == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = n / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, n))\n            else search(arr.slice(mid, n))\n        } else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid, n))\n            else search(arr.slice(mid + 1, n))\n        } else arr(mid)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.size == 1) return arr.head\n        if (arr.size == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.size / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.size))\n            else return search(arr.slice(mid, arr.size))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                    else arr(mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else arr(mid)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) == arr(1)) return search(arr.drop(2))\n        if (arr(0) != arr(1)) return arr(0)\n        return -1",
    "        var result = 0L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n            else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) {\n                    result = arr(i)\n                    return result\n                }\n            }\n        }\n        result",
    "        arr.groupBy(identity).filter(_._2.length == 1).keys.head",
    "        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) arr(i)\n            else if (arr(i) == arr(i + 1)) search(arr, i + 2)\n            else arr(i)\n        }\n        search(arr, 0)",
    "        def search(arr : List[Long], index : Int) : Long = {\n            if (index == arr.length - 1) arr(index)\n            else if (arr(index) == arr(index + 1)) search(arr, index + 2)\n            else arr(index)\n        }\n        search(arr, 0)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                else search(arr, start, mid - 2)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else if (mid == arr.length - 1 || arr(mid) != arr(mid + 1)) arr(mid)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) result = arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) result = arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) result = arr(i)\n            }\n        }\n        result",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0) arr(m)\n                    else if (arr(m) == arr(m - 1)) search(arr, l, m - 2)\n                    else arr(m)\n                } else {\n                    if (m == arr.length - 1) arr(m)\n                    else if (arr(m) == arr(m + 1)) search(arr, l, m - 1)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "      arr.groupBy(identity).filter(x => x._2.length == 1).keys.toList.head",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, right)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, left, mid - 1)\n                }\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        else if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        else {\n            val mid = arr.length / 2\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            if (left.length % 2 == 0) {\n                if (left(left.length - 1) == left(left.length - 2)) return search(right)\n                else return search(left)\n            }\n            else {\n                if (left(left.length - 1) == left(left.length - 2)) return search(left)\n                else return search(right)\n            }\n        }",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) return arr(l)\n            val m = (l + r) / 2\n            if (m % 2 == 0) {\n                if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                else search(arr, l, m)\n            } else {\n                if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                else search(arr, l, m - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(0, mid))\n        }\n        else return arr(mid)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left > right) -1\n            else {\n                val mid = (left + right) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, left, mid - 2)\n                else search(arr, mid + 2, right)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "      // Fill up this function body\n      // You can add another function as well, if required\n      var i = 0\n      var j = arr.length - 1\n      while (i < j) {\n        val mid = (i + j) / 2\n        if (mid % 2 == 0) {\n          if (arr(mid) == arr(mid + 1)) i = mid + 2\n          else j = mid\n        }\n        else {\n          if (arr(mid) == arr(mid - 1)) i = mid + 1\n          else j = mid - 1\n        }\n      }\n      arr(i)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        arr.groupBy(x => x).filter(x => x._2.length == 1).map(x => x._1).head",
    "        val n = arr.length\n        if (n == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(n - 1) != arr(n - 2)) return arr(n - 1)\n        var left = 0\n        var right = n - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        val mid = arr.length / 2\n        if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        else return search(arr.slice(0, mid))",
    "        var result = -1L\n        for (i <- 0 until arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) result = arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) result = arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) result = arr(i)\n            }\n        }\n        result",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else search(arr, mid + 2, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (0, arr.length - 1)\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            } else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0 && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid == arr.length - 1 && arr(mid) != arr(mid - 1)) return arr(mid)\n            if (mid > 0 && mid < arr.length - 1 && arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) return search(arr, start, mid - 2)\n            else return search(arr, mid + 2, end)\n        }\n        search(arr, 0, arr.length - 1)",
    "        arr match {\n            case Nil => 0\n            case x :: Nil => x\n            case x :: y :: xs => if (x == y) search(xs) else x\n        }",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                else if (mid > 0 && arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else return arr(mid)\n            } else {\n                if (mid > 0 && arr(mid) == arr(mid - 1)) search(arr, mid + 1, high)\n                else if (mid < arr.length - 1 && arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                else return arr(mid)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) == arr(i + 1)) {\n                i += 2\n            } else {\n                return arr(i)\n            }\n        }\n        return arr(arr.length - 1)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1",
    "        var start = 0\n        var end = arr.length - 1\n        while (start < end) {\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) start = mid + 2\n                else end = mid\n            } else {\n                if (arr(mid) == arr(mid - 1)) start = mid + 1\n                else end = mid - 1\n            }\n        }\n        return arr(start)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) {\n                    if ((mid - start) % 2 == 0) return search(arr, mid + 1, end)\n                    else return search(arr, start, mid - 2)\n                }\n                else {\n                    if ((end - mid) % 2 == 0) return search(arr, start, mid - 1)\n                    else return search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        search(arr.slice(1, arr.length - 1))",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else return arr(mid)\n            } else {\n                if (arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else return arr(mid)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var (left, right) = (0, arr.length - 1)\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        val n = arr.length\n        var l = 0\n        var r = n - 1\n        while (l <= r) {\n            val m = (l + r) / 2\n            if (m == 0 || m == n - 1) return arr(m)\n            if (arr(m) != arr(m - 1) && arr(m) != arr(m + 1)) return arr(m)\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) l = m + 1\n                else r = m - 2\n            }\n            else {\n                if ((r - m) % 2 == 0) r = m - 1\n                else l = m + 2\n            }\n        }\n        -1",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) arr(start)\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else search(arr, start, mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - i) % 2 == 0) i = mid + 1\n                else j = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((j - mid) % 2 == 0) j = mid - 1\n                else i = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(i)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((mid - start) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0) {\n                    if (arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n                else if (mid == arr.length - 1) {\n                    if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, start, mid - 1)\n                else search(arr, mid + 1, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else if (mid == arr.length - 1 || arr(mid) != arr(mid + 1)) arr(mid)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) right = mid - 2\n                else left = mid + 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((right - mid) % 2 == 0) left = mid + 2\n                else right = mid - 1\n            }\n            else return arr(mid)\n        }\n        return arr(left)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "      if (arr.length == 1) return arr(0)\n      if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else arr(1)\n      val mid = arr.length / 2\n      if (arr(mid) == arr(mid - 1)) {\n        if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n        else search(arr.slice(mid, arr.length))\n      }\n      else if (arr(mid) == arr(mid + 1)) {\n        if (mid % 2 == 0) search(arr.slice(0, mid))\n        else search(arr.slice(0, mid + 1))\n      }\n      else arr(mid)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val mid = (l + r) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - l) % 2 == 0) l = mid + 1\n                else r = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((r - mid) % 2 == 0) r = mid - 1\n                else l = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(l)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else {\n                if ((right - mid) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n        }\n        -1",
    "        def search(arr : List[Long], left : Int, right : Int) : Long = {\n            if (left == right) return arr(left)\n            val mid = (left + right) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, right)\n                else search(arr, left, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, right)\n                else search(arr, left, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid == 0 && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (mid == arr.length - 1 && arr(mid) != arr(mid - 1)) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, start, mid - 2)\n                else search(arr, mid + 2, end)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 2, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) arr(0)\n        else if (arr.length == 2) if (arr(0) == arr(1)) arr(0) else -1\n        else {\n            val mid = arr.length / 2\n            if (arr(mid) == arr(mid - 1)) search(arr.slice(0, mid))\n            else if (arr(mid) == arr(mid + 1)) search(arr.slice(mid + 1, arr.length))\n            else arr(mid)\n        }",
    "        if (arr.length == 1) return arr(0)\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(0, mid - 1))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(mid + 1, arr.length))\n        }\n        else arr(mid)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0) {\n                if (arr(i) != arr(i + 1)) return arr(i)\n            } else if (i == arr.length - 1) {\n                if (arr(i) != arr(i - 1)) return arr(i)\n            } else {\n                if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            }\n            i += 1\n        }\n        return -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid - 1))\n            else search(arr.slice(0, mid))\n        }\n        else arr(mid)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(0, mid))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(mid + 1, arr.length))\n        return arr(mid)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) return -1\n            val mid = (l + r) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) return search(arr, mid + 1, r)\n                else return search(arr, l, mid - 1)\n            }\n            if (arr(mid) == arr(mid + 1)) {\n                if (mid % 2 == 0) return search(arr, l, mid - 1)\n                else return search(arr, mid + 1, r)\n            }\n            -1\n        }\n        search(arr, 0, arr.length - 1)",
    "        var left = 0\n        var right = arr.length - 1\n        while (left < right) {\n            val mid = (left + right) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - left + 1) % 2 == 0) left = mid + 1\n                else right = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((mid - left + 1) % 2 == 0) right = mid - 1\n                else left = mid + 1\n            }\n            else return arr(mid)\n        }\n        return arr(left)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            else if (arr(mid) == arr(mid - 1)) {\n                if ((mid - start) % 2 == 0) search(arr, start, mid - 2)\n                else search(arr, mid + 1, end)\n            }\n            else {\n                if ((end - mid) % 2 == 0) search(arr, mid + 2, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var l = 0\n        var r = arr.length - 1\n        while (l < r) {\n            val m = (l + r) / 2\n            if (arr(m) == arr(m - 1)) {\n                if ((m - l) % 2 == 0) r = m - 2\n                else l = m + 1\n            }\n            else if (arr(m) == arr(m + 1)) {\n                if ((r - m) % 2 == 0) l = m + 2\n                else r = m - 1\n            }\n            else return arr(m)\n        }\n        arr(l)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if (mid % 2 == 0) search(arr, mid + 1, high)\n                else search(arr, low, mid - 1)\n            }\n            else {\n                if (mid % 2 == 0) search(arr, low, mid - 1)\n                else search(arr, mid + 1, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) {\n            if (arr(0) == arr(1)) return -1\n            else return arr(0)\n        }\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) return search(arr.slice(mid + 1, arr.length))\n            else return search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) return search(arr.slice(0, mid))\n            else return search(arr.slice(0, mid + 1))\n        }\n        else return arr(mid)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid == 0 || mid == arr.length - 1) arr(mid)\n                else if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) arr(mid)\n                else if (arr(mid) == arr(mid - 1)) search(arr, low, mid - 2)\n                else search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, low, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], i : Int) : Long = {\n            if (i == arr.length - 1) arr(i)\n            else if (arr(i) == arr(i + 1)) search(arr, i + 2)\n            else arr(i)\n        }\n        search(arr, 0)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (m == arr.length - 1 || arr(m) == arr(m + 1)) arr(m)\n                    else if (arr(m) != arr(m - 1)) search(arr, l, m - 1)\n                    else search(arr, m + 1, r)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l == r) arr(l)\n            else {\n                val mid = (l + r) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, r)\n                    else search(arr, l, mid)\n                }\n                else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, r)\n                    else search(arr, l, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - i) % 2 == 0) i = mid + 1\n                else j = mid - 1\n            }\n            else if (arr(mid) == arr(mid + 1)) {\n                if ((j - mid) % 2 == 0) j = mid - 1\n                else i = mid + 1\n            }\n            else return arr(mid)\n        }\n        arr(i)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i < j) {\n            val mid = (i + j) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) i = mid + 2\n                else j = mid\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) i = mid + 1\n                else j = mid - 1\n            }\n        }\n        arr(i)",
    "        if (arr.size == 1) return arr(0)\n        if (arr(arr.size / 2) == arr(arr.size / 2 - 1)) return search(arr.slice(0, arr.size / 2))\n        if (arr(arr.size / 2) == arr(arr.size / 2 + 1)) return search(arr.slice(arr.size / 2, arr.size))\n        return arr(arr.size / 2)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) return -1\n            val mid = (low + high) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return search(arr, mid + 1, high)\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return search(arr, low, mid - 1)\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) return search(arr, low, mid - 2)\n                else return search(arr, mid + 2, high)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        // Fill up this function body\n        // You can add another function as well, if required\n        var i = 0\n        var j = arr.length - 1\n        while (i <= j) {\n            val mid = (i + j) / 2\n            if (mid == 0 || mid == arr.length - 1) return arr(mid)\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) i = mid + 1\n                else j = mid - 1\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) i = mid + 1\n                else j = mid - 1\n            }\n        }\n        -1"
  ]
}