{
  "name": "mbpp_119_search",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to find the element that appears only once in a sorted list.\n    def search(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(search((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong))) == (3l));\n    assert(search((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 5l.toLong, 7l.toLong, 7l.toLong, 8l.toLong))) == (8l));\n    assert(search((List[Long](1l.toLong, 2l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 4l.toLong, 4l.toLong))) == (1l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) arr(start)\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else search(arr, start, mid)\n                } else {\n                    if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                    else search(arr, start, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else if (arr(mid) != arr(mid - 1)) search(arr, mid + 1, high)\n                    else search(arr, low, mid - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) return search(arr.slice(mid + 1, arr.length))\n        if (arr(mid) == arr(mid + 1)) return search(arr.slice(0, mid))\n        return arr(mid)",
    "        var i = 0\n        while(i < arr.length) {\n            if(i == 0) {\n                if(arr(i) != arr(i + 1)) return arr(i)\n            }\n            else if(i == arr.length - 1) {\n                if(arr(i) != arr(i - 1)) return arr(i)\n            }\n            else {\n                if(arr(i) != arr(i + 1) && arr(i) != arr(i - 1)) return arr(i)\n            }\n            i += 1\n        }\n        -1",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var low = 0\n        var high = arr.length - 1\n        while (low <= high) {\n            val mid = (low + high) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (arr(mid) == arr(mid - 1)) {\n                if ((mid - 1) % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n            else {\n                if (mid % 2 == 0) low = mid + 1\n                else high = mid - 1\n            }\n        }\n        -1",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(arr.length - 1)",
    "        def search(arr : List[Long], low : Int, high : Int) : Long = {\n            if (low > high) -1\n            else {\n                val mid = (low + high) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, high)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, low, mid - 2)\n                }\n                else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) arr(mid)\n                    else search(arr, mid + 1, high)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m % 2 == 0) {\n                    if (arr(m) == arr(m + 1)) search(arr, m + 2, r)\n                    else if (m == 0 || arr(m) != arr(m - 1)) arr(m)\n                    else search(arr, l, m - 2)\n                }\n                else {\n                    if (arr(m) == arr(m - 1)) search(arr, m + 1, r)\n                    else if (m == arr.length - 1 || arr(m) != arr(m + 1)) arr(m)\n                    else search(arr, l, m - 1)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            } else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) return -1\n            val mid = (start + end) / 2\n            if (mid == 0) {\n                if (arr(mid) != arr(mid + 1)) return arr(mid)\n                else return -1\n            }\n            else if (mid == arr.length - 1) {\n                if (arr(mid) != arr(mid - 1)) return arr(mid)\n                else return -1\n            }\n            else {\n                if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n                else if (arr(mid) == arr(mid - 1)) {\n                    val diff = arr(mid) - arr(mid - 1)\n                    if (diff == 1) return search(arr, mid + 1, end)\n                    else return search(arr, start, mid - 2)\n                }\n                else {\n                    val diff = arr(mid + 1) - arr(mid)\n                    if (diff == 1) return search(arr, start, mid - 1)\n                    else return search(arr, mid + 2, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr.length == 2) return if (arr(0) == arr(1)) arr(0) else -1\n        val mid = arr.length / 2\n        if (arr(mid) == arr(mid - 1)) {\n            if (mid % 2 == 0) search(arr.slice(mid + 1, arr.length))\n            else search(arr.slice(mid, arr.length))\n        }\n        else if (arr(mid) == arr(mid + 1)) {\n            if (mid % 2 == 0) search(arr.slice(0, mid))\n            else search(arr.slice(0, mid + 1))\n        }\n        else arr(mid)",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        return arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start == end) return arr(start)\n            val mid = (start + end) / 2\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                else search(arr, start, mid)\n            }\n            else {\n                if (arr(mid) == arr(mid - 1)) search(arr, mid + 1, end)\n                else search(arr, start, mid - 1)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        def search(arr : List[Long], l : Int, r : Int) : Long = {\n            if (l > r) -1\n            else {\n                val m = (l + r) / 2\n                if (m > 0 && arr(m) == arr(m - 1)) {\n                    if ((m - l) % 2 == 0) search(arr, l, m - 2)\n                    else search(arr, m + 1, r)\n                }\n                else if (m < arr.length - 1 && arr(m) == arr(m + 1)) {\n                    if ((r - m) % 2 == 0) search(arr, m + 2, r)\n                    else search(arr, l, m - 1)\n                }\n                else arr(m)\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        var i = 0\n        while (i < arr.length) {\n            if (i == 0 && arr(i) != arr(i + 1)) return arr(i)\n            else if (i == arr.length - 1 && arr(i) != arr(i - 1)) return arr(i)\n            else if (arr(i) != arr(i - 1) && arr(i) != arr(i + 1)) return arr(i)\n            i += 1\n        }\n        return -1",
    "        var i = 0\n        while (i < arr.length - 1) {\n            if (arr(i) != arr(i + 1)) return arr(i)\n            i += 2\n        }\n        arr(i)",
    "        def search(arr : List[Long], start : Int, end : Int) : Long = {\n            if (start > end) -1\n            else {\n                val mid = (start + end) / 2\n                if (mid % 2 == 0) {\n                    if (arr(mid) == arr(mid + 1)) search(arr, mid + 2, end)\n                    else if (mid == 0 || arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, start, mid - 2)\n                } else {\n                    if (mid == arr.length - 1 || arr(mid) == arr(mid + 1)) search(arr, start, mid - 1)\n                    else if (arr(mid) != arr(mid - 1)) arr(mid)\n                    else search(arr, mid + 1, end)\n                }\n            }\n        }\n        search(arr, 0, arr.length - 1)",
    "        if (arr.length == 1) return arr(0)\n        if (arr(0) != arr(1)) return arr(0)\n        if (arr(arr.length - 1) != arr(arr.length - 2)) return arr(arr.length - 1)\n        var left = 0\n        var right = arr.length - 1\n        while (left <= right) {\n            val mid = (left + right) / 2\n            if (arr(mid) != arr(mid - 1) && arr(mid) != arr(mid + 1)) return arr(mid)\n            if (mid % 2 == 0) {\n                if (arr(mid) == arr(mid + 1)) left = mid + 1\n                else right = mid - 1\n            } else {\n                if (arr(mid) == arr(mid - 1)) left = mid + 1\n                else right = mid - 1\n            }\n        }\n        -1"
  ]
}