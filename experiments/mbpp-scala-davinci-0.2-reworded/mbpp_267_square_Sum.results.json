{
  "name": "mbpp_267_square_Sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt by 2) {\n            sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwal6lhij.scala:13)\n\tat Problem.main(tmpwal6lhij.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (2 * i - 1) * (2 * i - 1)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        if (n == 0) 0\n        else if (n == 1) 1\n        else squareSum(n - 1) + (2 * n - 1) * (2 * n - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2*i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        // TODO: Implement me!\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3uqky71c.scala:9)\n\tat Problem.main(tmp3uqky71c.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to n) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        // Fill in the body of this function\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (2 * i - 1) * (2 * i - 1)\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt by 2) {\n            sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwal6lhij.scala:13)\n\tat Problem.main(tmpwal6lhij.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += pow((2 * i - 1), 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123001,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        return n * n * n\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpge2ypkgy.scala:9)\n\tat Problem.main(tmpge2ypkgy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        // Write your code here\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += (2 * i - 1) * (2 * i - 1)\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        // your code here\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        return (1 to n.toInt).map(x => x * x).sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpf8fgdjw3.scala:9)\n\tat Problem.main(tmpf8fgdjw3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum : Long = 0\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            if (i % 2 != 0) sum += i * i\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnlum6lg4.scala:13)\n\tat Problem.main(tmpnlum6lg4.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1L to n) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        // Your code here\n        var sum = 0L\n        for (i <- 1L to n) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt by 2) {\n            sum += i * i\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwal6lhij.scala:13)\n\tat Problem.main(tmpwal6lhij.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        // Your code here\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1666123000,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpnaty0dvd.scala:10)\n\tat Problem.main(tmpnaty0dvd.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    def squareSum(n : Long) : Long = {\n        var sum = 0L\n        for (i <- 1 to n.toInt) {\n            sum += pow(2 * i - 1, 2).toLong\n        }\n        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(squareSum((2l)) == (10l));\n    assert(squareSum((3l)) == (35l));\n    assert(squareSum((4l)) == (84l));\n    }\n\n}\n",
      "timestamp": 1665510371,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}