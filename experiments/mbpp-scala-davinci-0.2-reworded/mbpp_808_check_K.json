{
  "name": "mbpp_808_check_K",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuples contain the k or not.\n    def checkK(test_tup : Long, K : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkK((10l, 4l, 5l, 6l, 8l), (6l)) == (true));\n    assert(checkK((1l, 2l, 3l, 4l, 5l, 6l), (7l)) == (false));\n    assert(checkK((7l, 8l, 9l, 44l, 11l, 12l), (11l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil_sum = 0\n        var test_tup_str_arr_len_half_floor_sum = 0\n        var test_tup_str_arr_len_half_ceil_sum_str = \"\"\n        var test_tup_str_arr_len_half_floor_sum_str = \"\"\n        var test_tup_str_arr_len_half_ceil_sum_str_arr = Array[Char]()\n        var test_tup_str_arr_len_half_floor_sum_str_arr = Array[Char]()\n        var test_tup_str_arr_len_half_ceil_sum_str_arr_len = 0\n        var test_tup_str_arr_len_half_floor_sum_str_arr_len = 0\n        var test_tup_str_arr_len_half_ceil_sum_str_arr_len_half = 0\n        var test_tup_str_arr_len_half_floor_sum_str_arr_len_half = 0\n        var test_tup_str_arr_len_half_ceil_sum_str_arr_len_half_ceil = 0\n        var test_tup_str_arr_len_half_floor_sum_str_arr_len_half_floor = 0\n       ",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- test_tup.toString) {\n            if (i.toString.toLong == K) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var result = false\n        if (test_tup % K == 0) {\n            result = true\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 until test_tup.toString.length) {\n            sum += pow(test_tup.toString.charAt(i).asDigit, 2).toLong\n        }\n        if (sum == K) return true\n        else if (sum < K) return false\n        else return checkK(sum, K)",
    "        if (test_tup == K) return true\n        else return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.split(\"\")\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_sum = 0\n        for (i <- 0 until test_tup_str_arr_len) {\n            test_tup_str_arr_sum += test_tup_str_arr(i).toInt\n        }\n        if (test_tup_str_arr_sum == K) {\n            return true\n        } else {\n            return false\n        }",
    "        var tup_str = test_tup.toString\n        var tup_str_len = tup_str.length\n        var tup_str_arr = tup_str.toCharArray\n        var tup_str_arr_len = tup_str_arr.length\n        var tup_str_arr_len_half = tup_str_arr_len / 2\n        var tup_str_arr_len_half_1 = tup_str_arr_len_half + 1\n        var tup_str_arr_len_half_1_arr = new Array[Char](tup_str_arr_len_half_1)\n        var tup_str_arr_len_half_arr = new Array[Char](tup_str_arr_len_half)\n        var tup_str_arr_len_half_1_str = \"\"\n        var tup_str_arr_len_half_str = \"\"\n        var tup_str_arr_len_half_1_int = 0\n        var tup_str_arr_len_half_int = 0\n        var tup_str_arr_len_half_1_int_sq = 0\n        var tup_str_arr_len_half_int_sq = 0\n        var tup_str_arr_len_half_1_int_sq_sum = 0\n        var tup_str_arr_len_half_int_sq_sum = 0\n        var tup_str_arr_len_half_1_int_sq_sum_sqrt = 0\n        var tup_str_arr_len_half_int_sq_sum_sqrt = 0\n        var tup_str_arr_len_half_1_int_sq_sum_sqrt_str = \"\"\n        var tup_str_arr_len_half_int_sq_sum_sqrt_str = \"\"\n        var tup_str_arr_len_half_1_int_sq_sum_sqrt_str_len = 0\n        var tup_str_arr_len_half_int_sq_sum_sqrt_str_len = 0\n        var tup",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- 1 to test_tup.toString.length) {\n            if (test_tup.toString.charAt(i - 1).asDigit == K) {\n                flag = true\n                return flag\n            }\n        }\n        flag",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.split(\"\")\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_int = new Array[Int](test_tup_str_arr_len)\n        for (i <- 0 until test_tup_str_arr_len) {\n            test_tup_str_arr_int(i) = test_tup_str_arr(i).toInt\n        }\n        var test_tup_str_arr_int_sum = test_tup_str_arr_int.sum\n        if (test_tup_str_arr_int_sum == K) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_rev = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_rev_arr = new Array[Int](test_tup_str_arr_len_half_int)\n        for (i <- 0 to test_tup_str_arr_len_half_int_rev) {\n            test_tup_str_arr_len_half_int_rev_arr(i) = test_tup_str_arr_len_half_int_rev - i\n        }\n        var test_tup_str_arr_len_half_int_rev_arr_len = test_tup_str_arr_len_half_int_rev_arr.length\n        var test_tup_str_arr_len_half_int_rev_arr_len_half = test_tup_str_arr_len_half_int_rev_arr_len / 2\n        var test_tup_str_arr_len_half_int_rev_arr_len_half_int = test_tup_str_arr_len_half_int_rev_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_rev_arr_len_half_int_rev = test_tup_str_arr_len_half_int_rev_arr_len_half_int - 1\n        for (i <- 0 to test_tup_str_arr_len",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = new Array[Long](test_tup_len)\n        for (i <- 0 until test_tup_len) {\n            test_tup_arr(i) = test_tup_str(i).toString.toLong\n        }\n        var sum = 0L\n        for (i <- 0 until test_tup_len) {\n            sum += pow(test_tup_arr(i), K).toLong\n        }\n        if (sum == test_tup) {\n            return true\n        }\n        return false",
    "        val test_str = test_tup.toString\n        val test_str_len = test_str.length\n        var i = 0\n        while (i < test_str_len) {\n            if (test_str(i) == K.toString.charAt(0)) return true\n            i += 1\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_1 = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_2 = test_tup_str_arr_len_half - 1\n        var test_tup_str_arr_len_half_1_to_end = test_tup_str_arr.slice(test_tup_str_arr_len_half_1, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_2_to_end = test_tup_str_arr.slice(test_tup_str_arr_len_half_2, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_1_to_end_str = test_tup_str_arr_len_half_1_to_end.mkString\n        var test_tup_str_arr_len_half_2_to_end_str = test_tup_str_arr_len_half_2_to_end.mkString\n        var test_tup_str_arr_len_half_1_to_end_str_int = test_tup_str_arr_len_half_1_to_end_str.toInt\n        var test_tup_str_arr_len_half_2_to_end_str_int = test_tup_str_arr_len_half_2_to_end_str.toInt\n        var test_tup_str_arr_len_half_1_to_end_str_int_sqrt = sqrt(test_tup_str_arr_len_half_1_to_end_",
    "        var flag : Boolean = false\n        var temp : Long = test_tup\n        while(temp != 0) {\n            if(temp % 10 == K) {\n                flag = true\n                return flag\n            }\n            temp /= 10\n        }\n        return flag",
    "        var sum = 0L\n        for (i <- 0 to test_tup.toString.length - 1) {\n            sum += pow(test_tup.toString.charAt(i).asDigit, 2).toLong\n        }\n        if (sum == K) return true\n        else if (sum < K) return false\n        else return checkK(sum, K)",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_rev = test_tup_str_arr.reverse\n        var test_tup_str_arr_rev_len = test_tup_str_arr_rev.length\n        var test_tup_str_arr_rev_str = test_tup_str_arr_rev.mkString\n        var test_tup_str_arr_rev_str_len = test_tup_str_arr_rev_str.length\n        var test_tup_str_arr_rev_str_to_long = test_tup_str_arr_rev_str.toLong\n        var test_tup_str_arr_rev_str_to_long_str = test_tup_str_arr_rev_str_to_long.toString\n        var test_tup_str_arr_rev_str_to_long_str_len = test_tup_str_arr_rev_str_to_long_str.length\n        var test_tup_str_arr_rev_str_to_long_str_to_long = test_tup_str_arr_rev_str_to_long_str.toLong\n        var test_tup_str_arr_rev_str_to_long_str_to_long_str = test_tup_str_arr_rev_str_to_long_str_to_long.toString\n        var test_tup_str_arr_rev_str_to_long_str_to_long_str_len = test_tup_str_arr_rev_str_to_long_str_to_long_str.length\n        var test_tup_str_arr_rev_str_to_long_str_to_long_str_to_long = test_tup_str_arr",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K"
  ]
}