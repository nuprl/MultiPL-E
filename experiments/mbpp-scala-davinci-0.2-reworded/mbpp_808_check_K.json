{
  "name": "mbpp_808_check_K",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to check if the given tuples contain the k or not.\n    def checkK(test_tup : Long, K : Long) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(checkK((10l, 4l, 5l, 6l, 8l), (6l)) == (true));\n    assert(checkK((1l, 2l, 3l, 4l, 5l, 6l), (7l)) == (false));\n    assert(checkK((7l, 8l, 9l, 44l, 11l, 12l), (11l)) == (true));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil_sum = 0\n        var test_tup_str_arr_len_half_floor_sum = 0\n        var test_tup_str_arr_len_half_ceil_sum_str = \"\"\n        var test_tup_str_arr_len_half_floor_sum_str = \"\"\n        var test_tup_str_arr_len_half_ceil_sum_str_arr = Array[Char]()\n        var test_tup_str_arr_len_half_floor_sum_str_arr = Array[Char]()\n        var test_tup_str_arr_len_half_ceil_sum_str_arr_len = 0\n        var test_tup_str_arr_len_half_floor_sum_str_arr_len = 0\n        var test_tup_str_arr_len_half_ceil_sum_str_arr_len_half = 0\n        var test_tup_str_arr_len_half_floor_sum_str_arr_len_half = 0\n        var test_tup_str_arr_len_half_ceil_sum_str_arr_len_half_ceil = 0\n        var test_tup_str_arr_len_half_floor_sum_str_arr_len_half_floor = 0\n       ",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- test_tup.toString) {\n            if (i.toString.toLong == K) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var result = false\n        if (test_tup % K == 0) {\n            result = true\n        }\n        return result",
    "        var sum = 0L\n        for (i <- 0 until test_tup.toString.length) {\n            sum += pow(test_tup.toString.charAt(i).asDigit, 2).toLong\n        }\n        if (sum == K) return true\n        else if (sum < K) return false\n        else return checkK(sum, K)",
    "        if (test_tup == K) return true\n        else return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.split(\"\")\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_sum = 0\n        for (i <- 0 until test_tup_str_arr_len) {\n            test_tup_str_arr_sum += test_tup_str_arr(i).toInt\n        }\n        if (test_tup_str_arr_sum == K) {\n            return true\n        } else {\n            return false\n        }",
    "        var tup_str = test_tup.toString\n        var tup_str_len = tup_str.length\n        var tup_str_arr = tup_str.toCharArray\n        var tup_str_arr_len = tup_str_arr.length\n        var tup_str_arr_len_half = tup_str_arr_len / 2\n        var tup_str_arr_len_half_1 = tup_str_arr_len_half + 1\n        var tup_str_arr_len_half_1_arr = new Array[Char](tup_str_arr_len_half_1)\n        var tup_str_arr_len_half_arr = new Array[Char](tup_str_arr_len_half)\n        var tup_str_arr_len_half_1_str = \"\"\n        var tup_str_arr_len_half_str = \"\"\n        var tup_str_arr_len_half_1_int = 0\n        var tup_str_arr_len_half_int = 0\n        var tup_str_arr_len_half_1_int_sq = 0\n        var tup_str_arr_len_half_int_sq = 0\n        var tup_str_arr_len_half_1_int_sq_sum = 0\n        var tup_str_arr_len_half_int_sq_sum = 0\n        var tup_str_arr_len_half_1_int_sq_sum_sqrt = 0\n        var tup_str_arr_len_half_int_sq_sum_sqrt = 0\n        var tup_str_arr_len_half_1_int_sq_sum_sqrt_str = \"\"\n        var tup_str_arr_len_half_int_sq_sum_sqrt_str = \"\"\n        var tup_str_arr_len_half_1_int_sq_sum_sqrt_str_len = 0\n        var tup_str_arr_len_half_int_sq_sum_sqrt_str_len = 0\n        var tup",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- 1 to test_tup.toString.length) {\n            if (test_tup.toString.charAt(i - 1).asDigit == K) {\n                flag = true\n                return flag\n            }\n        }\n        flag",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.split(\"\")\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_int = new Array[Int](test_tup_str_arr_len)\n        for (i <- 0 until test_tup_str_arr_len) {\n            test_tup_str_arr_int(i) = test_tup_str_arr(i).toInt\n        }\n        var test_tup_str_arr_int_sum = test_tup_str_arr_int.sum\n        if (test_tup_str_arr_int_sum == K) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_rev = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_rev_arr = new Array[Int](test_tup_str_arr_len_half_int)\n        for (i <- 0 to test_tup_str_arr_len_half_int_rev) {\n            test_tup_str_arr_len_half_int_rev_arr(i) = test_tup_str_arr_len_half_int_rev - i\n        }\n        var test_tup_str_arr_len_half_int_rev_arr_len = test_tup_str_arr_len_half_int_rev_arr.length\n        var test_tup_str_arr_len_half_int_rev_arr_len_half = test_tup_str_arr_len_half_int_rev_arr_len / 2\n        var test_tup_str_arr_len_half_int_rev_arr_len_half_int = test_tup_str_arr_len_half_int_rev_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_rev_arr_len_half_int_rev = test_tup_str_arr_len_half_int_rev_arr_len_half_int - 1\n        for (i <- 0 to test_tup_str_arr_len",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = new Array[Long](test_tup_len)\n        for (i <- 0 until test_tup_len) {\n            test_tup_arr(i) = test_tup_str(i).toString.toLong\n        }\n        var sum = 0L\n        for (i <- 0 until test_tup_len) {\n            sum += pow(test_tup_arr(i), K).toLong\n        }\n        if (sum == test_tup) {\n            return true\n        }\n        return false",
    "        val test_str = test_tup.toString\n        val test_str_len = test_str.length\n        var i = 0\n        while (i < test_str_len) {\n            if (test_str(i) == K.toString.charAt(0)) return true\n            i += 1\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_1 = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_2 = test_tup_str_arr_len_half - 1\n        var test_tup_str_arr_len_half_1_to_end = test_tup_str_arr.slice(test_tup_str_arr_len_half_1, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_2_to_end = test_tup_str_arr.slice(test_tup_str_arr_len_half_2, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_1_to_end_str = test_tup_str_arr_len_half_1_to_end.mkString\n        var test_tup_str_arr_len_half_2_to_end_str = test_tup_str_arr_len_half_2_to_end.mkString\n        var test_tup_str_arr_len_half_1_to_end_str_int = test_tup_str_arr_len_half_1_to_end_str.toInt\n        var test_tup_str_arr_len_half_2_to_end_str_int = test_tup_str_arr_len_half_2_to_end_str.toInt\n        var test_tup_str_arr_len_half_1_to_end_str_int_sqrt = sqrt(test_tup_str_arr_len_half_1_to_end_",
    "        var flag : Boolean = false\n        var temp : Long = test_tup\n        while(temp != 0) {\n            if(temp % 10 == K) {\n                flag = true\n                return flag\n            }\n            temp /= 10\n        }\n        return flag",
    "        var sum = 0L\n        for (i <- 0 to test_tup.toString.length - 1) {\n            sum += pow(test_tup.toString.charAt(i).asDigit, 2).toLong\n        }\n        if (sum == K) return true\n        else if (sum < K) return false\n        else return checkK(sum, K)",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_rev = test_tup_str_arr.reverse\n        var test_tup_str_arr_rev_len = test_tup_str_arr_rev.length\n        var test_tup_str_arr_rev_str = test_tup_str_arr_rev.mkString\n        var test_tup_str_arr_rev_str_len = test_tup_str_arr_rev_str.length\n        var test_tup_str_arr_rev_str_to_long = test_tup_str_arr_rev_str.toLong\n        var test_tup_str_arr_rev_str_to_long_str = test_tup_str_arr_rev_str_to_long.toString\n        var test_tup_str_arr_rev_str_to_long_str_len = test_tup_str_arr_rev_str_to_long_str.length\n        var test_tup_str_arr_rev_str_to_long_str_to_long = test_tup_str_arr_rev_str_to_long_str.toLong\n        var test_tup_str_arr_rev_str_to_long_str_to_long_str = test_tup_str_arr_rev_str_to_long_str_to_long.toString\n        var test_tup_str_arr_rev_str_to_long_str_to_long_str_len = test_tup_str_arr_rev_str_to_long_str_to_long_str.length\n        var test_tup_str_arr_rev_str_to_long_str_to_long_str_to_long = test_tup_str_arr",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- 1 to test_tup.toString.length) {\n            if (test_tup.toString.charAt(i - 1).toString.toLong == K) {\n                flag = true\n            }\n        }\n        return flag",
    "        var flag = false\n        var temp = test_tup\n        while(temp != 0) {\n            if(temp % 10 == K) {\n                flag = true\n                return flag\n            }\n            temp /= 10\n        }\n        flag",
    "        val tup_list = new ListBuffer[Long]()\n        var tup = test_tup\n        while (tup > 0) {\n            tup_list += tup % 10\n            tup /= 10\n        }\n        tup_list.contains(K)",
    "        var flag = false\n        for (i <- 0 until test_tup.toString.length) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        if (test_tup % K == 0) return true\n        else return false",
    "        if (test_tup == K) {\n            return true\n        }\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var test_tup_copy = test_tup\n        while (test_tup_copy > 0) {\n            if (test_tup_copy % 10 == K) return true\n            test_tup_copy /= 10\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half_floor)\n        var test_tup_str_arr_len_half_ceil_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half_ceil, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_floor_arr_str = test_tup_str_arr_len_half_floor_arr.mkString\n        var test_tup_str_arr_len_half_ceil_arr_str = test_tup_str_arr_len_half_ceil_arr.mkString\n        var test_tup_str_arr_len_half_floor_arr_str_num = test_tup_str_arr_len_half_floor_arr_str.toLong\n        var test_tup_str_arr_len_half_ceil_arr_str_num = test_tup_str_arr_len_half_ceil_arr_str.toLong\n        var test_tup_str_arr_len_half_floor_arr_str_num_sum = test_tup_str_arr_len_half_floor_arr_str_num +",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        var i = 0\n        while (i < test_tup_str_len) {\n            if (test_tup_str(i) == K.toString()(0)) return true\n            i += 1\n        }\n        return false",
    "        val test_arr = test_tup.toString.toCharArray\n        val test_arr_int = test_arr.map(x => x.toString.toInt)\n        val test_arr_int_sum = test_arr_int.sum\n        if (test_arr_int_sum == K) {\n            return true\n        }\n        return false",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_len_half = test_tup_arr_len / 2\n        var test_tup_arr_len_half_ceil = ceil(test_tup_arr_len_half).toInt\n        var test_tup_arr_len_half_floor = floor(test_tup_arr_len_half).toInt\n        var test_tup_arr_len_half_ceil_arr = new Array[Char](test_tup_arr_len_half_ceil)\n        var test_tup_arr_len_half_floor_arr = new Array[Char](test_tup_arr_len_half_floor)\n        var test_tup_arr_len_half_ceil_arr_str = \"\"\n        var test_tup_arr_len_half_floor_arr_str = \"\"\n        var test_tup_arr_len_half_ceil_arr_str_int = 0\n        var test_tup_arr_len_half_floor_arr_str_int = 0\n        var test_tup_arr_len_half_ceil_arr_str_int_rev = 0\n        var test_tup_arr_len_half_floor_arr_str_int_rev = 0\n        var test_tup_arr_len_half_ceil_arr_str_int_rev_str = \"\"\n        var test_tup_arr_len_half_floor_arr_str_int_rev_str = \"\"\n        var test_tup_arr_len_half_ceil_arr_str_int_rev_str_int = 0\n        var test_tup_arr_len_half_floor_arr_str_int_rev_str_int = 0\n        var test_tup_arr_len_half_ceil_arr_str_int_rev_str_int_rev = 0\n        var test_tup_arr_len_half_floor_arr_str_int_",
    "        var tup_sum = 0L\n        var tup_prod = 1L\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length) {\n            tup_sum += tup_str(i).toString.toInt\n            tup_prod *= tup_str(i).toString.toInt\n        }\n        if (tup_sum == K || tup_prod == K) return true\n        return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_arr = test_tup_str.toCharArray\n        val test_tup_arr_int = test_tup_arr.map(x => x.toString.toInt)\n        val test_tup_arr_int_sum = test_tup_arr_int.sum\n        if (test_tup_arr_int_sum == K) {\n            return true\n        }\n        return false",
    "        var sum : Long = 0\n        var temp : Long = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return (sum == K)",
    "        val test_tup_str = test_tup.toString\n        for (i <- 0 until test_tup_str.length) {\n            if (test_tup_str(i) == K.toString()(0)) return true\n        }\n        return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        var i = 0\n        var flag = false\n        while (i < test_tup_str_len) {\n            if (test_tup_str.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n            }\n            i += 1\n        }\n        return flag",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n                break\n            }\n        }\n        return flag",
    "        var tup_list = List[Long]()\n        for (i <- 1 to test_tup.toString.length) {\n            tup_list = tup_list :+ test_tup.toString.substring(0, i).toLong\n        }\n        if (tup_list.contains(K)) true else false",
    "        var tup_sum = 0L\n        for (i <- 1 to test_tup.toString.length) {\n            tup_sum += pow(test_tup.toString.charAt(i - 1).toString.toInt, 2).toLong\n        }\n        if (tup_sum == K) true else false",
    "        var test_tup_list = test_tup.toString.split(\"\").map(_.toInt).toList\n        var test_tup_list_sum = test_tup_list.sum\n        if (test_tup_list_sum == K) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_plus_1 = test_tup_str_arr_len_half_int + 1\n        var test_tup_str_arr_len_half_int_plus_1_minus_1 = test_tup_str_arr_len_half_int_plus_1 - 1\n        var test_tup_str_arr_len_half_int_plus_1_minus_1_int = test_tup_str_arr_len_half_int_plus_1_minus_1.toInt\n        var test_tup_str_arr_len_half_int_plus_1_minus_1_int_minus_1 = test_tup_str_arr_len_half_int_plus_1_minus_1_int - 1\n        var test_tup_str_arr_len_half_int_plus_1_minus_1_int_minus_1_int = test_tup_str_arr_len_half_int_plus_1_minus_1_int_minus_1.toInt\n        var test_tup_str_arr_len_half_int_plus_1_minus_1_int_minus_1_int_plus_1 = test_tup_str_arr_len_half_int_plus_1_minus_1_int_minus_1_int + 1\n        var test_tup_str_arr_len_half_int_plus_1_minus_1_int_minus_1_int_plus_1_",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        val test_str = test_tup.toString\n        val test_str_len = test_str.length\n        for (i <- 0 until test_str_len) {\n            val test_num = test_str.substring(i, i + 1).toInt\n            if (test_num == K) return true\n        }\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) true else false",
    "        var tup = test_tup\n        while (tup > 0) {\n            if (tup % 10 == K) return true\n            tup /= 10\n        }\n        return false",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) true else false",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n            }\n        }\n        return flag",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_rev = test_tup_arr.reverse\n        var test_tup_arr_rev_str = test_tup_arr_rev.mkString\n        var test_tup_arr_rev_int = test_tup_arr_rev_str.toLong\n        if (test_tup_arr_rev_int == K) {\n            return true\n        } else {\n            return false\n        }",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_minus_one = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_plus_one = test_tup_str_arr_len_half_int + 1\n        var test_tup_str_arr_len_half_int_plus_two = test_tup_str_arr_len_half_int + 2\n        var test_tup_str_arr_len_half_int_plus_three = test_tup_str_arr_len_half_int + 3\n        var test_tup_str_arr_len_half_int_plus_four = test_tup_str_arr_len_half_int + 4\n        var test_tup_str_arr_len_half_int_plus_five = test_tup_str_arr_len_half_int + 5\n        var test_tup_str_arr_len_half_int_plus_six = test_tup_str_arr_len_half_int + 6\n        var test_tup_str_arr_len_half_int_plus_seven = test_tup_str_arr_len_half_int + 7\n        var test_tup_str_arr_len_half_int_plus_eight = test_tup_str_arr_len_half_int + 8\n        var test_tup_str_arr_len_half_int_plus_nine = test_tup",
    "        var test_tup_str = test_tup.toString\n        if (test_tup_str.contains(K.toString)) {\n            return true\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_plus = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_minus = test_tup_str_arr_len_half - 1\n        var test_tup_str_arr_len_half_plus_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half_plus)\n        var test_tup_str_arr_len_half_minus_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half_minus, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_plus_arr_str = test_tup_str_arr_len_half_plus_arr.mkString\n        var test_tup_str_arr_len_half_minus_arr_str = test_tup_str_arr_len_half_minus_arr.mkString\n        var test_tup_str_arr_len_half_plus_arr_str_int = test_tup_str_arr_len_half_plus_arr_str.toInt\n        var test_tup_str_arr_len_half_minus_arr_str_int = test_tup_str_arr_len_half_minus_arr_str.toInt\n        var test_tup_str_arr_len_half_plus_arr_str_int_sqrt = sqrt(test_tup_str_arr_len_half_plus_arr_str_int)\n        var test_tup_str_",
    "        if (test_tup % K == 0) true else false",
    "        val tup_arr = test_tup.toString.toCharArray\n        val tup_arr_len = tup_arr.length\n        var i = 0\n        var flag = false\n        while (i < tup_arr_len) {\n            if (tup_arr(i) == K.toString.toCharArray()(0)) {\n                flag = true\n                return flag\n            }\n            i += 1\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.split(\"\")\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half_floor)\n        var test_tup_str_arr_len_half_ceil_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half_ceil, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_floor_arr_len = test_tup_str_arr_len_half_floor_arr.length\n        var test_tup_str_arr_len_half_ceil_arr_len = test_tup_str_arr_len_half_ceil_arr.length\n        var test_tup_str_arr_len_half_floor_arr_sum = 0\n        var test_tup_str_arr_len_half_ceil_arr_sum = 0\n        for (i <- 0 until test_tup_str_arr_len_half_floor_arr_len) {\n            test_tup_str_arr_len_half_floor_arr_sum += test_tup_str_arr_len_half_floor_arr(i).toInt\n        }\n        for (i <- 0 until test_tup_str_arr_len_half",
    "        val test_str = test_tup.toString\n        val test_str_len = test_str.length\n        var i = 0\n        while (i < test_str_len) {\n            if (test_str(i) == K + 48) return true\n            i += 1\n        }\n        return false",
    "        if (test_tup % K == 0) true\n        else false",
    "        var tup = test_tup\n        while (tup > 0) {\n            if (tup % 10 == K) return true\n            tup /= 10\n        }\n        return false",
    "        var sum = 0L\n        var temp = test_tup\n        while(temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if(sum == K) return true\n        else return false",
    "        var test_tup_str = test_tup.toString\n        var flag = false\n        for (i <- 0 to test_tup_str.length - 1) {\n            if (test_tup_str(i) == K.toString()(0)) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var test_tup_arr = test_tup.toString.split(\"\").map(_.toInt)\n        var K_arr = K.toString.split(\"\").map(_.toInt)\n        var flag = true\n        for (i <- 0 until K_arr.length) {\n            if (!test_tup_arr.contains(K_arr(i))) {\n                flag = false\n            }\n        }\n        return flag",
    "        var flag = false\n        for (i <- test_tup.toString.toList) {\n            if (i.toString.toLong == K) {\n                flag = true\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var t = test_tup\n        while (t > 0) {\n            sum += t % 10\n            t /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_1 = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_1_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half_1)\n        var test_tup_str_arr_len_half_1_arr_str = test_tup_str_arr_len_half_1_arr.mkString\n        var test_tup_str_arr_len_half_1_arr_str_num = test_tup_str_arr_len_half_1_arr_str.toLong\n        var test_tup_str_arr_len_half_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half_1, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_arr_str = test_tup_str_arr_len_half_arr.mkString\n        var test_tup_str_arr_len_half_arr_str_num = test_tup_str_arr_len_half_arr_str.toLong\n        var test_tup_str_arr_len_half_1_arr_str_num_sq = test_tup_str_arr_len_half_1_arr_str_num * test_tup_str_arr_len_half_1_arr_str_num\n        var test_tup_str_arr_len_half_arr_str_num_sq = test_tup_str_arr_len_half_arr_str_num * test_tup_str_arr_len_half",
    "        var test_tup_arr = test_tup.toString.split(\"\").map(_.toInt)\n        var sum = 0\n        for (i <- 0 to test_tup_arr.length - 1) {\n            sum += test_tup_arr(i)\n        }\n        if (sum == K) {\n            return true\n        }\n        return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.toCharArray\n        var sum = 0L\n        for (i <- 0 until test_tup_str_len) {\n            sum += pow(test_tup_str_arr(i).toLong - '0'.toLong, 2).toLong\n        }\n        if (sum == K) return true\n        else return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_sum = 0\n        for (i <- 0 until test_tup_arr_len) {\n            test_tup_arr_sum += test_tup_arr(i).toInt - '0'.toInt\n        }\n        if (test_tup_arr_sum == K) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var test_tup_temp = test_tup\n        var K_temp = K\n        while (test_tup_temp > 0) {\n            if (test_tup_temp % 10 == K_temp) return true\n            test_tup_temp /= 10\n        }\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var K_arr = K.toString.toCharArray\n        var flag = false\n        for (i <- 0 until test_tup_arr.length) {\n            if (test_tup_arr(i) == K_arr(0)) {\n                flag = true\n                for (j <- 1 until K_arr.length) {\n                    if (test_tup_arr(i + j) != K_arr(j)) {\n                        flag = false\n                        break\n                    }\n                }\n                if (flag) return true\n            }\n        }\n        return false",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i).toString.toLong == K) {\n                flag = true\n            }\n        }\n        return flag",
    "        var k_found = false\n        var i = 0\n        while(i < test_tup.toString.length && !k_found) {\n            if(test_tup.toString.charAt(i).asDigit == K) k_found = true\n            i += 1\n        }\n        return k_found",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_len_half = test_tup_arr_len / 2\n        var test_tup_arr_len_half_ceil = ceil(test_tup_arr_len_half).toInt\n        var test_tup_arr_len_half_floor = floor(test_tup_arr_len_half).toInt\n        var test_tup_arr_len_half_ceil_sum = 0\n        var test_tup_arr_len_half_floor_sum = 0\n        for (i <- 0 until test_tup_arr_len_half_ceil) {\n            test_tup_arr_len_half_ceil_sum += test_tup_arr(i).toInt - 48\n        }\n        for (i <- test_tup_arr_len_half_floor until test_tup_arr_len) {\n            test_tup_arr_len_half_floor_sum += test_tup_arr(i).toInt - 48\n        }\n        if (test_tup_arr_len_half_ceil_sum == K || test_tup_arr_len_half_floor_sum == K) {\n            return true\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var k_str = K.toString\n        var k_str_len = k_str.length\n        var k_str_arr = k_str.toCharArray\n        var k_str_arr_rev = k_str_arr.reverse\n        var k_str_arr_rev_str = k_str_arr_rev.mkString\n        var k_str_arr_rev_str_len = k_str_arr_rev_str.length\n        var k_str_arr_rev_str_arr = k_str_arr_rev_str.toCharArray\n        var test_tup_str_arr_rev = test_tup_str_arr.reverse\n        var test_tup_str_arr_rev_str = test_tup_str_arr_rev.mkString\n        var test_tup_str_arr_rev_str_len = test_tup_str_arr_rev_str.length\n        var test_tup_str_arr_rev_str_arr = test_tup_str_arr_rev_str.toCharArray\n        var test_tup_str_arr_rev_str_arr_sub = test_tup_str_arr_rev_str_arr.slice(0, k_str_arr_rev_str_len)\n        var test_tup_str_arr_rev_str_arr_sub_str = test_tup_str_arr_rev_str_arr_sub.mkString\n        if (test_tup_str_arr_rev_str_arr_sub_str == k_str_arr_rev_str) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp != 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var sum = 0L\n        var temp = test_tup\n        while(temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if(sum == K) return true\n        else return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_rev = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_rev_arr = new Array[Char](test_tup_str_arr_len_half_int)\n        for (i <- 0 to test_tup_str_arr_len_half_int_rev) {\n            test_tup_str_arr_len_half_int_rev_arr(i) = test_tup_str_arr(test_tup_str_arr_len_half_int_rev - i)\n        }\n        var test_tup_str_arr_len_half_int_rev_arr_str = test_tup_str_arr_len_half_int_rev_arr.mkString\n        var test_tup_str_arr_len_half_int_rev_arr_str_long = test_tup_str_arr_len_half_int_rev_arr_str.toLong\n        var test_tup_str_arr_len_half_int_rev_arr_str_long_add = test_tup_str_arr_len_half_int_rev_arr_str_long + test_tup\n        if (test_tup_str_arr_len_half_int_rev_arr_str_long_add == K) {\n            return true\n        } else {\n            return false\n        }",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) true else false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_len_half = test_tup_arr_len / 2\n        var test_tup_arr_len_half_plus = test_tup_arr_len_half + 1\n        var test_tup_arr_len_half_minus = test_tup_arr_len_half - 1\n        var test_tup_arr_len_half_plus_minus = test_tup_arr_len_half_plus - 1\n        var test_tup_arr_len_half_minus_plus = test_tup_arr_len_half_minus + 1\n        var test_tup_arr_len_half_plus_minus_plus = test_tup_arr_len_half_plus_minus + 1\n        var test_tup_arr_len_half_minus_plus_minus = test_tup_arr_len_half_minus_plus - 1\n        var test_tup_arr_len_half_plus_minus_plus_minus = test_tup_arr_len_half_plus_minus_plus - 1\n        var test_tup_arr_len_half_minus_plus_minus_plus = test_tup_arr_len_half_minus_plus_minus + 1\n        var test_tup_arr_len_half_plus_minus_plus_minus_plus = test_tup_arr_len_half_plus_minus_plus_minus + 1\n        var test_tup_arr_len_half_minus_plus_minus_plus_minus = test_tup_arr_len_half_minus_plus_minus_plus - 1\n        var test_tup_arr_len_half_plus_minus_plus_minus_plus_minus = test_tup_arr_len_half_plus_minus_plus_minus_plus - 1\n        var test_tup_arr_len_half_minus_plus_minus_plus_minus",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_len_half = test_tup_arr_len / 2\n        var test_tup_arr_len_half_1 = test_tup_arr_len_half + 1\n        var test_tup_arr_len_half_2 = test_tup_arr_len_half - 1\n        var test_tup_arr_len_half_3 = test_tup_arr_len_half + 2\n        var test_tup_arr_len_half_4 = test_tup_arr_len_half - 2\n        var test_tup_arr_len_half_5 = test_tup_arr_len_half + 3\n        var test_tup_arr_len_half_6 = test_tup_arr_len_half - 3\n        var test_tup_arr_len_half_7 = test_tup_arr_len_half + 4\n        var test_tup_arr_len_half_8 = test_tup_arr_len_half - 4\n        var test_tup_arr_len_half_9 = test_tup_arr_len_half + 5\n        var test_tup_arr_len_half_10 = test_tup_arr_len_half - 5\n        var test_tup_arr_len_half_11 = test_tup_arr_len_half + 6\n        var test_tup_arr_len_half_12 = test_tup_arr_len_half - 6\n        var test_tup_arr_len_half_13 = test_tup_arr_len_half + 7\n        var test_tup_arr_len_half_14 = test_tup_arr_len_half - 7\n        var test_tup_arr_len_half_15 = test_tup_arr_len_half + 8\n        var test_tup_arr_len",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_len_half = test_tup_str_len / 2\n        val test_tup_str_len_half_plus_one = test_tup_str_len_half + 1\n        val test_tup_str_len_half_minus_one = test_tup_str_len_half - 1\n        val test_tup_str_len_half_minus_one_plus_one = test_tup_str_len_half_minus_one + 1\n        val test_tup_str_len_half_minus_one_minus_one = test_tup_str_len_half_minus_one - 1\n        val test_tup_str_len_half_minus_one_minus_one_plus_one = test_tup_str_len_half_minus_one_minus_one + 1\n        val test_tup_str_len_half_minus_one_minus_one_minus_one = test_tup_str_len_half_minus_one_minus_one - 1\n        val test_tup_str_len_half_minus_one_minus_one_minus_one_plus_one = test_tup_str_len_half_minus_one_minus_one_minus_one + 1\n        val test_tup_str_len_half_minus_one_minus_one_minus_one_minus_one = test_tup_str_len_half_minus_one_minus_one_minus_one - 1\n        val test_tup_str_len_half_minus_one_minus_one_minus_one_minus_one_plus_one = test_tup_str_len_half_minus_one_minus_one_minus_one_minus_one + 1\n        val test_tup_str_len_half_minus_one_minus_one_minus_one_minus_one_minus_one = test_tup_str_len_half_minus_one_minus_one_",
    "        var test_tup_str = test_tup.toString\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_len_half = test_tup_arr_len / 2\n        var test_tup_arr_len_half_plus = test_tup_arr_len_half + 1\n        var test_tup_arr_len_half_minus = test_tup_arr_len_half - 1\n        var test_tup_arr_len_half_minus_plus = test_tup_arr_len_half_minus + 1\n        var test_tup_arr_len_half_minus_minus = test_tup_arr_len_half_minus - 1\n        var test_tup_arr_len_half_minus_minus_plus = test_tup_arr_len_half_minus_minus + 1\n        var test_tup_arr_len_half_minus_minus_minus = test_tup_arr_len_half_minus_minus - 1\n        var test_tup_arr_len_half_minus_minus_minus_plus = test_tup_arr_len_half_minus_minus_minus + 1\n        var test_tup_arr_len_half_minus_minus_minus_minus = test_tup_arr_len_half_minus_minus_minus - 1\n        var test_tup_arr_len_half_minus_minus_minus_minus_plus = test_tup_arr_len_half_minus_minus_minus_minus + 1\n        var test_tup_arr_len_half_minus_minus_minus_minus_minus = test_tup_arr_len_half_minus_minus_minus_minus - 1\n        var test_tup_arr_len_half_minus_minus_minus_minus_minus_plus = test_tup_arr_len_half_minus_minus_minus_minus_minus + 1\n        var test_tup_arr_len_half_minus_minus_minus_minus_minus",
    "        var test_tup_arr = test_tup.toString.toCharArray.map(_.asDigit)\n        var test_tup_arr_rev = test_tup_arr.reverse\n        var test_tup_arr_rev_str = test_tup_arr_rev.mkString(\"\")\n        var test_tup_arr_rev_str_int = test_tup_arr_rev_str.toLong\n        if (test_tup_arr_rev_str_int == K) {\n            return true\n        }\n        return false",
    "        if (test_tup == K) return true\n        return false",
    "        var temp = test_tup\n        while (temp > 0) {\n            if (temp % 10 == K) return true\n            temp /= 10\n        }\n        return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_rev = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_rev_arr = new Array[Char](test_tup_str_arr_len_half_int)\n        var test_tup_str_arr_len_half_int_rev_arr_len = test_tup_str_arr_len_half_int_rev_arr.length\n        var test_tup_str_arr_len_half_int_rev_arr_len_rev = test_tup_str_arr_len_half_int_rev_arr_len - 1\n        var test_tup_str_arr_len_half_int_rev_arr_len_rev_int = test_tup_str_arr_len_half_int_rev_arr_len_rev.toInt\n        var test_tup_str_arr_len_half_int_rev_arr_len_rev_int_rev = test_tup_str_arr_len_half_int_rev_arr_len_rev_int - 1\n        var test_tup_str_arr_len_half_int_rev_arr_len_rev_int_rev_arr = new Array[Char](test_tup_str_arr_len_half_int_rev_arr_len_rev_int)\n        var test_tup_str_arr_len_half_int_rev_arr_len_rev_int",
    "        var sum : Long = 0\n        var tup : Long = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        val test_tup_str = test_tup.toString\n        var sum = 0\n        for (i <- 0 until test_tup_str.length) {\n            sum += pow(test_tup_str(i).asDigit, 2).toInt\n        }\n        if (sum == K) true else false",
    "        if (test_tup == K) return true\n        else return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- 0 until test_tup.toString.length) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) flag = true\n        }\n        return flag",
    "        var flag = false\n        for (i <- 0 until test_tup.toString.length) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var i = 0\n        var flag = false\n        while (i < test_tup_str_arr_len) {\n            if (test_tup_str_arr(i) == K.toString.charAt(0)) {\n                flag = true\n                break\n            }\n            i += 1\n        }\n        return flag",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var flag = false\n        for (i <- 0 until test_tup.toString.length) {\n            if (test_tup.toString.charAt(i).asDigit == K) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_int = test_tup_arr.map(x => x.toInt - 48)\n        var test_tup_arr_int_sum = test_tup_arr_int.sum\n        if (test_tup_arr_int_sum == K) {\n            return true\n        } else {\n            return false\n        }",
    "        val test_tup_str = test_tup.toString\n        for (i <- 0 until test_tup_str.length) {\n            if (test_tup_str(i) == K.toString()(0)) return true\n        }\n        return false",
    "        var tup = test_tup\n        var k = K\n        while (tup > 0) {\n            if (tup % 10 == k) return true\n            tup /= 10\n        }\n        return false",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var sum = 0\n        for (i <- 0 to test_tup_arr.length - 1) {\n            sum += pow(test_tup_arr(i).toString.toInt, 2).toInt\n        }\n        if (sum == K) {\n            return true\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_plus = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_minus = test_tup_str_arr_len_half - 1\n        var test_tup_str_arr_len_half_plus_minus = test_tup_str_arr_len_half_plus - 1\n        var test_tup_str_arr_len_half_minus_plus = test_tup_str_arr_len_half_minus + 1\n        var test_tup_str_arr_len_half_plus_minus_plus = test_tup_str_arr_len_half_plus_minus + 1\n        var test_tup_str_arr_len_half_minus_plus_minus = test_tup_str_arr_len_half_minus_plus - 1\n        var test_tup_str_arr_len_half_plus_minus_plus_minus = test_tup_str_arr_len_half_plus_minus_plus - 1\n        var test_tup_str_arr_len_half_minus_plus_minus_plus = test_tup_str_arr_len_half_minus_plus_minus + 1\n        var test_tup_str_arr_len_half_plus_minus_plus_minus_plus = test_tup_str_arr_len_half_plus_minus_plus_minus + 1\n        var test_tup_str_arr_len_half_minus_plus_minus_plus_minus = test_tup_str_arr_len_half_minus_plus_minus_plus - 1\n",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        if (test_tup % K == 0) true\n        else false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_minus_1 = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_plus_1 = test_tup_str_arr_len_half_int + 1\n        var test_tup_str_arr_len_half_int_plus_2 = test_tup_str_arr_len_half_int + 2\n        var test_tup_str_arr_len_half_int_plus_3 = test_tup_str_arr_len_half_int + 3\n        var test_tup_str_arr_len_half_int_plus_4 = test_tup_str_arr_len_half_int + 4\n        var test_tup_str_arr_len_half_int_plus_5 = test_tup_str_arr_len_half_int + 5\n        var test_tup_str_arr_len_half_int_plus_6 = test_tup_str_arr_len_half_int + 6\n        var test_tup_str_arr_len_half_int_plus_7 = test_tup_str_arr_len_half_int + 7\n        var test_tup_str_arr_len_half_int_plus_8 = test_tup_str_arr_len_half_int + 8\n        var test_tup_str_arr_len_half_int_plus_9 = test_tup",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_plus_one = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_minus_one = test_tup_str_arr_len_half - 1\n        var test_tup_str_arr_len_half_minus_two = test_tup_str_arr_len_half - 2\n        var test_tup_str_arr_len_half_minus_three = test_tup_str_arr_len_half - 3\n        var test_tup_str_arr_len_half_minus_four = test_tup_str_arr_len_half - 4\n        var test_tup_str_arr_len_half_minus_five = test_tup_str_arr_len_half - 5\n        var test_tup_str_arr_len_half_minus_six = test_tup_str_arr_len_half - 6\n        var test_tup_str_arr_len_half_minus_seven = test_tup_str_arr_len_half - 7\n        var test_tup_str_arr_len_half_minus_eight = test_tup_str_arr_len_half - 8\n        var test_tup_str_arr_len_half_minus_nine = test_tup_str_arr_len_half - 9\n        var test_tup_str_arr_len_half_minus_ten = test_tup_str_arr_len_half - 10\n        var test_tup_str_arr_len_half_minus_eleven = test_tup_str",
    "        var flag = false\n        var temp = test_tup\n        while(temp > 0) {\n            if(temp % 10 == K) {\n                flag = true\n                temp = 0\n            }\n            else {\n                temp /= 10\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup != 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var sum : Long = 0\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        if (test_tup == K) return true\n        else return false",
    "        var flag = false\n        for (i <- 0 until test_tup.toString.length) {\n            if (test_tup.toString.charAt(i).toString.toInt == K) {\n                flag = true\n            }\n        }\n        return flag",
    "        var flag = false\n        val tup_list = List(test_tup)\n        for (i <- tup_list) {\n            if (i == K) {\n                flag = true\n            }\n        }\n        return flag",
    "        var tup = test_tup\n        while (tup > 0) {\n            if (tup % 10 == K) return true\n            tup /= 10\n        }\n        return false",
    "        var sum = 0L\n        var test_tup_copy = test_tup\n        while (test_tup_copy > 0) {\n            sum += test_tup_copy % 10\n            test_tup_copy /= 10\n        }\n        if (sum == K) true else false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_len = test_tup_str.length\n        var i = 0\n        while (i < test_tup_len) {\n            if (test_tup_str(i) == K.toString()(0)) {\n                return true\n            }\n            i += 1\n        }\n        return false",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var K_arr = K.toString.toCharArray\n        var K_arr_len = K_arr.length\n        var i = 0\n        var j = 0\n        var flag = false\n        while(i < test_tup_arr_len) {\n            if(test_tup_arr(i) == K_arr(j)) {\n                j += 1\n                if(j == K_arr_len) {\n                    flag = true\n                    break\n                }\n            }\n            i += 1\n        }\n        flag",
    "        var sum : Long = 0\n        var temp : Long = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) {\n            return true\n        }\n        return false",
    "        var sum : Long = 0\n        var temp : Long = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        return false",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i).toString.toInt == K) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var flag = false\n        var temp = test_tup\n        while(temp != 0) {\n            if(temp % 10 == K) {\n                flag = true\n                return flag\n            }\n            temp /= 10\n        }\n        return flag",
    "        var flag = false\n        val tup_arr = test_tup.toString.toCharArray\n        for (i <- 0 to tup_arr.length - 1) {\n            if (tup_arr(i) == K.toString.toCharArray()(0)) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_sum = 0\n        for (i <- 0 until test_tup_arr_len) {\n            test_tup_arr_sum += test_tup_arr(i).toInt - 48\n        }\n        if (test_tup_arr_sum == K) {\n            return true\n        }\n        return false",
    "        var flag = false\n        var i = 1\n        while(i <= test_tup) {\n            if(test_tup % i == 0) {\n                if(i == K) {\n                    flag = true\n                }\n            }\n            i += 1\n        }\n        return flag",
    "        var sum = 0L\n        for (i <- 0 until test_tup.toString.length) {\n            sum += pow(test_tup.toString.charAt(i).asDigit, 2).toLong\n        }\n        if (sum == K) return true\n        else return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_minus_one = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_plus_one = test_tup_str_arr_len_half_int + 1\n        var test_tup_str_arr_len_half_int_plus_two = test_tup_str_arr_len_half_int + 2\n        var test_tup_str_arr_len_half_int_minus_two = test_tup_str_arr_len_half_int - 2\n        var test_tup_str_arr_len_half_int_plus_three = test_tup_str_arr_len_half_int + 3\n        var test_tup_str_arr_len_half_int_minus_three = test_tup_str_arr_len_half_int - 3\n        var test_tup_str_arr_len_half_int_plus_four = test_tup_str_arr_len_half_int + 4\n        var test_tup_str_arr_len_half_int_minus_four = test_tup_str_arr_len_half_int - 4\n        var test_tup_str_arr_len_half_int_plus_five = test_tup_str_arr_len_half_int + 5\n        var test_tup_str_arr_len_half_int_minus_five = test_tup",
    "        var flag = false\n        var test_tup_copy = test_tup\n        while(test_tup_copy > 0) {\n            if(test_tup_copy % 10 == K) {\n                flag = true\n                return flag\n            }\n            test_tup_copy /= 10\n        }\n        return flag",
    "        var flag = false\n        for (i <- test_tup.toString) {\n            if (i.toString.toLong == K) {\n                flag = true\n            }\n        }\n        return flag",
    "        var test_tup_str = test_tup.toString\n        var test_tup_len = test_tup_str.length\n        var test_tup_arr = test_tup_str.split(\"\")\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_int = new Array[Int](test_tup_arr_len)\n        for (i <- 0 until test_tup_arr_len) {\n            test_tup_arr_int(i) = test_tup_arr(i).toInt\n        }\n        var test_tup_arr_int_sum = test_tup_arr_int.sum\n        if (test_tup_arr_int_sum == K) {\n            return true\n        } else {\n            return false\n        }",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var sum = 0\n        for (i <- 0 until test_tup_arr.length) {\n            sum += pow(test_tup_arr(i).toInt - '0'.toInt, 2).toInt\n        }\n        return sum == K",
    "        if (test_tup % K == 0) true\n        else false",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n            }\n        }\n        return flag",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.toCharArray\n        for (i <- 0 until test_tup_str_len) {\n            if (test_tup_str_arr(i) == K.toString.charAt(0)) {\n                return true\n            }\n        }\n        return false",
    "        var sum : Long = 0\n        var temp : Long = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        var flag = false\n        var temp = test_tup\n        while(temp > 0) {\n            if(temp % 10 == K) {\n                flag = true\n                return flag\n            }\n            temp /= 10\n        }\n        return flag",
    "        var flag = false\n        var temp = test_tup\n        while(temp > 0) {\n            if(temp % 10 == K) {\n                flag = true\n                return flag\n            }\n            temp = temp / 10\n        }\n        return flag",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_rev = test_tup_str_arr.reverse\n        var test_tup_str_arr_rev_str = test_tup_str_arr_rev.mkString\n        var test_tup_str_arr_rev_str_int = test_tup_str_arr_rev_str.toInt\n        var test_tup_str_arr_rev_str_int_long = test_tup_str_arr_rev_str_int.toLong\n        var test_tup_str_arr_rev_str_int_long_str = test_tup_str_arr_rev_str_int_long.toString\n        var test_tup_str_arr_rev_str_int_long_str_len = test_tup_str_arr_rev_str_int_long_str.length\n        var test_tup_str_arr_rev_str_int_long_str_arr = test_tup_str_arr_rev_str_int_long_str.toCharArray\n        var test_tup_str_arr_rev_str_int_long_str_arr_rev = test_tup_str_arr_rev_str_int_long_str_arr.reverse\n        var test_tup_str_arr_rev_str_int_long_str_arr_rev_str = test_tup_str_arr_rev_str_int_long_str_arr_rev.mkString\n        var test_tup_str_arr_rev_str_int_long_str_arr_rev_str_int = test_tup_str_arr_rev_str_int_long_str_arr_rev_str.toInt\n        var test_tup_str_arr_rev_str_int_long_str_arr_rev_str_int_long = test_tup_str_arr_",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var K_arr = K.toString.toCharArray\n        var K_arr_len = K_arr.length\n        var i = 0\n        var j = 0\n        var flag = false\n        while(i < test_tup_arr_len) {\n            if(test_tup_arr(i) == K_arr(j)) {\n                j += 1\n                if(j == K_arr_len) {\n                    flag = true\n                    break\n                }\n            }\n            i += 1\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) true else false",
    "        if (test_tup % K == 0) return true\n        else return false",
    "        var result = false\n        if (test_tup == K) {\n            result = true\n        }\n        return result",
    "        val test_tup_str = test_tup.toString\n        for (i <- 0 until test_tup_str.length) {\n            if (test_tup_str(i) == '0') {\n                return false\n            }\n        }\n        var sum = 0L\n        for (i <- 0 until test_tup_str.length) {\n            sum += (test_tup_str(i) - '0')\n        }\n        if (sum == K) {\n            return true\n        }\n        return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.toCharArray\n        var sum = 0L\n        for (i <- 0 until test_tup_str_len) {\n            sum += pow(test_tup_str_arr(i).toString.toInt, test_tup_str_len).toLong\n        }\n        if (sum == K) return true\n        else return false",
    "        var tup_sum = 0L\n        var tup_prod = 1L\n        var tup_str = test_tup.toString\n        for (i <- 0 until tup_str.length) {\n            tup_sum += tup_str(i).toString.toInt\n            tup_prod *= tup_str(i).toString.toInt\n        }\n        if (tup_sum == K || tup_prod == K) return true\n        return false",
    "        var tup_sum = 0L\n        for (i <- 1 to test_tup.toString.length) {\n            tup_sum += pow(test_tup.toString.charAt(i - 1).asDigit, i).toLong\n        }\n        if (tup_sum == K) return true\n        else return false",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var K_arr = K.toString.toCharArray\n        var K_arr_len = K_arr.length\n        var i = 0\n        var j = 0\n        var flag = false\n        while(i < test_tup_arr_len && j < K_arr_len) {\n            if(test_tup_arr(i) == K_arr(j)) {\n                flag = true\n                j += 1\n            }\n            i += 1\n        }\n        if(flag && j == K_arr_len) true else false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half_floor)\n        var test_tup_str_arr_len_half_ceil_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half_floor, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_floor_arr_str = test_tup_str_arr_len_half_floor_arr.mkString\n        var test_tup_str_arr_len_half_ceil_arr_str = test_tup_str_arr_len_half_ceil_arr.mkString\n        var test_tup_str_arr_len_half_floor_arr_str_num = test_tup_str_arr_len_half_floor_arr_str.toLong\n        var test_tup_str_arr_len_half_ceil_arr_str_num = test_tup_str_arr_len_half_ceil_arr_str.toLong\n        var test_tup_str_arr_len_half_floor_arr_str_num_pow = pow(test_tup_str_arr_len_half_floor_arr_str",
    "        var test_tup_arr = test_tup.toString.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_len_half = test_tup_arr_len / 2\n        var test_tup_arr_len_half_plus_one = test_tup_arr_len_half + 1\n        var test_tup_arr_len_half_minus_one = test_tup_arr_len_half - 1\n        var test_tup_arr_len_half_plus_one_minus_one = test_tup_arr_len_half_plus_one - 1\n        var test_tup_arr_len_half_minus_one_plus_one = test_tup_arr_len_half_minus_one + 1\n        var test_tup_arr_len_half_plus_one_minus_two = test_tup_arr_len_half_plus_one - 2\n        var test_tup_arr_len_half_minus_one_plus_two = test_tup_arr_len_half_minus_one + 2\n        var test_tup_arr_len_half_plus_one_minus_three = test_tup_arr_len_half_plus_one - 3\n        var test_tup_arr_len_half_minus_one_plus_three = test_tup_arr_len_half_minus_one + 3\n        var test_tup_arr_len_half_plus_one_minus_four = test_tup_arr_len_half_plus_one - 4\n        var test_tup_arr_len_half_minus_one_plus_four = test_tup_arr_len_half_minus_one + 4\n        var test_tup_arr_len_half_plus_one_minus_five = test_tup_arr_len_half_plus_one - 5\n        var test_tup_arr_len_half_minus_one_plus_five = test_tup_arr_len_half_minus_one + 5\n        var test_tup",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        if (test_tup % K == 0) return true\n        else return false",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.toCharArray\n        val test_tup_str_arr_rev = test_tup_str_arr.reverse\n        var test_tup_str_arr_rev_str = \"\"\n        for (i <- 0 until test_tup_str_len) {\n            test_tup_str_arr_rev_str += test_tup_str_arr_rev(i)\n        }\n        val test_tup_str_arr_rev_str_int = test_tup_str_arr_rev_str.toLong\n        if (test_tup_str_arr_rev_str_int == K) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        if (test_tup == K) return true\n        else return false",
    "        var flag = false\n        for (i <- 0 to test_tup.toString.length - 1) {\n            if (test_tup.toString.charAt(i) == K.toString.charAt(0)) {\n                flag = true\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        return sum == K",
    "        var sum = 0L\n        var tup = test_tup\n        while (tup > 0) {\n            sum += tup % 10\n            tup /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        val tup_list = List(test_tup)\n        val tup_list_set = tup_list.toSet\n        val tup_list_set_list = tup_list_set.toList\n        val tup_list_set_list_sorted = tup_list_set_list.sorted\n        val tup_list_set_list_sorted_length = tup_list_set_list_sorted.length\n        val tup_list_set_list_sorted_length_minus_1 = tup_list_set_list_sorted_length - 1\n        val tup_list_set_list_sorted_length_minus_1_index = tup_list_set_list_sorted_length_minus_1 - 1\n        val tup_list_set_list_sorted_length_minus_1_index_value = tup_list_set_list_sorted(tup_list_set_list_sorted_length_minus_1_index)\n        val tup_list_set_list_sorted_length_minus_1_index_value_plus_1 = tup_list_set_list_sorted_length_minus_1_index_value + 1\n        val tup_list_set_list_sorted_length_minus_1_index_value_plus_1_times_2 = tup_list_set_list_sorted_length_minus_1_index_value_plus_1 * 2\n        if (tup_list_set_list_sorted_length_minus_1_index_value_plus_1_times_2 == K) {\n            true\n        } else {\n            false\n        }",
    "        val test_str = test_tup.toString\n        val test_arr = test_str.toCharArray\n        val test_arr_int = test_arr.map(x => x.toInt - 48)\n        val sum = test_arr_int.sum\n        if (sum == K) true else false",
    "        val tup_list = List(test_tup)\n        val tup_set = tup_list.toSet\n        val tup_set_size = tup_set.size\n        if (tup_set_size == 1) {\n            return true\n        }\n        else {\n            val tup_list_sorted = tup_list.sorted\n            val tup_list_sorted_size = tup_list_sorted.size\n            val tup_list_sorted_max = tup_list_sorted(tup_list_sorted_size - 1)\n            val tup_list_sorted_min = tup_list_sorted(0)\n            val tup_list_sorted_max_min = tup_list_sorted_max - tup_list_sorted_min\n            if (tup_list_sorted_max_min == K) {\n                return true\n            }\n            else {\n                return false\n            }\n        }",
    "        if (test_tup % K == 0) {\n            return true\n        }\n        return false",
    "        val test_tup_arr = test_tup.toString.toCharArray\n        val test_tup_arr_len = test_tup_arr.length\n        for (i <- 0 until test_tup_arr_len) {\n            if (test_tup_arr(i) == K.toString.toCharArray()(0)) {\n                return true\n            }\n        }\n        return false",
    "        if (test_tup == K) return true\n        else return false",
    "        var sum : Long = 0\n        for (i <- 0 until test_tup.toString.length) {\n            sum += pow(test_tup.toString.charAt(i).asDigit, 2).toLong\n        }\n        if (sum == K) return true\n        else if (sum < K) return false\n        else return checkK(sum, K)",
    "        var test_tup_str = test_tup.toString\n        var test_tup_arr = test_tup_str.toCharArray\n        var test_tup_arr_len = test_tup_arr.length\n        var test_tup_arr_sum = 0\n        for (i <- 0 until test_tup_arr_len) {\n            test_tup_arr_sum += test_tup_arr(i).toInt - 48\n        }\n        if (test_tup_arr_sum == K) {\n            return true\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_length = test_tup_str_arr.length\n        var test_tup_str_arr_length_half = test_tup_str_arr_length / 2\n        var test_tup_str_arr_length_half_arr = test_tup_str_arr.slice(0, test_tup_str_arr_length_half)\n        var test_tup_str_arr_length_half_arr_rev = test_tup_str_arr_length_half_arr.reverse\n        var test_tup_str_arr_length_half_arr_rev_str = test_tup_str_arr_length_half_arr_rev.mkString\n        var test_tup_str_arr_length_half_arr_rev_str_long = test_tup_str_arr_length_half_arr_rev_str.toLong\n        var test_tup_str_arr_length_half_arr_rev_str_long_sum = test_tup_str_arr_length_half_arr_rev_str_long + test_tup\n        if (test_tup_str_arr_length_half_arr_rev_str_long_sum == K) {\n            return true\n        }\n        return false",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) true else false",
    "        var tup = test_tup\n        while (tup > 0) {\n            if (tup % 10 == K) {\n                return true\n            }\n            tup /= 10\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var i = 0\n        var j = 0\n        var k = 0\n        var flag = false\n        while(i < test_tup_str_arr_len) {\n            j = i + 1\n            while(j < test_tup_str_arr_len) {\n                k = j + 1\n                while(k < test_tup_str_arr_len) {\n                    if(test_tup_str_arr(i) != '0' && test_tup_str_arr(j) != '0' && test_tup_str_arr(k) != '0') {\n                        var test_tup_str_arr_i = test_tup_str_arr(i).toString.toInt\n                        var test_tup_str_arr_j = test_tup_str_arr(j).toString.toInt\n                        var test_tup_str_arr_k = test_tup_str_arr(k).toString.toInt\n                        if(test_tup_str_arr_i + test_tup_str_arr_j + test_tup_str_arr_k == K) {\n                            flag = true\n                        }\n                    }\n                    k += 1\n                }\n                j += 1\n            }\n            i += 1\n        }\n        flag",
    "        if(test_tup % K == 0) return true\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_plus_one = test_tup_str_arr_len_half + 1\n        var test_tup_str_arr_len_half_minus_one = test_tup_str_arr_len_half - 1\n        var test_tup_str_arr_len_half_minus_two = test_tup_str_arr_len_half - 2\n        var test_tup_str_arr_len_half_minus_three = test_tup_str_arr_len_half - 3\n        var test_tup_str_arr_len_half_minus_four = test_tup_str_arr_len_half - 4\n        var test_tup_str_arr_len_half_minus_five = test_tup_str_arr_len_half - 5\n        var test_tup_str_arr_len_half_minus_six = test_tup_str_arr_len_half - 6\n        var test_tup_str_arr_len_half_minus_seven = test_tup_str_arr_len_half - 7\n        var test_tup_str_arr_len_half_minus_eight = test_tup_str_arr_len_half - 8\n        var test_tup_str_arr_len_half_minus_nine = test_tup_str_arr_len_half - 9\n        var test_tup_str_arr_len_half_minus_ten = test_tup_str_arr_len_half - 10\n        var test_tup_str_arr_len_half_minus_eleven = test_tup_str",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        var i = 0\n        while (i < test_tup_str_len) {\n            if (test_tup_str(i) == K.toString()(0)) return true\n            i += 1\n        }\n        return false",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_ceil = ceil(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_floor = floor(test_tup_str_arr_len_half).toInt\n        var test_tup_str_arr_len_half_ceil_arr = test_tup_str_arr.slice(0, test_tup_str_arr_len_half_ceil)\n        var test_tup_str_arr_len_half_floor_arr = test_tup_str_arr.slice(test_tup_str_arr_len_half_floor, test_tup_str_arr_len)\n        var test_tup_str_arr_len_half_ceil_arr_str = test_tup_str_arr_len_half_ceil_arr.mkString(\"\")\n        var test_tup_str_arr_len_half_floor_arr_str = test_tup_str_arr_len_half_floor_arr.mkString(\"\")\n        var test_tup_str_arr_len_half_ceil_arr_str_int = test_tup_str_arr_len_half_ceil_arr_str.toInt\n        var test_tup_str_arr_len_half_floor_arr_str_int = test_tup_str_arr_len_half_floor_arr_str.toInt\n        var test_tup_str_arr_len_half_ceil_arr_str_int_sq = test_tup_str_arr_len_half_ceil_arr_str_int * test_tup_str_arr_len_half_",
    "        var sum : Long = 0\n        var temp : Long = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        if (sum == K) return true\n        else return false",
    "        var flag = false\n        var temp = test_tup\n        while(temp > 0) {\n            if(temp % 10 == K) {\n                flag = true\n                temp = 0\n            }\n            else {\n                temp /= 10\n            }\n        }\n        return flag",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return (sum == K)",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp > 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var tup_str = test_tup.toString\n        var tup_arr = tup_str.toCharArray\n        var tup_arr_int = tup_arr.map(_.toString.toInt)\n        var sum = 0\n        for (i <- 0 until tup_arr_int.length) {\n            sum += tup_arr_int(i)\n        }\n        if (sum == K) {\n            return true\n        }\n        else {\n            return false\n        }",
    "        var sum = 0L\n        var temp = test_tup\n        while (temp != 0) {\n            sum += temp % 10\n            temp /= 10\n        }\n        return sum == K",
    "        var test_tup_str = test_tup.toString\n        var test_tup_str_len = test_tup_str.length\n        var test_tup_str_arr = test_tup_str.toCharArray\n        var test_tup_str_arr_len = test_tup_str_arr.length\n        var test_tup_str_arr_len_half = test_tup_str_arr_len / 2\n        var test_tup_str_arr_len_half_int = test_tup_str_arr_len_half.toInt\n        var test_tup_str_arr_len_half_int_minus_1 = test_tup_str_arr_len_half_int - 1\n        var test_tup_str_arr_len_half_int_plus_1 = test_tup_str_arr_len_half_int + 1\n        var test_tup_str_arr_len_half_int_plus_2 = test_tup_str_arr_len_half_int + 2\n        var test_tup_str_arr_len_half_int_plus_3 = test_tup_str_arr_len_half_int + 3\n        var test_tup_str_arr_len_half_int_plus_4 = test_tup_str_arr_len_half_int + 4\n        var test_tup_str_arr_len_half_int_plus_5 = test_tup_str_arr_len_half_int + 5\n        var test_tup_str_arr_len_half_int_plus_6 = test_tup_str_arr_len_half_int + 6\n        var test_tup_str_arr_len_half_int_plus_7 = test_tup_str_arr_len_half_int + 7\n        var test_tup_str_arr_len_half_int_plus_8 = test_tup_str_arr_len_half_int + 8\n        var test_tup_str_arr_len_half_int_plus_9 = test_tup",
    "        val test_tup_str = test_tup.toString\n        val test_tup_str_len = test_tup_str.length\n        val test_tup_str_arr = test_tup_str.toCharArray\n        var sum = 0L\n        for (i <- 0 until test_tup_str_len) {\n            sum += pow(test_tup_str_arr(i).asDigit, test_tup_str_len).toLong\n        }\n        if (sum == K) true else false"
  ]
}