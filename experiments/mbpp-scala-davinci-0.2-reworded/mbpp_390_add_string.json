{
  "name": "mbpp_390_add_string",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to apply a given format string to all of the elements in a list.\n    def addString(list_ : Any, string : String) : List[String] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(addString((Any(1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong)), (\"temp{0}\")).equals((List[String](\"temp1\", \"temp2\", \"temp3\", \"temp4\"))));\n    assert(addString((Any(\"a\", \"b\", \"c\", \"d\")), (\"python{0}\")).equals((List[String](\"pythona\", \"pythonb\", \"pythonc\", \"pythond\"))));\n    assert(addString((Any(5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong)), (\"string{0}\")).equals((List[String](\"string5\", \"string6\", \"string7\", \"string8\"))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var list = list_.asInstanceOf[List[Any]]\n        var newList = List[String]()\n        for (i <- 0 until list.length) {\n            newList = newList :+ (string.format(list(i)))\n        }\n        newList",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ (string.format(list(i)))\n        }\n        return result",
    "        val list = list_.asInstanceOf[List[Any]]\n        list.map(x => string.format(x))",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ (string.format(list(i)))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ (string.format(list(i)))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ string.format(list(i))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var ret = List[String]()\n        for (i <- 0 until list.length) {\n            ret = ret :+ (string.format(list(i)))\n        }\n        return ret",
    "        var list = list_.asInstanceOf[List[Any]]\n        var newList = List[String]()\n        for (i <- 0 until list.length) {\n            newList = newList :+ string.format(list(i))\n        }\n        return newList",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ string.format(list(i))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- list) {\n            result = result :+ string.format(i)\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- list) {\n            result = result :+ string.format(i)\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ string.format(list(i))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = new ListBuffer[String]\n        for (i <- 0 until list.length) {\n            result += string.format(list(i))\n        }\n        return result.toList",
    "        var list = list_.asInstanceOf[List[Any]]\n        var newList = List[String]()\n        for (i <- 0 until list.length) {\n            newList = newList :+ string.format(list(i))\n        }\n        newList",
    "        val list = list_.asInstanceOf[List[Any]]\n        list.map(x => string.format(x))",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ string.format(list(i))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = new ListBuffer[String]\n        for (i <- list) {\n            result += string.format(i)\n        }\n        return result.toList",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = List[String]()\n        for (i <- 0 until list.length) {\n            result = result :+ (string.format(list(i)))\n        }\n        return result",
    "        var list = list_.asInstanceOf[List[Any]]\n        var result = new ListBuffer[String]\n        for (i <- list) {\n            result += i.toString + string\n        }\n        return result.toList",
    "        list_.asInstanceOf[List[Any]].map(x => string.format(x))"
  ]
}