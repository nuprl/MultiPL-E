{
  "name": "mbpp_576_is_Sub_Array",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to check whether a list is sublist of another or not.\n    def isSubArray(A : List[Long], B : List[Long]) : Boolean = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(isSubArray((List[Long](1l.toLong, 4l.toLong, 3l.toLong, 5l.toLong)), (List[Long](1l.toLong, 2l.toLong))) == (false));\n    assert(isSubArray((List[Long](1l.toLong, 2l.toLong, 1l.toLong)), (List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (true));\n    assert(isSubArray((List[Long](1l.toLong, 0l.toLong, 2l.toLong, 2l.toLong)), (List[Long](2l.toLong, 2l.toLong, 0l.toLong))) == (false));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        val m = A.length\n        val n = B.length\n        var i = 0\n        var j = 0\n        while (i < n && j < m) {\n            if (B(i) == A(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == m) true else false",
    "        var i = 0;\n        var j = 0;\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1;\n                j += 1;\n            } else {\n                i = i - j + 1;\n                j = 0;\n            }\n        }\n        if (j == B.length) true else false",
    "        var result = false\n        for (i <- 0 until A.length) {\n            if (A(i) == B(0)) {\n                var j = 0\n                while (j < B.length && i + j < A.length && A(i + j) == B(j)) {\n                    j += 1\n                }\n                if (j == B.length) {\n                    result = true\n                    return result\n                }\n            }\n        }\n        result",
    "        if (A.length > B.length) return false\n        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = 0\n                j += 1\n            }\n        }\n        if (i == A.length) return true\n        return false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            var flag = true\n            for (j <- 0 to A.length - 1) {\n                if (A(j) != B(i + j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (A.length > B.length) false\n        else {\n            val C = B.sliding(A.length).toList\n            C.exists(x => x == A)\n        }",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            var flag = true\n            for (j <- 0 to A.length - 1) {\n                if (A(j) != B(i + j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        var i = 0\n        while (i < A.length) {\n            if (A(i) != B(i)) return false\n            i += 1\n        }\n        return true",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            var flag = true\n            for (j <- 0 to A.length - 1) {\n                if (A(j) != B(i + j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        if (A.length > B.length) return false\n        var i = 0\n        var j = 0\n        while (i < B.length && j < A.length) {\n            if (B(i) == A(j)) {\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n            }\n        }\n        if (j == A.length) return true\n        return false",
    "        var i = 0\n        var j = 0\n        var flag = false\n        while(i < A.length && j < B.length) {\n            if(A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i += 1\n                j = 0\n            }\n            if(j == B.length) {\n                flag = true\n                return flag\n            }\n        }\n        return flag",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (B.slice(i, i + A.length) == A) return true\n        }\n        return false",
    "        var i = 0\n        var j = 0\n        while(i < A.length && j < B.length) {\n            if(A(i) == B(j)) {\n                i += 1\n                j += 1\n            }\n            else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if(j == B.length) true else false",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        if (A.length > B.length) false\n        else {\n            val n = A.length\n            val m = B.length\n            for (i <- 0 to m - n) {\n                var j = 0\n                while (j < n && A(j) == B(i + j)) j += 1\n                if (j == n) return true\n            }\n            false\n        }",
    "        var i = 0\n        var j = 0\n        while (i < A.length && j < B.length) {\n            if (A(i) == B(j)) {\n                i += 1\n                j += 1\n            } else {\n                i = i - j + 1\n                j = 0\n            }\n        }\n        if (j == B.length) true else false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            if (A.zip(B.slice(i, i + A.length)).forall(x => x._1 == x._2)) return true\n        }\n        return false",
    "        if (A.length > B.length) return false\n        for (i <- 0 to B.length - A.length) {\n            var flag = true\n            for (j <- 0 until A.length) {\n                if (A(j) != B(i + j)) {\n                    flag = false\n                    break\n                }\n            }\n            if (flag) return true\n        }\n        return false",
    "        val n = A.length\n        val m = B.length\n        if (n > m) return false\n        for (i <- 0 to m - n) {\n            var j = 0\n            while (j < n && A(j) == B(i + j)) j += 1\n            if (j == n) return true\n        }\n        return false"
  ]
}