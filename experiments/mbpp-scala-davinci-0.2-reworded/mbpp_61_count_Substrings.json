{
  "name": "mbpp_61_count_Substrings",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count the number of substrings with the sum of digits equal to their length.\n    def countSubstrings(s : String) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(countSubstrings((\"112112\")) == (6l));\n    assert(countSubstrings((\"111\")) == (6l));\n    assert(countSubstrings((\"1101112\")) == (12l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val substr = s.substring(i, j)\n                if (substr.length == substr.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var ans = 0L\n        for (i <- 0 until n) {\n            var sum = 0\n            var len = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                len += 1\n                if (sum == len) ans += 1\n            }\n        }\n        ans",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i) - '0'\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = dp(i)(i) + dp(i + 1)(i + 1)\n        }\n        for (i <- 0 until n - 2) {\n            for (j <- i + 2 to n - 1) {\n                dp(i)(j) = dp(i)(j - 1) + dp(j)(j)\n            }\n        }\n        var result = 0\n        for (i <- 0 until n) {\n            for (j <- i to n - 1) {\n                if (dp(i)(j) == j - i + 1) result += 1\n            }\n        }\n        result",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(i) = 1\n        for (i <- 0 to n - 1) dp(i)(i + 1) = if (s(i) == s(i + 1)) 2 else 1\n        for (k <- 2 to n) {\n            for (i <- 0 to n - k) {\n                val j = i + k\n                if (s(i) == s(j)) dp(i)(j) = dp(i + 1)(j - 1) + 1\n                else dp(i)(j) = dp(i + 1)(j) + dp(i)(j - 1) - dp(i + 1)(j - 1)\n            }\n        }\n        var result = 0L\n        for (i <- 0 to n) {\n            for (j <- i to n) {\n                if (s.substring(i, j + 1).map(x => x - '0').sum == j - i + 1) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                var sum = 0\n                for (k <- i until j) {\n                    sum += s(k) - '0'\n                }\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sub = s.substring(i, j + 1)\n                if (sub.length == sub.map(_.asDigit).sum) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(x => x.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(_.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sub = s.substring(i, j + 1)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i - 1 to 0 by -1) {\n                sum += s(j) - '0'\n                if (sum == i - j) dp(i) += dp(j)\n            }\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.toString.toInt).sum == s.substring(i, j).length) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) * 10 % 1000000007\n            dp(i) = (dp(i) + dp(i - 1)) % 1000000007\n        }\n        var sum = 0\n        var result = 0L\n        for (i <- 0 until n) {\n            sum += s(i) - '0'\n            if (sum == i + 1) result += dp(n - i - 1)\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sub = s.substring(i, j + 1)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.toInt - '0'.toInt).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k).toInt - '0'.toInt\n                }\n                if (sum == j - i + 1) {\n                    count += 1\n                }\n            }\n        }\n        return count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) * 10 % 1000000007\n        }\n        var res = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) res += 1\n            }\n        }\n        res",
    "        // Fill in the code here\n        0",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                var sum = 0\n                for (k <- i to j) {\n                    sum += s(k) - '0'\n                }\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.toString.toInt).sum == (j - i + 1)) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            var sum = 0\n            for (j <- i to n - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var result = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) result += 1\n            }\n        }\n        result",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0L\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            var sum = 0\n            for (j <- i to n - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "      // Fill in the code here\n      0",
    "        var count = 0L\n        for (i <- 0 to s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        def countSubstrings(s : String, i : Int, j : Int, acc : Long) : Long = {\n            if (j == s.length) acc\n            else if (i == j) countSubstrings(s, i, j + 1, acc)\n            else {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) countSubstrings(s, i, j + 1, acc + 1)\n                else countSubstrings(s, i, j + 1, acc)\n            }\n        }\n        countSubstrings(s, 0, 1, 0)",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var result = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == s.substring(i, j).length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val sum = s.substring(i - 1, j).map(_.asDigit).sum\n                if (sum == j - i + 1) dp(i)(j) = 1\n                dp(i)(j) += dp(i)(j - 1)\n            }\n        }\n        dp(1)(n)",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i) - '0'\n        }\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) + s(j) - '0'\n            }\n        }\n        var result = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 1 to n) {\n            dp(i)(i) = s(i - 1).toString.toInt\n        }\n        for (i <- 1 to n) {\n            for (j <- i + 1 to n) {\n                dp(i)(j) = dp(i)(j - 1) + s(j - 1).toString.toInt\n            }\n        }\n        var count = 0L\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                if (dp(i)(j) == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i to 1 by -1) {\n                sum += s(j - 1) - '0'\n                if (sum == i - j + 1) dp(i) += 1\n            }\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.map(x => x.toInt - '0'.toInt).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i to s.length - 1) {\n                val sum = s.substring(i, j + 1).map(_.toString.toInt).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1, 10)(0L)\n        for (i <- 0 until n) {\n            val c = s(i) - '0'\n            for (j <- 0 until 10) dp(i + 1)(j) = dp(i)(j)\n            dp(i + 1)(c) += 1\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            val c = s(i) - '0'\n            for (j <- 0 until 10) {\n                val k = (i + 1) - (j + c)\n                if (k >= 0) result += dp(k)(j)\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            var sum = 0\n            for (j <- i until s.length) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val substr = s.substring(i, j)\n                if (substr.map(_.asDigit).sum == substr.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(_.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                var sum = 0\n                for (k <- i until j) {\n                    sum += s(k).asDigit\n                }\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            val c = s(i - 1) - '0'\n            dp(i) = dp(i - 1) * 10 + (1L << i) - (1L << (i - c))\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(x => x.toString.toInt).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == (j - i)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0)\n        for (i <- 1 to n; j <- i to n) {\n            dp(i)(j) = dp(i)(j - 1) + s(j - 1) - '0'\n        }\n        var res = 0\n        for (i <- 1 to n; j <- i to n) {\n            if (dp(i)(j) == j - i + 1) res += 1\n        }\n        res",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(c => c.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(_.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0L)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            val c = s(i - 1) - '0'\n            for (j <- i - 1 to 0 by -1) {\n                dp(j + 1) += dp(j)\n                if (c < j + 1) dp(j) = 0\n            }\n        }\n        dp.sum",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            val c = s(i - 1) - '0'\n            for (j <- i - 1 to 0 by -1) {\n                val sum = dp(j) + c\n                if (sum <= i) dp(sum) += 1\n            }\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == (j - i)) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to i) {\n                val sum = s.substring(i - j, i).map(_.asDigit).sum\n                dp(i)(j) = dp(i - 1)(j) + (if (sum == j) 1 else 0)\n            }\n        }\n        dp(n).sum",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == (j + 1 - i)) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var cnt = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) cnt += 1\n            }\n        }\n        cnt",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0L)\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val sum = s.substring(i - 1, j).map(_.asDigit).sum\n                dp(i)(j) = if (sum == j - i + 1) 1 else 0\n            }\n        }\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                dp(i)(j) += dp(i)(j - 1)\n            }\n        }\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                dp(i)(j) += dp(i - 1)(j)\n            }\n        }\n        dp(n)(n)",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == (j - i + 1)) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sub = s.substring(i, j + 1)\n                if (sub.map(x => x.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(x => x.toString.toInt).sum == s.substring(i, j + 1).length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to i) {\n                val sum = s.substring(i - j, i).map(_.asDigit).sum\n                if (sum == j) dp(i)(j) = dp(i - j)(0) + dp(i - j)(j)\n                else dp(i)(j) = dp(i - j)(j)\n            }\n            dp(i)(0) = dp(i)(i)\n        }\n        dp(n)(0)",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i - 1)(j)\n                if (j >= i && s(i - 1) != '0') dp(i)(j) += dp(i - 1)(j - i)\n            }\n        }\n        dp(n)(n)",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        for (i <- 1 to n) {\n            dp(i) = dp(i - 1) + s(i - 1) - '0'\n        }\n        var result = 0\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                if (dp(j) - dp(i - 1) == j - i + 1) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sub = s.substring(i, j + 1)\n                val sum = sub.map(_.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(x => x.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            }\n        }\n        var result = 0L\n        for (i <- 0 to n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) result += dp(n - j - 1)(sum)\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == s.substring(i, j).length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i).toInt - '0'\n        }\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) = dp(i)(j - 1) + s(j).toInt - '0'\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) result += 1\n            }\n        }\n        result",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val sum = s.substring(i - 1, j).map(_.asDigit).sum\n                if (sum == j - i + 1) dp(i)(j) = 1\n                dp(i)(j) += dp(i)(j - 1)\n            }\n        }\n        dp(1).sum",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to i) {\n                dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            }\n        }\n        var ans = 0L\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i to n) {\n                sum += s(j - 1) - '0'\n                if (sum == i) ans += dp(n - i)(i)\n            }\n        }\n        ans",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.toInt - '0'.toInt).sum) count += 1\n            }\n        }\n        return count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        for (i <- 0 until n) {\n            val c = s(i) - '0'\n            dp(i + 1) = dp(i) + c\n        }\n        var ans = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (dp(j) - dp(i) == j - i) ans += 1\n            }\n        }\n        ans",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i) - '0'\n        }\n        for (i <- 0 until n - 1) {\n            dp(i)(i + 1) = dp(i)(i) + dp(i + 1)(i + 1)\n        }\n        for (len <- 3 to n) {\n            for (i <- 0 to n - len) {\n                dp(i)(i + len - 1) = dp(i)(i + len - 2) + dp(i + len - 1)(i + len - 1)\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sum = s.substring(i, j).map(x => x.toString.toInt).sum\n                if (sum == j - i) ans += dp(n - j)(sum)\n            }\n        }\n        ans",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) {\n                    count += 1\n                }\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 to n - 1) {\n            var sum = 0\n            for (j <- i to n - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(i)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 1 to n) {\n                dp(i)(j) = dp(i - 1)(j) + dp(i - 1)(j - 1)\n            }\n        }\n        var ans = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sum = s.substring(i, j).map(x => x - '0').sum\n                if (sum == j - i) ans += dp(n - j)(sum)\n            }\n        }\n        ans",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0)\n        for (i <- 0 until n) {\n            dp(i)(i) = s(i) - '0'\n        }\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l - 1\n                dp(i)(j) = dp(i)(j - 1) + dp(j)(j)\n            }\n        }\n        var ans = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                if (dp(i)(j) == j - i + 1) ans += 1\n            }\n        }\n        ans",
    "        val n = s.length\n        var result = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sum = s.substring(i, j).map(x => x.asDigit).sum\n                if (sum == j - i) result += 1\n            }\n        }\n        result",
    "        var count : Long = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, 10)\n        for (i <- 0 until n) {\n            val c = s(i) - '0'\n            for (j <- 0 until 10) {\n                dp(i + 1)(j) = dp(i)(j)\n            }\n            dp(i + 1)(c) += 1\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n + 1) {\n                val sum = (0 until 10).map(k => dp(j)(k) - dp(i)(k)).sum\n                if (sum == j - i) result += 1\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.toString.toInt).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            var len = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                len += 1\n                if (sum == len) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val a = s.toCharArray\n        val dp = Array.ofDim[Long](n + 1, 10)\n        for (i <- 0 until 10) dp(0)(i) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 until 10) {\n                dp(i)(j) = dp(i - 1)(j)\n                if (a(i - 1) - '0' == j) dp(i)(j) += 1\n            }\n        }\n        var ans = 0L\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- 0 until 10) {\n                if (dp(i)(j) > 0) {\n                    sum += j\n                    if (sum == i) ans += dp(i)(j)\n                }\n            }\n        }\n        ans",
    "        var count = 0L\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val a = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) a(i)(i) = 1\n        for (i <- 0 to n - 1) a(i)(i + 1) = 1\n        for (l <- 2 to n) {\n            for (i <- 0 to n - l) {\n                val j = i + l\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                a(i)(j) = a(i)(j - 1) + a(i + 1)(j) - a(i + 1)(j - 1) + (if (sum == l) 1 else 0)\n            }\n        }\n        a(0)(n)",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        var sum = 0\n        for (i <- 0 until n) {\n            sum += s(i) - '0'\n            dp(i + 1) = dp(i) + sum\n        }\n        var ans = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                if (dp(j) - dp(i) == j - i) ans += 1\n            }\n        }\n        ans",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i + 1 to n) {\n                val sub = s.substring(i, j)\n                val sum = sub.map(_.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var sum = 0\n        for (i <- 0 until s.length) {\n            var temp = 0\n            for (j <- i until s.length) {\n                temp += s(j).toInt - '0'.toInt\n                if (temp == j - i + 1) sum += 1\n            }\n        }\n        sum",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        def count(n : Int) : Long = {\n            var count = 0\n            for (i <- 0 to s.length - n) {\n                var sum = 0\n                for (j <- i to i + n - 1) {\n                    sum += s(j).toInt - '0'.toInt\n                }\n                if (sum == n) count += 1\n            }\n            count\n        }\n        var sum = 0L\n        for (i <- 1 to s.length) {\n            sum += count(i)\n        }\n        sum",
    "        val n = s.length\n        val dp = Array.ofDim[Long](n + 1, n + 1)\n        for (i <- 0 to n) dp(0)(i) = 1\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                dp(i)(j) = dp(i)(j - 1) + dp(i - 1)(j - 1)\n            }\n        }\n        var result = 0L\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) result += dp(sum)(n - j - 1)\n            }\n        }\n        result",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- i - 1 to 0 by -1) {\n                sum += s(j).asDigit\n                if (sum == i - j) dp(i) += dp(j)\n            }\n        }\n        dp(n)",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            var sum = 0\n            for (j <- i to s.length - 1) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).toInt - '0'.toInt\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val sum = s.map(c => c.toInt - '0'.toInt).sum\n        val dp = Array.fill(n + 1, sum + 1)(0L)\n        dp(0)(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 to sum) {\n                dp(i)(j) = dp(i - 1)(j)\n                if (j >= s(i - 1).toInt - '0'.toInt) dp(i)(j) += dp(i - 1)(j - s(i - 1).toInt + '0'.toInt)\n            }\n        }\n        dp(n)(sum)",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sub = s.substring(i, j + 1)\n                val sum = sub.map(_.asDigit).sum\n                if (sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1)(0)\n        dp(0) = 1\n        for (i <- 1 to n) {\n            for (j <- 0 until i) {\n                val sum = s.substring(j, i).map(_.asDigit).sum\n                if (sum == i - j) dp(i) += 1\n            }\n        }\n        dp(n)",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == s.substring(i, j).length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sum = s.substring(i, j).map(_.asDigit).sum\n                if (sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.toCharArray.map(x => x.toString.toInt).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var ans = 0L\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) ans += 1\n            }\n        }\n        ans",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                if (s.substring(i, j + 1).map(_.asDigit).sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.length == sub.map(_.asDigit).sum) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j) - '0'\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1, 10)(0L)\n        for (i <- 1 to n) {\n            val c = s(i - 1) - '0'\n            for (j <- 0 to 9) {\n                dp(i)(j) = dp(i - 1)(j)\n            }\n            dp(i)(c) += 1\n        }\n        var res = 0L\n        for (i <- 1 to n) {\n            var sum = 0\n            for (j <- 0 to 9) {\n                sum += j * dp(i)(j)\n            }\n            if (sum == i) res += 1\n        }\n        res",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count",
    "        // Fill in the code here\n        0",
    "        var count = 0\n        for (i <- 0 to s.length - 1) {\n            for (j <- i + 1 to s.length) {\n                if (s.substring(i, j).map(_.asDigit).sum == j - i) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i + 1 to s.length) {\n                val sub = s.substring(i, j)\n                if (sub.map(_.asDigit).sum == sub.length) count += 1\n            }\n        }\n        count",
    "        var count = 0\n        for (i <- 0 until s.length) {\n            for (j <- i until s.length) {\n                val sum = s.substring(i, j + 1).map(_.asDigit).sum\n                if (sum == s.substring(i, j + 1).length) count += 1\n            }\n        }\n        count",
    "        val n = s.length\n        val dp = Array.fill(n + 1, n + 1)(0)\n        for (i <- 1 to n) {\n            for (j <- i to n) {\n                val sum = s.substring(i - 1, j).map(_.asDigit).sum\n                if (sum == j - i + 1) dp(i)(j) = 1\n                dp(i)(j) += dp(i)(j - 1)\n            }\n        }\n        var ans = 0L\n        for (i <- 1 to n) ans += dp(i)(n)\n        ans",
    "        val n = s.length\n        var count = 0\n        for (i <- 0 until n) {\n            var sum = 0\n            for (j <- i until n) {\n                sum += s(j).asDigit\n                if (sum == j - i + 1) count += 1\n            }\n        }\n        count"
  ]
}