{
  "name": "mbpp_610_remove_kth_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list and returns a list with the same elements, but the k'th element removed.\n    def removeKthElement(list1 : List[Long], L : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeKthElement((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))));\n    assert(removeKthElement((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong)), (4l)).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))));\n    assert(removeKthElement((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong)), (5l)).equals((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (L == 0) list1.tail\n        else list1.head :: removeKthElement(list1.tail, L - 1)",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 : List[Long] = List()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var i = 0\n        while(i < L) {\n            list2 = list2.tail\n            i += 1\n        }\n        list2.tail",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L - 1) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list1(i) :: list2\n        }\n        return list2.reverse",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        if (L == 0) {\n            list1.tail\n        } else {\n            list1.head :: removeKthElement(list1.tail, L - 1)\n        }",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(_._2 != L).map(_._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        if (L == 0)\n            list1.tail\n        else if (L == list1.length - 1)\n            list1.init\n        else\n            list1.take(L.toInt) ++ list1.drop(L.toInt + 1)",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var i = 0\n        while (i < L) {\n            list2 = list2.tail\n            i += 1\n        }\n        list2.tail",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = list1\n        if (list1.length == L) {\n            list2 = list1.dropRight(1)\n        }\n        else if (list1.length > L) {\n            list2 = list1.take(L.toInt - 1) ::: list1.drop(L.toInt)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        list1.zipWithIndex.filter(x => (x._2 + 1) % L != 0).map(x => x._1)",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        var i : Long = 0\n        for (i <- 0 to L - 1) {\n            if (i != L - 1) {\n                list2 = list2 :+ list1(i.toInt)\n            }\n        }\n        for (i <- L to list1.length - 1) {\n            list2 = list2 :+ list1(i.toInt)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        if (L == 0) list1\n        else removeKthElement(list1.tail, L - 1)",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        list1.zipWithIndex.filter(_._2 != L).map(_._1)",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(_._2 != L).map(_._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = list1\n        var i = 0\n        while(i < L) {\n            list2 = list2.tail\n            i += 1\n        }\n        list2.tail",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        list2 = list2.take(L.toInt) ::: list2.drop(L.toInt + 1)\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var list3 = list2.drop(L.toInt)\n        var list4 = list2.take(L.toInt)\n        list4 ::: list3",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        return list2",
    "        if (L == 0) list1.tail\n        else list1.head :: removeKthElement(list1.tail, L - 1)",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        return list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = new ListBuffer[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 += list1(i)\n            }\n        }\n        return list2.toList",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = list1.toBuffer\n        var list3 = list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var list3 = List[Long]()\n        var i = 0\n        while (i < L) {\n            list3 = list3 :+ list2.head\n            list2 = list2.tail\n            i += 1\n        }\n        list2 = list2.tail\n        list3 = list3 ::: list2\n        return list3",
    "        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex\n        val list3 = list2.filter(x => x._2 != L)\n        val list4 = list3.map(x => x._1)\n        return list4",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        if (list1.length == 0) {\n            list1\n        } else {\n            list1.take(L.toInt - 1) ::: list1.drop(L.toInt)\n        }",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        if (list1.length == L) {\n            list1.dropRight(1)\n        } else {\n            list1.dropRight(list1.length - L.toInt + 1)\n        }",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var list3 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list3 = list3 :+ list1(i)\n            }\n        }\n        return list3",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        list2 = list2.drop(L.toInt)\n        list2 = list2.dropRight(list2.length - L.toInt)\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(_._2 != L).map(_._1)\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 : List[Long] = List()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        if (list1.length == 0) return list1\n        if (list1.length == 1) return List()\n        if (list1.length == 2) return List(list1(1))\n        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = list1\n        list2 = list2.filter(x => x != L)\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = list1\n        list2 = list2.take(L.toInt) ++ list2.drop(L.toInt + 1)\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = list1\n        list2 = list2.take(L.toInt-1) ::: list2.drop(L.toInt)\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = list1\n        var i = 0\n        var j = 0\n        var list3 = List[Long]()\n        var list4 = List[Long]()\n        var list5 = List[Long]()\n        var list6 = List[Long]()\n        var list7 = List[Long]()\n        var list8 = List[Long]()\n        var list9 = List[Long]()\n        var list10 = List[Long]()\n        var list11 = List[Long]()\n        var list12 = List[Long]()\n        var list13 = List[Long]()\n        var list14 = List[Long]()\n        var list15 = List[Long]()\n        var list16 = List[Long]()\n        var list17 = List[Long]()\n        var list18 = List[Long]()\n        var list19 = List[Long]()\n        var list20 = List[Long]()\n        var list21 = List[Long]()\n        var list22 = List[Long]()\n        var list23 = List[Long]()\n        var list24 = List[Long]()\n        var list25 = List[Long]()\n        var list26 = List[Long]()\n        var list27 = List[Long]()\n        var list28 = List[Long]()\n        var list29 = List[Long]()\n        var list30 = List[Long]()\n        var list31 = List[Long]()\n        var list32 = List[Long]()\n        var list33 = List[Long]()\n        var list34 = List[Long]()\n        var list35 = List[Long]()\n        var list36 = List[Long]()\n        var list37 = List[Long]()\n        var list38 = List[Long]()\n        var list39 = List[Long]()\n        var list40 = List[Long]()\n        var list41 = List[Long]()\n        var list42 = List[Long]()\n        var list43 = List[Long]()\n        var list44 = List[Long]()\n        var list45 = List[Long]()\n        var list46 = List[Long]()\n        var list47 = List[",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var i = 0\n        while (i < L) {\n            list2 = list2.tail\n            i += 1\n        }\n        list2.tail",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = list1\n        list2 = list2.drop(L.toInt)\n        list2 = list2.dropRight(list2.length - L.toInt)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        return list2.toList",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        if (L == 0) {\n            list1.tail\n        } else {\n            list1.head :: removeKthElement(list1.tail, L - 1)\n        }",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var i = 0\n        while (i < L) {\n            list2 = list2.tail\n            i += 1\n        }\n        list2.tail",
    "        var list2 : List[Long] = List()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2"
  ]
}