{
  "name": "mbpp_610_remove_kth_element",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function which takes a list and returns a list with the same elements, but the k'th element removed.\n    def removeKthElement(list1 : List[Long], L : Long) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeKthElement((List[Long](1l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong)), (3l)).equals((List[Long](1l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 1l.toLong))));\n    assert(removeKthElement((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong)), (4l)).equals((List[Long](0l.toLong, 0l.toLong, 1l.toLong, 3l.toLong, 4l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 6l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 4l.toLong, 4l.toLong))));\n    assert(removeKthElement((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong)), (5l)).equals((List[Long](10l.toLong, 10l.toLong, 15l.toLong, 19l.toLong, 18l.toLong, 17l.toLong, 26l.toLong, 26l.toLong, 17l.toLong, 18l.toLong, 10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        if (L == 0) list1.tail\n        else list1.head :: removeKthElement(list1.tail, L - 1)",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1.toBuffer\n        list2.remove(L.toInt)\n        list2.toList",
    "        var list2 : List[Long] = List()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = list1\n        var i = 0\n        while(i < L) {\n            list2 = list2.tail\n            i += 1\n        }\n        list2.tail",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        var i = 0\n        for (i <- 0 to list1.length - 1) {\n            if (i != L - 1) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        val list2 = list1.zipWithIndex.filter(x => x._2 != L).map(x => x._1)\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list2 :+ list1(i)\n        }\n        list2",
    "        var list2 = List[Long]()\n        for (i <- 0 until list1.length) {\n            if (i != L) list2 = list1(i) :: list2\n        }\n        return list2.reverse",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for(i <- 0 until list1.length) {\n            if(i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        for (i <- 0 to list1.length - 1) {\n            if (i != L) {\n                list2 = list2 :+ list1(i)\n            }\n        }\n        list2"
  ]
}