{
  "name": "mbpp_80_tetrahedral_number",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the nth tetrahedral number.\n    def tetrahedralNumber(n : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(tetrahedralNumber((5l)) == (35l));\n    assert(tetrahedralNumber((6l)) == (56l));\n    assert(tetrahedralNumber((7l)) == (84l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        // 1 + 2 + 3 + ... + n = n(n + 1)/2\n        // 1 + 2 + 3 + ... + n + (n + 1) = n(n + 1)/2 + (n + 1) = (n + 1)(n + 2)/2\n        (n + 1) * (n + 2) / 2",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        // T(n) = n(n+1)(n+2)/6\n        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        if (n == 1) return 1\n        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        if (n == 1) return 1\n        return n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        if (n == 0) return 0\n        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        return n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        (n * (n + 1) * (n + 2)) / 6",
    "        n * (n + 1) * (n + 2) / 6",
    "        return n * (n + 1) * (n + 2) / 6"
  ]
}