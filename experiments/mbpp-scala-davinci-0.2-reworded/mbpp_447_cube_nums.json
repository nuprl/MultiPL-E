{
  "name": "mbpp_447_cube_nums",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find cubes of individual elements in a list.\n    def cubeNums(nums : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(cubeNums((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))).equals((List[Long](1l.toLong, 8l.toLong, 27l.toLong, 64l.toLong, 125l.toLong, 216l.toLong, 343l.toLong, 512l.toLong, 729l.toLong, 1000l.toLong))));\n    assert(cubeNums((List[Long](10l.toLong, 20l.toLong, 30l.toLong))).equals((List[Long](1000l.toLong, 8000l.toLong, 27000l.toLong))));\n    assert(cubeNums((List[Long](12l.toLong, 15l.toLong))).equals((List[Long](1728l.toLong, 3375l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)",
    "        nums.map(x => x * x * x)"
  ]
}