{
  "name": "mbpp_127_multiply_int",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x >> 1, y)\n            if (x % 2 == 0) half + half\n            else half + half + y\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else if (y % 2 == 0) multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y == 2) return x + x\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (x < 0) {\n            a = -x\n            b = -y\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510254,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y << 1 + y << 2\n        else if (y == 6) x << 1 + x << 2\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y << 1 + y << 3\n        else if (y == 10) x << 1 + x << 3\n        else if (x == 11) y + y + y + y + y + y + y + y + y + y\n        else if (y == 11) x + x + x + x + x + x + x + x + x + x\n        else if (x == 12) y << 2 + y << 2\n        else if (y == 12) x << 2 + x << 2\n        else if (x == 13) y + y + y + y + y + y + y + y + y + y + y + y\n        else\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmphfy7yz8f.scala:35:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33melse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var result = 0L\n        for (i <- 0 until y) {\n            result += x\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpjjyvmlse.scala:7:26 ---------------------\u001b[0m\u001b[0m\n\u001b[31m7 |\u001b[0m        \u001b[33mfor\u001b[0m (i <- \u001b[31m0\u001b[0m until y) {\n\u001b[31m\u001b[31m  |\u001b[0m                          ^\u001b[0m\n\u001b[31m  |\u001b[0m                          Found:    (y : Long)\n\u001b[31m  |\u001b[0m                          Required: Int\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x > y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else x + half + half\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x / 2, y + y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return (y << 1) + y + y\n        if (y == 6) return (x << 1) + x + x\n        if (x == 7) return (y << 1) + y + y + y\n        if (y == 7) return (x << 1) + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y\n        if (y == 10) return x + x + x + x + x\n        if (x == 11) return (y << 1) + y + y + y + y + y\n        if (y == 11) return (x << 1) + x + x + x + x + x\n        if (x == 12) return (y << 2) + y + y\n        if (y == 12) return (x << 2) + x + x\n        if (x == 13) return (y << 2) + y + y + y\n        if (y == 13) return (x << 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510252,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpkqzpi_lr.scala:35:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (y == \u001b[31m13\u001b[0m) \u001b[33mreturn\u001b[0m (x << \u001b[31m2\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val a = abs(x)\n            val b = abs(y)\n            val c = min(a, b)\n            val d = max(a, b)\n            val e = multiplyInt(c, d)\n            if (x * y > 0) e else -e\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multiplyInt(tmpaap2lqc4.scala:14)\n\tat Problem$.multi",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, 2 * y)\n        else return y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == 2) return y << 1\n        if (x == 4) return y << 2\n        if (x == 8) return y << 3\n        if (x == 16) return y << 4\n        if (x == 32) return y << 5\n        if (x == 64) return y << 6\n        if (x == 128) return y << 7\n        if (x == 256) return y << 8\n        if (x == 512) return y << 9\n        if (x == 1024) return y << 10\n        if (x == 2048) return y << 11\n        if (x == 4096) return y << 12\n        if (x == 8192) return y << 13\n        if (x == 16384) return y << 14\n        if (x == 32768) return y << 15\n        if (x == 65536) return y << 16\n        if (x == 131072) return y << 17\n        if (x == 262144) return y << 18\n        if (x == 524288) return y << 19\n        if (x == 1048576) return y << 20\n        if (x == 2097152) return y << 21\n        if (x == 4194304) return y << 22\n        if (x == 8388608) return y << 23\n        if (x == 16777216) return y << 24\n        if (x == 33554432) return y << 25\n        if (x == 67108864) return y << 26\n        if (x == 134217728) return y << 27\n        if (x == 268435456) return y << 28\n        if (x == 536870912\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmpqad_rrji.scala:44:4 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m44 |\u001b[0m    }\n\u001b[31m\u001b[31m   |\u001b[0m    ^\u001b[0m\n\u001b[31m   |\u001b[0m    ')' expected, but '}' found\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var result : Long = 0\n        var i : Long = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        val z = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return z + z\n        return z + z + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x % 2 == 0) return multiplyInt(x >> 1, y << 1)\n        if (y % 2 == 0) return multiplyInt(x << 1, y >> 1)\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:15)\n\tat Problem$.multiplyInt(tmpn9uh4arc.scala:14)\n\tat Problem$.multi",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        val z = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) z + z\n        else z + z + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        val z = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return z << 1\n        else return x + (z << 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x > 0 && y > 0) x + multiplyInt(x, y - 1)\n        else if (x < 0 && y < 0) -(x + multiplyInt(-x, -y - 1))\n        else if (x > 0 && y < 0) -(x + multiplyInt(x, -y - 1))\n        else -(x + multiplyInt(-x, y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x > 0 && y > 0) x + multiplyInt(x, y - 1)\n        else if (x < 0 && y < 0) -(x + multiplyInt(x, -y - 1))\n        else if (x < 0 && y > 0) -(x + multiplyInt(-x, y - 1))\n        else -(x + multiplyInt(x, -y - 1))\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y * 2)\n        return y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122944,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var result = 0L\n        var i = 0\n        var x1 = x\n        var y1 = y\n        if (x < 0) {\n            x1 = -x\n        }\n        if (y < 0) {\n            y1 = -y\n        }\n        while (i < y1) {\n            result += x1\n            i += 1\n        }\n        if (x < 0 && y < 0) {\n            return result\n        }\n        if (x < 0 || y < 0) {\n            return -result\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if (x < 0 && y < 0 || x > 0 && y > 0) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        val result = multiplyInt(x1, y1, 0)\n        if (sign == 1) result else -result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- Error: /tmp/tmpa9d4ko1r.scala:10:41 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = multiplyInt(x1, y1, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                         ^\u001b[0m\n\u001b[31m   |\u001b[0mtoo many arguments for \u001b[33mmethod\u001b[0m \u001b[35mmultiplyInt\u001b[0m in \u001b[33mobject\u001b[0m \u001b[35mProblem\u001b[0m: (x: Long, y: Long): Long\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val absX = abs(x)\n        val absY = abs(y)\n        val absResult = multiplyInt(absX, absY)\n        if (x < 0 && y < 0) absResult\n        else if (x < 0 || y < 0) -absResult\n        else absResult\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.m",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == -2) y << 1\n        else if (y == -2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == -3) -(y + y + y)\n        else if (y == -3) -(x + x + x)\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == -4) y << 2\n        else if (y == -4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == -5) -(y + y + y + y + y)\n        else if (y == -5) -(x + x + x + x + x)\n        else if (x == 6) y + y + y + y + y + y\n        else if (y == 6) x + x + x + x + x + x\n        else if (x == -6) -(y + y + y + y + y + y)\n        else if (y == -6) -(x + x + x + x + x + x)\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == -7) -(y + y + y + y + y + y + y)\n        else if (y == -7) -(x + x + x + x + x + x + x)\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122943,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpgq6m60hg.scala:37:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        \u001b[33melse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var (a, b) = (x, y)\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 0 until a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var result = 0L\n        for (i <- 1 to y.toInt) {\n            result += x\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122946,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y == 2) return x + x\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x - 1, y + y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7hokt0rh.scala:17)\n\tat Problem.main(tmp7hokt0rh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, y1) = if (x > y) (x, y) else (y, x)\n            val (x2, y2) = (x1 / 2, y1 / 2)\n            val (x3, y3) = (x1 - x2, y1 - y2)\n            (multiplyInt(x2, y2) << 1) + (multiplyInt(x3, y3) << 1) + (if (x2 == x3 && y2 == y3) 0 else multiplyInt(x2 + x3, y2 + y3))\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:11)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\tat Problem$.multiplyInt(tmpl4rcxy34.scala:14)\n\ta",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x > 0 && y > 0) || (x < 0 && y < 0)) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        var result = 0L\n        for (i <- 0 until y1.toInt) {\n            result += x1\n        }\n        sign * result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        var a = x\n        var b = y\n        var result = 0\n        while (a != 0) {\n            if ((a & 1) != 0) result += b\n            a >>= 1\n            b <<= 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpq7ouyk6q.scala:11:37 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m            \u001b[33mif\u001b[0m ((a & \u001b[31m1\u001b[0m) != \u001b[31m0\u001b[0m) result += b\n\u001b[31m\u001b[31m   |\u001b[0m                              ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                  value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) multiplyInt(-x, y)\n        else if (y < 0) multiplyInt(x, -y)\n        else {\n            val (x1, x2) = if (x % 2 == 0) (x / 2, x / 2) else (x / 2, x / 2 + 1)\n            val (y1, y2) = if (y % 2 == 0) (y / 2, y / 2) else (y / 2, y / 2 + 1)\n            multiplyInt(x1, y1) + multiplyInt(x2, y2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp8hl5ag0a.scala:19)\n\tat Problem.main(tmp8hl5ag0a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x - 1, y + y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp7hokt0rh.scala:17)\n\tat Problem.main(tmp7hokt0rh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 1\n        while (i <= y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        var result = 0L\n        var i = 0\n        while (a != 0) {\n            if ((a & 1) == 1) {\n                result += (b << i)\n            }\n            a = a >> 1\n            i += 1\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        var result = 0L\n        var sign = 1\n        if (a < 0) {\n            sign = -sign\n            a = -a\n        }\n        if (b < 0) {\n            sign = -sign\n            b = -b\n        }\n        while (a > 0) {\n            if ((a & 1) == 1) result += b\n            a = a >> 1\n            b = b << 1\n        }\n        if (sign == -1) -result else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var sum = 0\n        while (a != 0) {\n            if ((a & 1) != 0) {\n                sum = add(sum, b)\n            }\n            a = a >> 1\n            b = b << 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122951,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpj95oqr50.scala:11:22 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                sum = add(sum, b)\n\u001b[31m\u001b[31m   |\u001b[0m                      ^^^\u001b[0m\n\u001b[31m   |\u001b[0m                      Not found: add\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, x2) = if (x % 2 == 0) (x / 2, x / 2) else (x / 2, x / 2 + 1)\n            val (y1, y2) = if (y % 2 == 0) (y / 2, y / 2) else (y / 2, y / 2 + 1)\n            multiplyInt(x1, y1) + multiplyInt(x1, y2) + multiplyInt(x2, y1) + multiplyInt(x2, y2)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x > 0 && y > 0) || (x < 0 && y < 0)) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        var result = 0L\n        for (i <- 0 until y1.toInt) result += x1\n        result * sign\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 1\n        while (i <= x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == y) return x * x\n        if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        if (y % 2 == 0) return multiplyInt(x, y / 2) * 2\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half << 1\n            else half << 1 + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpg352h4ks.scala:21)\n\tat Problem.main(tmpg352h4ks.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val absX = abs(x)\n        val absY = abs(y)\n        val result = multiplyInt(absX, absY)\n        if (x < 0 && y < 0) result\n        else if (x < 0) -result\n        else if (y < 0) -result\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.multiplyInt(tmp3pws562l.scala:9)\n\tat Problem$.m",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else {\n            var result = x\n            for (i <- 1 until y) result += x\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpl5rbushj.scala:17:30 --------------------\u001b[0m\u001b[0m\n\u001b[31m17 |\u001b[0m            \u001b[33mfor\u001b[0m (i <- \u001b[31m1\u001b[0m until y) result += x\n\u001b[31m\u001b[31m   |\u001b[0m                              ^\u001b[0m\n\u001b[31m   |\u001b[0m                              Found:    (y : Long)\n\u001b[31m   |\u001b[0m                              Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x % 2 == 0) multiplyInt(x >> 1, y) << 1\n        else if (y % 2 == 0) multiplyInt(x, y >> 1) << 1\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val (q, r) = (a / b, a % b)\n            if (r == 0) q * b\n            else q * b + r\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpz0vgm749.scala:17)\n\tat Problem.main(tmpz0vgm749.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (x1, y1) = if (x < y) (x, y) else (y, x)\n            val (x2, y2) = (x1 / 2, y1 * 2)\n            if (x1 % 2 == 0) multiplyInt(x2, y2)\n            else multiplyInt(x2, y2) + y1\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) multiplyInt(-x, y)\n        else if (y < 0) multiplyInt(x, -y)\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val half = multiplyInt(a, b >> 1)\n            if ((b & 1) == 0) half + half\n            else half + half + a\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y + y\n        else if (y == 2) x + x\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y + y + y + y\n        else if (y == 4) x + x + x + x\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y + y + y + y + y + y\n        else if (y == 6) x + x + x + x + x + x\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y + y + y + y + y + y + y + y\n        else if (y == 8) x + x + x + x + x + x + x + x\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y + y + y + y + y + y + y + y + y + y\n        else if (y == 10) x + x + x + x + x + x + x + x + x + x\n        else if (x == 11) y + y + y + y + y + y + y + y + y + y + y\n        else if (y == 11) x + x + x + x + x + x + x + x + x + x +\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpot29ftbf.scala:31:65 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (y == \u001b[31m11\u001b[0m) x + x + x + x + x + x + x + x + x + x +\n\u001b[31m\u001b[31m   |\u001b[0m                                                                 ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        else if (x == 1) return y\n        else if (y == 1) return x\n        else if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        else if (x < 0) return -multiplyInt(-x, y)\n        else if (y < 0) return -multiplyInt(x, -y)\n        else if (x < y) return multiplyInt(y, x)\n        else if (y == 2) return x + x\n        else if (y % 2 == 0) return multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else return multiplyInt(x, y / 2) + multiplyInt(x, y / 2) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        // Assume x >= y\n        if (x < y) multiplyInt(y, x)\n        else if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122954,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        var result = 0L\n        var i = 0\n        while (i < abs(y)) {\n            result += abs(x)\n            i += 1\n        }\n        if (x < 0 && y < 0) return result\n        if (x < 0 || y < 0) return -result\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122960,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else if (y % 2 == 0) multiplyInt(x, y / 2) + multiplyInt(x, y / 2)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val (q, r) = (a / b, a % b)\n            val result = multiplyInt(b, q)\n            if (r == 0) result\n            else result + b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3p4b83kn.scala:18)\n\tat Problem.main(tmp3p4b83kn.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y + y + y + y + y + y\n        if (y == 10) return x + x + x + x + x + x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y << 2 + y << 2\n        if (y == 12) return x << 2 + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpbvi805pj.scala:33:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33mif\u001b[0m (y == \u001b[31m12\u001b[0m) \u001b[33mreturn\u001b[0m x << \u001b[31m2\u001b[0m + x\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else {\n            var result = 0L\n            for (i <- 1 to x.toInt) result += y\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        if (y % 2 == 0) return multiplyInt(x, y / 2) * 2\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val absX = abs(x)\n        val absY = abs(y)\n        val absResult = multiplyInt(absX, absY)\n        if (x < 0 && y < 0) absResult\n        else if (x < 0 || y < 0) -absResult\n        else absResult\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.multiplyInt(tmp6e9guzti.scala:9)\n\tat Problem$.m",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == 6) return y << 1 + y << 2\n        if (y == 6) return x << 1 + x << 2\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == 8) return y << 3\n        if (y == 8) return x << 3\n        if (x == 9) return y + y + y + y + y + y + y + y + y\n        if (y == 9) return x + x + x + x + x + x + x + x + x\n        if (x == 10) return y + y + y + y + y\n        if (y == 10) return x + x + x + x + x\n        if (x == 11) return y + y + y + y + y + y + y + y + y + y + y\n        if (y == 11) return x + x + x + x + x + x + x + x + x + x + x\n        if (x == 12) return y << 2 + y << 2\n        if (y == 12) return x << 2 + x << 2\n        if (x == 13) return y + y + y + y + y + y + y + y + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp1kp8zhyr.scala:34:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m13\u001b[0m) \u001b[33mreturn\u001b[0m y + y + y + y + y + y + y + y + y\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half << 1\n        else return (half << 1) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x % 2 == 0) return multiplyInt(x >> 1, y) << 1\n        if (y % 2 == 0) return multiplyInt(x, y >> 1) << 1\n        x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, y / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x > 0 && y > 0) x + multiplyInt(x, y - 1)\n        else if (x < 0 && y < 0) x + multiplyInt(x, y + 1)\n        else if (x > 0 && y < 0) -(x + multiplyInt(x, -y - 1))\n        else -(x + multiplyInt(x, -y + 1))\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        var a = x\n        var b = y\n        if (x < 0) {\n            a = -x\n            b = -y\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) {\n            result += b\n        }\n        if (x < 0) -result else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == y) return x * x\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x > 0 && y > 0) x + multiplyInt(x, y - 1)\n        else if (x < 0 && y < 0) -multiplyInt(-x, -y)\n        else if (x > 0 && y < 0) -multiplyInt(x, -y)\n        else -multiplyInt(-x, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half << 1\n        return (half << 1) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return multiplyInt(x / 2, y + y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x < y) multiplyInt(y, x)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) * 2\n        else y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val (c, d) = (a / 2, b * 2)\n            if (a % 2 == 0) multiplyInt(c, d)\n            else multiplyInt(c, d) + b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122967,
      "stdout": "None",
      "stderr": "None",
      "exit_code": -1,
      "status": "Timeout"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        else if (x == 1) return y\n        else if (y == 1) return x\n        else if (x == -1) return -y\n        else if (y == -1) return -x\n        else if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        else if (x < 0) return -multiplyInt(-x, y)\n        else if (y < 0) return -multiplyInt(x, -y)\n        else if (x < y) return multiplyInt(y, x)\n        else if (x % 2 == 0) return multiplyInt(x / 2, y) * 2\n        else return multiplyInt(x / 2, y) * 2 + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x == 2) return y << 1\n        if (y == 2) return x << 1\n        if (x == -2) return -(y << 1)\n        if (y == -2) return -(x << 1)\n        if (x == 3) return y + y + y\n        if (y == 3) return x + x + x\n        if (x == -3) return -(y + y + y)\n        if (y == -3) return -(x + x + x)\n        if (x == 4) return y << 2\n        if (y == 4) return x << 2\n        if (x == -4) return -(y << 2)\n        if (y == -4) return -(x << 2)\n        if (x == 5) return y + y + y + y + y\n        if (y == 5) return x + x + x + x + x\n        if (x == -5) return -(y + y + y + y + y)\n        if (y == -5) return -(x + x + x + x + x)\n        if (x == 6) return y + y + y + y + y + y\n        if (y == 6) return x + x + x + x + x + x\n        if (x == -6) return -(y + y + y + y + y + y)\n        if (y == -6) return -(x + x + x + x + x + x)\n        if (x == 7) return y + y + y + y + y + y + y\n        if (y == 7) return x + x + x + x + x + x + x\n        if (x == -7) return -(y + y + y + y + y + y + y)\n        if (y == -7) return -(x + x + x + x + x + x + x)\n        if (x == 8) return y << 3\n       \n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122961,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpji0478w6.scala:35:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m        \u001b[33mif\u001b[0m (x == \u001b[31m8\u001b[0m) \u001b[33mreturn\u001b[0m y << \u001b[31m3\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    Unit\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m        Maybe you are missing an else part for the conditional?\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 1\n        while (i <= x) {\n            result += y\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122953,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        else return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x > 0 && y > 0) return multiplyInt(x, y - 1) + x\n        if (x < 0 && y < 0) return multiplyInt(x, y + 1) - x\n        if (x < 0 && y > 0) return multiplyInt(x, y - 1) - x\n        if (x > 0 && y < 0) return multiplyInt(x, y + 1) + x\n        throw new Exception(\"Unreachable\")\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122963,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122968,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0) {\n            if (y < 0) multiplyInt(-x, -y)\n            else -multiplyInt(-x, y)\n        }\n        else {\n            if (y < 0) -multiplyInt(x, -y)\n            else {\n                if (x < y) multiplyInt(y, x)\n                else {\n                    var sum = 0L\n                    for (i <- 1 to y.toInt) sum += x\n                    sum\n                }\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else if (x % 2 == 0) multiplyInt(x / 2, y) * 2\n        else y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122969,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var result = 0L\n        for (i <- 1 to y.toInt) result += x\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else {\n            val (a, b) = if (x < 0) (-x, y) else (x, y)\n            val (c, d) = if (b < 0) (-b, a) else (b, a)\n            if (c == 1) -d\n            else if (d == 1) -c\n            else {\n                val (e, f) = if (c < 0) (-c, d) else (c, d)\n                val (g, h) = if (f < 0) (-f, e) else (f, e)\n                if (g == 1) -h\n                else if (h == 1) -g\n                else {\n                    val (i, j) = if (g < 0) (-g, h) else (g, h)\n                    val (k, l) = if (j < 0) (-j, i) else (j, i)\n                    if (k == 1) -l\n                    else if (l == 1) -k\n                    else {\n                        val (m, n) = if (k < 0) (-k, l) else (k, l)\n                        val (o, p) = if (n < 0) (-n, m) else (n, m)\n                        if (o == 1) -p\n                        else if (p == 1) -o\n                        else {\n                            val (q, r) = if (o < 0) (-o, p) else (o, p)\n                            val (s, t) = if (r < 0) (-r, q) else (r, q)\n                            if (s == 1) -t\n                            else if (t == 1) -s\n                            else {\n                                val (u, v) = if (s < 0) (-s, t) else (s, t)\n                                val (w, x) = if (v < 0) (-v, u) else (v, u)\n                                if (w ==\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7g_7k_fe.scala:39:40 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m39 |\u001b[0m                                \u001b[33mif\u001b[0m (w ==\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E040] Syntax Error: /tmp/tmp7g_7k_fe.scala:48:0 ----------------------------\u001b[0m\u001b[0m\n\u001b[31m48 |\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m^\u001b[0m\n\u001b[31m   |\u001b[0m'}' expected, but eof found\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp7g_7k_fe.scala:47:1 ---------------------\u001b[0m\u001b[0m\n\u001b[31m47 |\u001b[0m}\n\u001b[31m\u001b[31m   |\u001b[0m ^\u001b[0m\n\u001b[31m   |\u001b[0m Found:    Unit\n\u001b[31m   |\u001b[0m Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[33m\u001b[33m-- Warning: /tmp/tmp7g_7k_fe.scala:41:4 ----------------------------------------\u001b[0m\u001b[0m\n\u001b[33m41 |\u001b[0m    \u001b[33mdef\u001b[0m \u001b[36mmain\u001b[0m(\u001b[36margs\u001b[0m: \u001b[35mArray\u001b[0m[\u001b[35mString\u001b[0m]) = {\n\u001b[33m\u001b[33m   |\u001b[0m    ^\u001b[0m\n\u001b[33m   |\u001b[0m    Line is indented too far to the left, or a `}` is missing\n1 warning found\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        val min = min(x, y)\n        val max = max(x, y)\n        val half = multiplyInt(min, max / 2)\n        if (max % 2 == 0) return half + half\n        else return half + half + min\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122968,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_rqktd6h.scala:12:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m12 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmin\u001b[0m = min(x, y)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmin\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmp_rqktd6h.scala:13:18 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m13 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mmax\u001b[0m = max(x, y)\n\u001b[31m\u001b[31m   |\u001b[0m                  ^\u001b[0m\n\u001b[31m   |\u001b[0m                  Recursive \u001b[33mvalue\u001b[0m \u001b[35mmax\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (x1, x2) = x / 2 -> x % 2\n            val (y1, y2) = y / 2 -> y % 2\n            val z1 = multiplyInt(x1, y1)\n            val z2 = multiplyInt(x1, y2)\n            val z3 = multiplyInt(x2, y1)\n            val z4 = multiplyInt(x2, y2)\n            z1 * 4 + z2 * 2 + z3 * 2 + z4\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val (a, b) = if (x < 0) (-x, y) else (x, y)\n        val (c, d) = if (y < 0) (-y, x) else (y, x)\n        val result = multiplyInt(a, c)\n        if (b == d) result else -result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat scala.runtime.BoxesRunTime.boxToLong(BoxesRunTime.java:67)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:7)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:9)\n\tat Problem$.multiplyInt(tmpzwe0p1rx.scala:",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y < 0) -x + multiplyInt(x, y + 1)\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == 6) y + y + y + y + y + y\n        else if (y == 6) x + x + x + x + x + x\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == 8) y << 3\n        else if (y == 8) x << 3\n        else if (x == 9) y + y + y + y + y + y + y + y + y\n        else if (y == 9) x + x + x + x + x + x + x + x + x\n        else if (x == 10) y + y + y + y + y + y + y + y + y + y\n        else if (y == 10) x + x + x + x + x + x + x + x + x + x\n        else if (x == 11) y + y + y + y + y + y + y + y + y + y + y\n        else if (y == 11) x + x + x + x + x + x + x + x + x + x + x\n        else if (x == 12) y << 2 + y << 2\n        else if (y == 12) x << 2 + x <<\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122969,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmp7iu7n_bu.scala:33:39 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (y == \u001b[31m12\u001b[0m) x << \u001b[31m2\u001b[0m + x <<\n\u001b[31m\u001b[31m   |\u001b[0m                                       ^\u001b[0m\n\u001b[31m   |\u001b[0m                                       expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var a = x\n        var b = y\n        var result = 0L\n        while (a > 0) {\n            if ((a & 1) == 1) result += b\n            a >>= 1\n            b <<= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x > 0 && y > 0) return multiplyInt(x, y - 1) + x\n        if (x < 0 && y < 0) return multiplyInt(x, y + 1) - x\n        if (x < 0 && y > 0) return multiplyInt(x, y - 1) - x\n        if (x > 0 && y < 0) return multiplyInt(x, y + 1) + x\n        return 0\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else x + multiplyInt(x, y - 1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val (a, b) = if (x > y) (x, y) else (y, x)\n            val half = multiplyInt(a >> 1, b)\n            if (a % 2 == 0) half + half\n            else half + half + b\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122971,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (x < 0) a = -x\n        if (y < 0) b = -y\n        var result = 0L\n        for (i <- 1 to b.toInt) result += a\n        if (x < 0 && y < 0) result\n        else if (x < 0 || y < 0) -result\n        else result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else {\n            var result = 0L\n            for (i <- 1 to x.toInt) result += y\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val sign = if ((x < 0 && y > 0) || (x > 0 && y < 0)) -1 else 1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        var result = 0L\n        for (i <- 0 until y1.toInt) result += x1\n        result * sign\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var a = x\n        var b = y\n        if (x < y) {\n            a = y\n            b = x\n        }\n        var result = 0L\n        for (i <- 1 to b.toInt) result += a\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            if (x < y) multiplyInt(y, x)\n            else {\n                var result = 0L\n                var i = 0\n                while (i < y) {\n                    result += x\n                    i += 1\n                }\n                result\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122972,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x == 2) y << 1\n        else if (y == 2) x << 1\n        else if (x == -2) -(y << 1)\n        else if (y == -2) -(x << 1)\n        else if (x == 3) y + y + y\n        else if (y == 3) x + x + x\n        else if (x == -3) -(y + y + y)\n        else if (y == -3) -(x + x + x)\n        else if (x == 4) y << 2\n        else if (y == 4) x << 2\n        else if (x == -4) -(y << 2)\n        else if (y == -4) -(x << 2)\n        else if (x == 5) y + y + y + y + y\n        else if (y == 5) x + x + x + x + x\n        else if (x == -5) -(y + y + y + y + y)\n        else if (y == -5) -(x + x + x + x + x)\n        else if (x == 6) y + y + y + y + y + y\n        else if (y == 6) x + x + x + x + x + x\n        else if (x == -6) -(y + y + y + y + y + y)\n        else if (y == -6) -(x + x + x + x + x + x)\n        else if (x == 7) y + y + y + y + y + y + y\n        else if (y == 7) x + x + x + x + x + x + x\n        else if (x == -7) -(y + y + y + y + y + y + y)\n        else if (y == -7) -(x + x + x + x + x + x + x)\n        else if (x == 8) y << 3\n        else\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122970,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E018] Syntax Error: /tmp/tmpe9qehh_8.scala:36:12 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        \u001b[33melse\u001b[0m\n\u001b[31m\u001b[31m   |\u001b[0m            ^\u001b[0m\n\u001b[31m   |\u001b[0m            expression expected but \u001b[31m'}'\u001b[0m found\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        var a = x\n        var b = y\n        if (x < 0) {\n            a = -x\n            b = -y\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) {\n            result += b\n        }\n        if (x < 0) result = -result\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122974,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val absX = abs(x)\n        val absY = abs(y)\n        val absResult = multiplyInt(absX, absY)\n        if (x < 0 && y < 0) absResult\n        else if (x < 0) -absResult\n        else if (y < 0) -absResult\n        else absResult\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122976,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.multiplyInt(tmpv9w91jea.scala:9)\n\tat Problem$.m",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) multiplyInt(y, x)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) return 0\n        if (y == 1) return x\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122977,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return multiplyInt(-x, y)\n        if (y < 0) return multiplyInt(x, -y)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half << 1\n        return (half << 1) + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122945,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        var a = x\n        var b = y\n        if (a < 0) {\n            a = -a\n            b = -b\n        }\n        var result = 0L\n        for (i <- 1 to a.toInt) result += b\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x == -1) return -y\n        if (y == -1) return -x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        var result = 0L\n        var i = 0\n        while (i < y) {\n            result += x\n            i += 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else {\n            val smaller = if (x < y) x else y\n            val bigger = if (x < y) y else x\n            val half = multiplyInt(smaller, bigger >> 1)\n            if ((smaller & 1) == 0) half << 1\n            else half << 1 + bigger\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaivob25a.scala:18)\n\tat Problem.main(tmpaivob25a.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        val absX = abs(x)\n        val absY = abs(y)\n        val sign = if (x * y < 0) -1 else 1\n        val result = (1 to absY).map(i => absX).sum\n        sign * result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvfgm9w2f.scala:10:27 --------------------\u001b[0m\u001b[0m\n\u001b[31m10 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = (\u001b[31m1\u001b[0m to absY).map(\u001b[36mi\u001b[0m => absX).sum\n\u001b[31m\u001b[31m   |\u001b[0m                           ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                           Found:    (absY : Long)\n\u001b[31m   |\u001b[0m                           Required: Int\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return 2 * multiplyInt(x / 2, y)\n        return y + 2 * multiplyInt(x / 2, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (y == 1) return x\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val sign = if ((x < 0 && y > 0) || (x > 0 && y < 0)) -1 else 1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        val half = multiplyInt(x1, y1 / 2)\n        if (y1 % 2 == 0) sign * half * 2 else sign * (half * 2 + x1)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x == -1) -y\n        else if (y == -1) -x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) -multiplyInt(-x, y)\n        else if (y < 0) -multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y >> 1)\n            if ((y & 1) == 0) half << 1\n            else x + (half << 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        var a = x\n        var b = y\n        var result = 0\n        while (b != 0) {\n            if ((b & 1) != 0) {\n                result += a\n            }\n            a <<= 1\n            b >>= 1\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E008] Not Found Error: /tmp/tmpsoxpjwxc.scala:11:23 ------------------------\u001b[0m\u001b[0m\n\u001b[31m11 |\u001b[0m                result += a\n\u001b[31m\u001b[31m   |\u001b[0m                ^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                value += is not a member of Int - did you mean Int.!=?\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x > y) return multiplyInt(y, x)\n        if (x == y) return x * x\n        val half = multiplyInt(x, y / 2)\n        if (y % 2 == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y + y)\n        else return y + multiplyInt(x - 1, y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x < y) return multiplyInt(y, x)\n        if (y % 2 == 0) return multiplyInt(x + x, y / 2)\n        else return x + multiplyInt(x + x, (y - 1) / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        if (x % 2 == 0) return multiplyInt(x / 2, y) + multiplyInt(x / 2, y)\n        return multiplyInt(x / 2, y) + multiplyInt(x / 2, y) + y\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        val a = if (x < 0) -x else x\n        val b = if (y < 0) -y else y\n        val c = if (a < b) a else b\n        val d = if (a < b) b else a\n        val e = if (x < 0) -1 else 1\n        val f = if (y < 0) -1 else 1\n        val g = e * f\n        val h = multiplyInt(c, d)\n        if (g == 1) h else -h\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multiplyInt(tmpu58ze88b.scala:16)\n\tat Problem$.multi",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y == 1) x\n        else if (y % 2 == 0) multiplyInt(x + x, y / 2)\n        else x + multiplyInt(x + x, y / 2)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122962,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        val sign = if (x < 0 && y < 0 || x > 0 && y > 0) 1 else -1\n        val x1 = abs(x)\n        val y1 = abs(y)\n        val result = multiplyIntHelper(x1, y1)\n        sign * result\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122978,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E006] Not Found Error: /tmp/tmpoqruissi.scala:9:21 -------------------------\u001b[0m\u001b[0m\n\u001b[31m9 |\u001b[0m        \u001b[33mval\u001b[0m \u001b[36mresult\u001b[0m = multiplyIntHelper(x1, y1)\n\u001b[31m\u001b[31m  |\u001b[0m                     ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m  |\u001b[0m                     Not found: multiplyIntHelper\n\u001b[31m  |\u001b[0m\n\u001b[31m  |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (y == 0) 0\n        else if (y > 0) x + multiplyInt(x, y - 1)\n        else -multiplyInt(x, -y)\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1665510253,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) return 0\n        if (x == 1) return y\n        if (y == 1) return x\n        if (x < 0 && y < 0) return multiplyInt(-x, -y)\n        if (x < 0) return -multiplyInt(-x, y)\n        if (y < 0) return -multiplyInt(x, -y)\n        val half = multiplyInt(x, y >> 1)\n        if ((y & 1) == 0) return half + half\n        else return half + half + x\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122980,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to multiply two integers.\n    def multiplyInt(x : Long, y : Long) : Long = {\n        if (x == 0 || y == 0) 0\n        else if (x == 1) y\n        else if (y == 1) x\n        else if (x < 0 && y < 0) multiplyInt(-x, -y)\n        else if (x < 0) multiplyInt(-x, y)\n        else if (y < 0) multiplyInt(x, -y)\n        else {\n            val half = multiplyInt(x, y / 2)\n            if (y % 2 == 0) half + half\n            else half + half + x\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(multiplyInt((10l), (20l)) == (200l));\n    assert(multiplyInt((5l), (10l)) == (50l));\n    assert(multiplyInt((4l), (8l)) == (32l));\n    }\n\n}\n",
      "timestamp": 1666122979,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}