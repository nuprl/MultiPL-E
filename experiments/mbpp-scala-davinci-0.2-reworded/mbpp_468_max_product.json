{
  "name": "mbpp_468_max_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n    def maxProduct(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong, 150l.toLong, 6l.toLong))) == (3000l));\n    assert(maxProduct((List[Long](4l.toLong, 42l.toLong, 55l.toLong, 68l.toLong, 80l.toLong))) == (50265600l));\n    assert(maxProduct((List[Long](10l.toLong, 22l.toLong, 9l.toLong, 33l.toLong, 21l.toLong, 50l.toLong, 41l.toLong, 60l.toLong))) == (2460l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 1L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                    max = max(max, dp(i))\n                }\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                    max = max max dp(i)\n                }\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) dp(i) = dp(j) * arr(i)\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var product = 1L\n        for (i <- 0 until arr.length) {\n            product *= arr(i)\n            if (product > max) max = product\n            if (product == 0) product = 1\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = arr(i)\n        for (i <- 0 until n; j <- i + 1 until n) dp(i)(j) = dp(i)(j - 1) * arr(j)\n        var max = 0L\n        for (i <- 0 until n; j <- i until n) {\n            val product = dp(i)(j)\n            if (product > max) max = product\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                    max = max max dp(i)\n                }\n            }\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val max = arr.max\n        val maxIndex = arr.indexOf(max)\n        val left = arr.slice(0, maxIndex)\n        val right = arr.slice(maxIndex + 1, arr.length)\n        val leftMax = if (left.length == 0) 1 else left.max\n        val rightMax = if (right.length == 0) 1 else right.max\n        max * max(leftMax, rightMax)",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        var max = dp(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            max = max max arr(i)\n            maxProduct = maxProduct max (max * arr(i))\n        }\n        maxProduct",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            dp(i) = max(dp(i - 1) * arr(i), arr(i))\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 1L\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                    max = max(max, dp(i))\n                }\n            }\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var max = 0L\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct *= arr(i)\n            }\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct *= arr(i)\n            }\n        }\n        maxProduct",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct *= arr(i)\n            }\n        }\n        maxProduct",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) dp(i) = dp(j) * arr(i)\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        for (i <- 1 until n) {\n            var max = 0L\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    max = max max (dp(j) * arr(i))\n                }\n            }\n            dp(i) = max max arr(i)\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val max = new Array[Long](arr.length)\n        val min = new Array[Long](arr.length)\n        max(0) = arr(0)\n        min(0) = arr(0)\n        for (i <- 1 until arr.length) {\n            max(i) = max(i - 1) * arr(i)\n            min(i) = min(i - 1) * arr(i)\n            if (arr(i) > 0) {\n                max(i) = max(i) max (arr(i))\n                min(i) = min(i) min (arr(i))\n            } else {\n                max(i) = max(i) max (min(i - 1) * arr(i))\n                min(i) = min(i) min (max(i - 1) * arr(i))\n            }\n        }\n        max.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 to n - 1) {\n            for (j <- 0 to i - 1) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 1L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) dp(i) = dp(j) * arr(i)\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n, n)(0L)\n        for (i <- 0 until n) {\n            dp(i)(i) = arr(i)\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) * arr(j)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n; j <- i until n) {\n            max = max max dp(i)(j)\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val sorted = arr.sorted\n        val n = sorted.length\n        max(sorted(n - 1) * sorted(n - 2) * sorted(n - 3), sorted(0) * sorted(1) * sorted(n - 1))",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.ofDim[Long](n, n)\n        for (i <- 0 until n) dp(i)(i) = arr(i)\n        for (i <- 0 until n) {\n            for (j <- i + 1 until n) {\n                dp(i)(j) = dp(i)(j - 1) * arr(j)\n            }\n        }\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- i until n) {\n                max = max max dp(i)(j)\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 1L\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        val min = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                    min(i) = min(j) * arr(i)\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.size)(1L)\n        for (i <- 1 until arr.size) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        if (arr.length == 0) return 0\n        var max = arr(0)\n        var min = arr(0)\n        var result = arr(0)\n        for (i <- 1 until arr.length) {\n            val a = max * arr(i)\n            val b = min * arr(i)\n            max = max(a, b, arr(i))\n            min = min(a, b, arr(i))\n            result = max(result, max)\n        }\n        result",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct *= arr(i)\n            }\n        }\n        maxProduct",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        var maxProduct = 0L\n        for (i <- 0 until arr.length) {\n            if (arr(i) > max) {\n                max = arr(i)\n                maxProduct = max\n            } else {\n                maxProduct *= arr(i)\n            }\n        }\n        maxProduct",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        dp(0) = arr(0)\n        var max = dp(0)\n        for (i <- 1 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(0L)\n        var max = 0L\n        for (i <- 0 until n) {\n            dp(i) = arr(i)\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(j) > arr(i)) {\n                    val product = arr(i) * arr(j)\n                    if (product > max) max = product\n                }\n            }\n        }\n        max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n            max = max(max, dp(i))\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        return dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        var max = 0L\n        for (i <- 0 until arr.length) {\n            var product = 1L\n            for (j <- i until arr.length) {\n                product *= arr(j)\n                if (product > max) max = product\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max"
  ]
}