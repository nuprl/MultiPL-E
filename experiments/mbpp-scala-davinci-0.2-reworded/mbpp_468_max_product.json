{
  "name": "mbpp_468_max_product",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that list.\n    def maxProduct(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(maxProduct((List[Long](3l.toLong, 100l.toLong, 4l.toLong, 5l.toLong, 150l.toLong, 6l.toLong))) == (3000l));\n    assert(maxProduct((List[Long](4l.toLong, 42l.toLong, 55l.toLong, 68l.toLong, 80l.toLong))) == (50265600l));\n    assert(maxProduct((List[Long](10l.toLong, 22l.toLong, 9l.toLong, 33l.toLong, 21l.toLong, 50l.toLong, 41l.toLong, 60l.toLong))) == (2460l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        var max = 1L\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                    max = max(max, dp(i))\n                }\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        var max = 0L\n        for (i <- 0 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) {\n                    dp(i) = dp(j) * arr(i)\n                    max = max max dp(i)\n                }\n            }\n        }\n        max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 0 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) dp(i) = max(dp(i), dp(j) * arr(i))\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max",
    "        val n = arr.length\n        val dp = Array.fill(n)(1L)\n        for (i <- 1 until n) {\n            for (j <- 0 until i) {\n                if (arr(i) > arr(j) && dp(i) < dp(j) * arr(i)) dp(i) = dp(j) * arr(i)\n            }\n        }\n        dp.max",
    "        val dp = Array.fill(arr.length)(1L)\n        for (i <- 1 until arr.length) {\n            for (j <- 0 until i) {\n                if (arr(j) < arr(i)) {\n                    dp(i) = max(dp(i), dp(j) * arr(i))\n                }\n            }\n        }\n        dp.max"
  ]
}