{
  "name": "mbpp_724_power_base_sum",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    def powerBaseSum(base : Long, power : Long) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(powerBaseSum((2l), (100l)) == (115l));\n    assert(powerBaseSum((8l), (10l)) == (37l));\n    assert(powerBaseSum((8l), (15l)) == (62l));\n    assert(powerBaseSum((3l), (3l)) == (9l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        while (b > 0) {\n            sum += b % 10\n            b /= 10\n        }\n        var p = power\n        var result = sum\n        while (p > 1) {\n            result *= sum\n            p -= 1\n        }\n        result",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var powerBase = pow(base, power).toLong\n        while (powerBase > 0) {\n            sum += powerBase % 10\n            powerBase /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power)\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var result = base\n        for (i <- 1 to power.toInt) {\n            result *= base\n            sum += result.toString.map(_.asDigit).sum\n        }\n        return sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b = b * base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var current = base\n        for (i <- 1 to power.toInt) {\n            sum += current.toString.map(_.asDigit).sum\n            current *= base\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b = b * base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + (base * power))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        sum",
    "        var sum = 0L\n        var p = base\n        for (i <- 1 to power) {\n            p *= base\n            sum += p.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = base\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        val result = BigInt(base).pow(power)\n        result.toString().map(x => x.asDigit).sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power.toInt)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var result = BigInt(base).pow(power).toString.map(_.asDigit).sum\n        return result",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            sum += b.toString.map(_.asDigit).sum\n            b *= base\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var x = pow(base, power).toLong\n        while (x > 0) {\n            sum += x % 10\n            x /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = BigInt(base).pow(power)\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var result = BigInt(base).pow(power).toString.map(_.asDigit).sum\n        return result",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n = n * base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num = num * base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        def powerBaseSum(base : Long, power : Long, acc : Long) : Long = {\n            if (power == 0) acc\n            else powerBaseSum(base, power - 1, acc + (base * power))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                var newSum = sum\n                var newBase = base\n                for (i <- 1 to power) {\n                    newBase *= base\n                    newSum += newBase % 10\n                }\n                powerBaseSum(base, power - 1, newSum)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp = temp * base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        return sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x = x * base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power)\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num = num * base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var result = 0L\n        for (i <- 1 to power.toInt) {\n            result += BigInt(base).pow(i).toString.map(_.asDigit).sum\n        }\n        result",
    "        def powerBaseSumHelper(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSumHelper(base, power - 1, sum + base)\n        }\n        powerBaseSumHelper(base, power, 0)",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        var sum = 0L\n        var x = pow(base, power).toLong\n        while (x > 0) {\n            sum += x % 10\n            x /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        return sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b = b * base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            sum += b % 10\n            b = b / 10\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + (base % 10))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        var sum = 0L\n        var current = base\n        for (i <- 1 to power) {\n            sum += current.toString.map(_.asDigit).sum\n            current *= base\n        }\n        sum",
    "        def powerBaseSumRec(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                var newSum = sum\n                var newBase = base\n                for (i <- 1 to power) {\n                    newSum += newBase % 10\n                    newBase /= 10\n                }\n                powerBaseSumRec(newBase, power - 1, newSum)\n            }\n        }\n        powerBaseSumRec(base, power, 0)",
    "        var sum = 0L\n        var result = pow(base, power).toLong\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var current = base\n        for (i <- 1 to power) {\n            sum += current.toString.map(_.asDigit).sum\n            current *= base\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                var newSum = 0L\n                var newBase = base\n                while (newBase > 0) {\n                    newSum += newBase % 10\n                    newBase /= 10\n                }\n                powerBaseSum(newSum, power - 1, sum + newSum)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            var m = n\n            while (m > 0) {\n                sum += m % 10\n                m /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n = n * base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + base)\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var x = pow(base, power).toLong\n        while (x > 0) {\n            sum += x % 10\n            x /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power)\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var number = pow(base, power).toLong\n        while (number > 0) {\n            sum += number % 10\n            number /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var p = base\n        for (i <- 1 to power.toInt) {\n            p *= base\n            sum += p.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + (base * power))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            while (n > 0) {\n                sum += n % 10\n                n /= 10\n            }\n            n = sum\n            sum = 0\n        }\n        n",
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power.toInt)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b = b * base\n            var s = b.toString\n            for (j <- 0 until s.length) {\n                sum += s(j).asDigit\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                var sum2 = sum\n                var base2 = base\n                while (base2 > 0) {\n                    sum2 += base2 % 10\n                    base2 /= 10\n                }\n                powerBaseSum(sum2, power - 1, sum2)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var result = BigInt(base).pow(power)\n        var sum = 0L\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power)\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        return sum",
    "        var result = 0L\n        for (i <- 1 to power) result += BigInt(base).pow(i).toString.map(_.asDigit).sum\n        result",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var p = BigInt(base).pow(power)\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                var sum1 = sum\n                var base1 = base\n                while (base1 > 0) {\n                    sum1 += base1 % 10\n                    base1 /= 10\n                }\n                powerBaseSum(base * base, power - 1, sum1)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var result : Long = 0\n        var temp : Long = base\n        for (i <- 1 to power) {\n            temp *= base\n            result += temp.toString.map(_.asDigit).sum\n        }\n        result",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                val newSum = sum + base\n                powerBaseSum(base, power - 1, newSum)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + (base * power))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var p = BigInt(base).pow(power)\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var n = pow(base, power).toLong\n        while (n > 0) {\n            sum += n % 10\n            n /= 10\n        }\n        return sum",
    "        def powerBaseSumHelper(base : Long, power : Long, acc : Long) : Long = {\n            if (power == 0) acc\n            else {\n                val newAcc = acc + base\n                powerBaseSumHelper(base, power - 1, newAcc)\n            }\n        }\n        powerBaseSumHelper(base, power, 0)",
    "        var result = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            result += temp.toString.map(_.asDigit).sum\n        }\n        result",
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power.toInt)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power).toString\n        for (i <- 0 until n.length) {\n            sum += n(i).asDigit\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp = temp * base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var powerBase = pow(base, power).toLong\n        while (powerBase > 0) {\n            sum += powerBase % 10\n            powerBase /= 10\n        }\n        return sum",
    "        def powerBaseSum(base : Long, power : Long, acc : Long) : Long = {\n            if (power == 0) acc\n            else {\n                val newAcc = acc + base\n                powerBaseSum(base, power - 1, newAcc)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp = temp * base\n            while (temp > 0) {\n                sum += temp % 10\n                temp /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var p = base\n        for (i <- 1 to power.toInt) {\n            p *= base\n            sum += p.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = base\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        return sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power).toString\n        for (i <- 0 until n.length) {\n            sum += n(i).asDigit\n        }\n        return sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        for (i <- 0 to power.toString.length - 1) {\n            sum += pow(base, power.toString.charAt(i).toString.toInt).toString.map(_.asDigit).sum\n        }\n        return sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            var temp = num\n            while (temp > 0) {\n                sum += temp % 10\n                temp /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x = x * base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var p = pow(base, power).toLong\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        sum",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power.toInt)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        var p = power\n        while (p != 0) {\n            sum += b % 10\n            b = b * base\n            p -= 1\n        }\n        sum",
    "        var sum = 0L\n        var num = BigInt(base).pow(power)\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            var temp = num\n            while (temp > 0) {\n                sum += temp % 10\n                temp /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var x = base\n        for (i <- 1 to power) {\n            x *= base\n            sum += x.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        val result = BigInt(base).pow(power).toString.map(_.asDigit).sum\n        result",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                val newSum = sum + base\n                powerBaseSum(base, power - 1, newSum)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                val newSum = sum + base\n                powerBaseSum(base, power - 1, newSum)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var num = BigInt(base).pow(power).toString\n        for (i <- 0 until num.length) {\n            sum += num(i).asDigit\n        }\n        sum",
    "        var result = 0L\n        var basePow = BigInt(base).pow(power)\n        while (basePow > 0) {\n            result += basePow % 10\n            basePow /= 10\n        }\n        result",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = base\n        }\n        sum",
    "        var sum = 0L\n        var value = base\n        for (i <- 1 to power.toInt) {\n            value *= base\n            sum += value.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = BigInt(base).pow(power)\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else {\n                var newSum = sum\n                var newBase = base\n                while (newBase > 0) {\n                    newSum += newBase % 10\n                    newBase /= 10\n                }\n                powerBaseSum(newSum, power - 1, sum)\n            }\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp *= base\n            sum += temp.toString.map(_.asDigit).sum\n        }\n        return sum",
    "        var sum = 0L\n        var result = BigInt(base).pow(power.toInt)\n        while (result > 0) {\n            sum += result % 10\n            result /= 10\n        }\n        return sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        return sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + (base * power))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var x = BigInt(base).pow(power)\n        while (x > 0) {\n            sum += x % 10\n            x /= 10\n        }\n        sum",
    "        var sum = 0L\n        var basePow = BigInt(base).pow(power)\n        while (basePow > 0) {\n            sum += basePow % 10\n            basePow /= 10\n        }\n        sum",
    "        var sum = 0L\n        var num = pow(base, power).toLong\n        while (num > 0) {\n            sum += num % 10\n            num /= 10\n        }\n        sum",
    "        def powerBaseSum(base : Long, power : Long, sum : Long) : Long = {\n            if (power == 0) sum\n            else powerBaseSum(base, power - 1, sum + (base * power))\n        }\n        powerBaseSum(base, power, 0)",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var product = 1L\n        for (i <- 0 until power) {\n            product *= base\n            sum += product.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = BigInt(base).pow(power).toString\n        for (i <- 0 until n.length) {\n            sum += n(i).asDigit\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            sum += b.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b = b * base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        return sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var basePow = base\n        for (i <- 1 to power.toInt) {\n            basePow *= base\n            var temp = basePow\n            while (temp > 0) {\n                sum += temp % 10\n                temp /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            sum += n.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var result = 0L\n        var temp = base\n        for (i <- 1 to power) {\n            temp = temp * base\n            result += temp.toString.map(_.asDigit).sum\n        }\n        result",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            b *= base\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n        }\n        sum",
    "        var sum = 0L\n        var p = BigInt(base).pow(power)\n        while (p > 0) {\n            sum += p % 10\n            p /= 10\n        }\n        sum",
    "        var sum = 0L\n        var b = base\n        for (i <- 1 to power) {\n            while (b > 0) {\n                sum += b % 10\n                b /= 10\n            }\n            b = sum\n            sum = 0\n        }\n        b",
    "        var sum = 0L\n        var p = power\n        while (p > 0) {\n            sum += pow(base, p).toLong\n            p -= 1\n        }\n        sum",
    "        var sum = 0L\n        var p = power\n        var b = base\n        while (p > 0) {\n            sum += b % 10\n            b = b / 10\n            p -= 1\n        }\n        sum",
    "        var sum = 0L\n        var num = base\n        for (i <- 1 to power) {\n            num *= base\n            sum += num.toString.map(_.asDigit).sum\n        }\n        sum",
    "        var sum = 0L\n        var n = base\n        for (i <- 1 to power) {\n            n *= base\n            while (n > 0) {\n                sum += n % 10\n                n /= 10\n            }\n            n = base\n        }\n        sum",
    "        var sum = 0L\n        var p = power\n        var b = base\n        while (p > 0) {\n            sum += b % 10\n            b /= 10\n            p -= 1\n        }\n        sum"
  ]
}