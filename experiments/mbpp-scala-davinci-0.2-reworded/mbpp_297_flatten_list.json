{
  "name": "mbpp_297_flatten_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to flatten a given nested list structure.\n    def flattenList(list1 : Any) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(flattenList((Any(0l, 10l, List[Long](20l.toLong, 30l.toLong), 40l, 50l, List[Long](60l.toLong, 70l.toLong, 80l.toLong), List[Long](90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong)))).equals((List[Long](0l.toLong, 10l.toLong, 20l.toLong, 30l.toLong, 40l.toLong, 50l.toLong, 60l.toLong, 70l.toLong, 80l.toLong, 90l.toLong, 100l.toLong, 110l.toLong, 120l.toLong))));\n    assert(flattenList((Any(List[Long](10l.toLong, 20l.toLong), List[Long](40l.toLong), List[Long](30l.toLong, 56l.toLong, 25l.toLong), List[Long](10l.toLong, 20l.toLong), List[Long](33l.toLong), List[Long](40l.toLong)))).equals((List[Long](10l.toLong, 20l.toLong, 40l.toLong, 30l.toLong, 56l.toLong, 25l.toLong, 10l.toLong, 20l.toLong, 33l.toLong, 40l.toLong))));\n    assert(flattenList((Any(List[Long](1l.toLong, 2l.toLong, 3l.toLong), List[Long](4l.toLong, 5l.toLong, 6l.toLong), List[Long](10l.toLong, 11l.toLong, 12l.toLong), List[Long](7l.toLong, 8l.toLong, 9l.toLong)))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 10l.toLong, 11l.toLong, 12l.toLong, 7l.toLong, 8l.toLong, 9l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case y : Long => y :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => x.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }",
    "        list1 match {\n            case list: List[Any] => list.flatMap(flattenList)\n            case element: Long => List(element)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n            case _ => {\n                println(\"error\")\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list = list ::: flattenList(i)\n                }\n            }\n            case i : Int => list = list ::: List(i.toLong)\n            case i : Long => list = list ::: List(i)\n            case i : Double => list = list ::: List(i.toLong)\n            case i : Float => list = list ::: List(i.toLong)\n            case i : Char => list = list ::: List(i.toLong)\n            case i : Byte => list = list ::: List(i.toLong)\n            case i : Short => list = list ::: List(i.toLong)\n            case i : String => list = list ::: List(i.toLong)\n            case _ => list = list ::: List(0)\n        }\n        list",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case Nil => list2\n            case (x : Int) :: xs => list2 = list2 :+ x.toLong\n            case (x : Long) :: xs => list2 = list2 :+ x\n            case (x : List[Any]) :: xs => list2 = list2 ::: flattenList(x)\n            case _ => list2\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (element <- list) {\n                    list2 = list2 ::: flattenList(element)\n                }\n            }\n            case element : Long => {\n                list2 = list2 :+ element\n            }\n        }\n        return list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: tail => flattenList(x) ::: flattenList(tail)\n            case x :: tail => x :: flattenList(tail)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x.asInstanceOf[Long] :: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Int => {\n                list2 = list2 :+ i.toLong\n            }\n            case i : Long => {\n                list2 = list2 :+ i\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        return list2",
    "        list1 match {\n            case a : Long => List(a)\n            case a : List[Any] => a.flatMap(flattenList)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n                case x : Long => x :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case long : Long => {\n                list2 = list2 :+ long\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 ::: List(x)\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case x : Long => x :: flattenList(tail)\n                case x : List[Any] => flattenList(x) ::: flattenList(tail)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => for (e <- list) list2 = list2 ::: flattenList(e)\n            case n : Long => list2 = list2 :+ n\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ++ flattenList(y))\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ::: flattenList(x)\n            case _ =>\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case (x : Long) :: xs => x :: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => throw new IllegalArgumentException\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list = List[Long]()\n        list1 match {\n            case x : Long => list = list :+ x\n            case x : List[Any] => x.foreach(y => list = list ::: flattenList(y))\n            case _ =>\n        }\n        list",
    "        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (elem <- list) {\n                    list2 = list2 ::: flattenList(elem)\n                }\n            }\n            case num : Long => {\n                list2 = list2 :+ num\n            }\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case n : Long => List(n)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 = list2 ::: List(num)\n            }\n        }\n        list2",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case list1 : Long => List(list1)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ++ flattenList(x)\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case (x : List[Any]) => {\n                for (i <- 0 until x.length) {\n                    list2 = list2 ::: flattenList(x(i))\n                }\n            }\n            case (x : Long) => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x:Long) :: xs => x :: flattenList(xs)\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (head : Long) :: tail => head :: flattenList(tail)\n            case (head : List[Any]) :: tail => flattenList(head) ::: flattenList(tail)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => for (elem <- list) list2 = list2 ::: flattenList(elem)\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        var list2 = new ListBuffer[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 ++= flattenList(item)\n                }\n            }\n            case item : Long => list2 += item\n        }\n        list2.toList",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : Long => x :: flattenList(xs)\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case h :: t => h match {\n                case h : Long => h :: flattenList(t)\n                case h : List[Any] => flattenList(h) ::: flattenList(t)\n            }\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case _ => Nil\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = new ListBuffer[Long]\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 ++= flattenList(i)\n                }\n            }\n            case num : Long => {\n                list2 += num\n            }\n        }\n        list2.toList",
    "        var list2 = List[Long]()\n        list1 match {\n            case (x : List[Any]) => x.foreach(x => list2 = list2 ++ flattenList(x))\n            case (x : Long) => list2 = list2 :+ x\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => Nil\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => {\n                list2 = list2 ::: List(l)\n            }\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case long : Long => List(long)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Int => list2 = list2 :+ x.toLong\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ::: flattenList(y))\n            case _ =>\n        }\n        return list2",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: tail => flattenList(x) ::: flattenList(tail)\n            case (x : Long) :: tail => x :: flattenList(tail)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => list2 = list2 :+ l\n        }\n        list2",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case x : List[Any] => flattenList(x) ::: flattenList(xs)\n                case x : Long => x :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case head : List[Any] => flattenList(head) ::: flattenList(tail)\n                case head : Long => head :: flattenList(tail)\n            }\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ++ flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case (x : Long) :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case num : Long => List(num)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList(_))\n            case x : Long => List(x)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => list2 = list2 :+ item\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (e <- l) {\n                    list2 = list2 ::: flattenList(e)\n                }\n            }\n            case i : Int => {\n                list2 = list2 :+ i.toLong\n            }\n            case l : Long => {\n                list2 = list2 :+ l\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x => List(x.asInstanceOf[Long])\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case element : Long => List(element)\n            case _ => List()\n        }",
    "        var list = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list = list ++ flattenList(i)\n                }\n            }\n            case l : Long => {\n                list = list :+ l\n            }\n        }\n        list",
    "        list1 match {\n            case Nil => Nil\n            case head :: tail => head match {\n                case head : Long => head :: flattenList(tail)\n                case head : List[Any] => flattenList(head) ::: flattenList(tail)\n                case _ => flattenList(tail)\n            }\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 ::: List(x)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n                case _ => x.asInstanceOf[Long] :: flattenList(xs)\n            }\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x:List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (x <- list) {\n                    list2 = list2 ::: flattenList(x)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case list1 : List[Any] => list1.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => {\n                var list2 : List[Long] = List()\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n                list2\n            }\n            case n : Long => List(n)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x:Long) :: xs => x :: flattenList(xs)\n            case x :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => {\n                list2 = list2 ::: List(l)\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case i : Long => list2 = list2 :+ i\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ++ flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case num : Long => {\n                list2 = list2 ::: List(num)\n            }\n        }\n        return list2",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        list1 match {\n            case Nil => Nil\n            case x :: xs => x match {\n                case y : Long => y :: flattenList(xs)\n                case y : List[Any] => flattenList(y) ::: flattenList(xs)\n            }\n        }",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case (x : List[Any]) => {\n                for (i <- x) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case (x : Long) => {\n                list2 = list2 :+ x\n            }\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list1 : List[Any] => {\n                var list2 : List[Long] = List()\n                for (item <- list1) {\n                    list2 = list2 ::: flattenList(item)\n                }\n                list2\n            }\n            case item : Long => List(item)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        var result = List[Long]()\n        list1 match {\n            case l : List[Any] => {\n                for (i <- l) {\n                    result = result ::: flattenList(i)\n                }\n            }\n            case i : Int => {\n                result = result :+ i.toLong\n            }\n            case i : Long => {\n                result = result :+ i\n            }\n        }\n        result",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => list2 = list2 ++ flattenList(x)\n            case _ =>\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case num : Long => list2 = list2 :+ num\n        }\n        list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case x : Long => list2 = list2 :+ x\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case x : Long => list2 = list2 :+ x\n            case x : List[Any] => x.foreach(y => list2 = list2 ::: flattenList(y))\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ::: flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n            case _ => {\n                println(\"Error\")\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n            case x :: xs => x :: flattenList(xs)\n        }",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        list1 match {\n            case x : List[Any] => x.flatMap(flattenList)\n            case x : Long => List(x)\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (item <- list) {\n                    list2 = list2 ++ flattenList(item)\n                }\n            }\n            case item : Long => {\n                list2 = list2 :+ item\n            }\n            case _ => {\n                throw new Exception(\"Invalid input\")\n            }\n        }\n        list2",
    "        var list2 : List[Long] = List()\n        list1 match {\n            case list : List[_] => list.foreach(x => list2 = list2 ::: flattenList(x))\n            case x : Long => list2 = list2 :+ x\n            case _ =>\n        }\n        list2",
    "        list1 match {\n            case x : Long => List(x)\n            case x : List[Any] => x.flatMap(flattenList)\n            case _ => List()\n        }",
    "        list1 match {\n            case Nil => Nil\n            case (x : Long) :: xs => x :: flattenList(xs)\n            case (x : List[Any]) :: xs => flattenList(x) ::: flattenList(xs)\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case x : List[Any] => {\n                for (i <- 0 to x.length - 1) {\n                    list2 = list2 ::: flattenList(x(i))\n                }\n            }\n            case x : Long => {\n                list2 = list2 :+ x\n            }\n        }\n        return list2",
    "        list1 match {\n            case list : List[Any] => list.flatMap(flattenList)\n            case x : Long => List(x)\n            case _ => List()\n        }",
    "        var list2 = List[Long]()\n        list1 match {\n            case list : List[Any] => {\n                for (i <- list) {\n                    list2 = list2 ::: flattenList(i)\n                }\n            }\n            case l : Long => list2 = list2 :+ l\n        }\n        list2"
  ]
}