{
  "name": "mbpp_282_sub_list",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be the same length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until nums1.length) {\n                result = result :+ (nums1(i) - nums2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"Lists must be of equal length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        (nums1 zip nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val nums1_ = nums1.toArray\n        val nums2_ = nums2.toArray\n        for (i <- 0 until nums1_.length) nums1_(i) -= nums2_(i)\n        nums1_.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be the same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until nums1.length) {\n                result = result :+ (nums1(i) - nums2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) {\n            result += (nums1(i) - nums2(i))\n        }\n        return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be the same length\")\n        else {\n            var result = List[Long]()\n            for (i <- 0 until nums1.length) {\n                result = result :+ (nums1(i) - nums2(i))\n            }\n            result\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += nums1(i) - nums2(i)\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.isEmpty) Nil\n        else nums1.head - nums2.head :: subList(nums1.tail, nums2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must be the same length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.isEmpty || nums2.isEmpty) return List()\n        val x = nums1.head - nums2.head\n        List(x) ::: subList(nums1.tail, nums2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val n = nums1.length\n        val m = nums2.length\n        val result = new ArrayBuffer[Long]()\n        for (i <- 0 until n) {\n            if (i < m) result += nums1(i) - nums2(i)\n            else result += nums1(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        (nums1, nums2).zipped.map(_ - _)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length == 0) Nil\n        else nums1.head - nums2.head :: subList(nums1.tail, nums2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result : List[Long] = List()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val nums1_ = nums1.toArray\n        val nums2_ = nums2.toArray\n        val n = nums1_.length\n        val m = nums2_.length\n        val nums = new Array[Long](max(n, m))\n        for (i <- 0 until n) {\n            nums(i) = nums1_(i)\n        }\n        for (i <- 0 until m) {\n            nums(i) -= nums2_(i)\n        }\n        nums.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val nums = nums1.zip(nums2)\n        nums.map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists are not of equal length\")\n        else nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123410,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val n = nums1.length\n        val m = nums2.length\n        val result = new Array[Long](n)\n        for (i <- 0 until n) {\n            result(i) = nums1(i) - nums2(i % m)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must be the same length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.isEmpty) return nums2\n        if (nums2.isEmpty) return nums1\n        (nums1.head - nums2.head) :: subList(nums1.tail, nums2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        val result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) {\n            throw new IllegalArgumentException(\"nums1 and nums2 must be the same length\")\n        }\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]\n        for (i <- 0 until nums1.length) result += (nums1(i) - nums2(i))\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) result = result :+ (nums1(i) - nums2(i))\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException(\"Lists must be of same length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.isEmpty || nums2.isEmpty) return List[Long]()\n        val head1 = nums1.head\n        val head2 = nums2.head\n        val tail1 = nums1.tail\n        val tail2 = nums2.tail\n        (head1 - head2) :: subList(tail1, tail2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.isEmpty || nums2.isEmpty) return List()\n        (nums1.head - nums2.head) :: subList(nums1.tail, nums2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517543,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.isEmpty || nums2.isEmpty) Nil\n        else (nums1.head - nums2.head) :: subList(nums1.tail, nums2.tail)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        require(nums1.length == nums2.length)\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new Exception(\"Lists must be of equal length\")\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123409,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) {\n            println(\"Error: lists not of equal length\")\n            return List()\n        }\n        var result = List[Long]()\n        for (i <- 0 until nums1.length) {\n            result = result :+ (nums1(i) - nums2(i))\n        }\n        return result\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        if (nums1.length != nums2.length) throw new IllegalArgumentException\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        var result = new ListBuffer[Long]()\n        for (i <- 0 until nums1.length) {\n            result += nums1(i) - nums2(i)\n        }\n        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1666123416,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to subtract two lists element-wise.\n    def subList(nums1 : List[Long], nums2 : List[Long]) : List[Long] = {\n        nums1.zip(nums2).map(x => x._1 - x._2)\n    }\n    def main(args: Array[String]) = {\n    assert(subList((List[Long](1l.toLong, 2l.toLong, 3l.toLong)), (List[Long](4l.toLong, 5l.toLong, 6l.toLong))).equals((List[Long](-3l.toLong, -3l.toLong, -3l.toLong))));\n    assert(subList((List[Long](1l.toLong, 2l.toLong)), (List[Long](3l.toLong, 4l.toLong))).equals((List[Long](-2l.toLong, -2l.toLong))));\n    assert(subList((List[Long](90l.toLong, 120l.toLong)), (List[Long](50l.toLong, 70l.toLong))).equals((List[Long](40l.toLong, 50l.toLong))));\n    }\n\n}\n",
      "timestamp": 1665517542,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}