{
  "name": "mbpp_412_remove_odd",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to remove odd numbers from a given list.\n    def removeOdd(l : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeOdd((List[Long](1l.toLong, 2l.toLong, 3l.toLong))).equals((List[Long](2l.toLong))));\n    assert(removeOdd((List[Long](2l.toLong, 4l.toLong, 6l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong))));\n    assert(removeOdd((List[Long](10l.toLong, 20l.toLong, 3l.toLong))).equals((List[Long](10l.toLong, 20l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(_ % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(_ % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(_ % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(_ % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)",
    "        l.filter(x => x % 2 == 0)"
  ]
}