{
  "name": "mbpp_296_get_Inv_Count",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "results": [
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0; var j = 0\n            var invCount = 0L\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def sortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = sortAndCount(left)\n                val (rightSorted, rightCount) = sortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        sortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                if (left.head <= right.head) {\n                    val (merged, splitInv) = merge(left.tail, right)\n                    (left.head :: merged, splitInv)\n                } else {\n                    val (merged, splitInv) = merge(left, right.tail)\n                    (right.head :: merged, splitInv + left.length)\n                }\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitInvCount) = merge(left, right)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (l, r, invCount) = (0, 0, 0L)\n            var result = ListBuffer[Long]()\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result += left(l)\n                    l += 1\n                }\n                else {\n                    result += right(r)\n                    r += 1\n                    invCount += left.length - l\n                }\n            }\n            while (l < left.length) {\n                result += left(l)\n                l += 1\n            }\n            while (r < right.length) {\n                result += right(r)\n                r += 1\n            }\n            invCount\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfunjvxpf.scala:35:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m35 |\u001b[0m            invCount\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (invCount : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpfunjvxpf.scala:37:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m37 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            merge(mergeSort(left), mergeSort(right))\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head <= right.head) return left.head :: merge(left.tail, right)\n            else return right.head :: merge(left, right.tail)\n        }\n        def getInvCount(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftInvCount = getInvCount(left)\n            val rightInvCount = getInvCount(right)\n            val splitInvCount = getSplitInvCount(left, right)\n            leftInvCount + rightInvCount + splitInvCount\n        }\n        def getSplitInvCount(left : List[Long], right : List[Long]) : Long = {\n            var i = 0\n            var j = 0\n            var splitInvCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    splitInvCount += (left.length - i)\n                    j += 1\n                }\n            }\n            splitInvCount\n        }\n        getInvCount(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkioxs_ed.scala:41)\n\tat Problem.main(tmpkioxs_ed.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += (left.length - i)\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (sortedLeft, leftInvCount) = mergeSort(left)\n            val (sortedRight, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(sortedLeft, sortedRight)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                (left, right) match {\n                    case (Nil, _) => right\n                    case (_, Nil) => left\n                    case (l :: ls, r :: rs) => if (l < r) l :: merge(ls, right) else r :: merge(left, rs)\n                }\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        mergeSort(arr).zipWithIndex.foldLeft(0L)((acc, x) => acc + x._2 - arr.indexOf(x._1))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpavqx8gig.scala:24)\n\tat Problem.main(tmpavqx8gig.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            val n = arr.length\n            if (n == 1) (arr, 0)\n            else {\n                val (a, x) = mergeSort(arr.slice(0, n / 2))\n                val (b, y) = mergeSort(arr.slice(n / 2, n))\n                val (c, z) = merge(a, b)\n                (c, x + y + z)\n            }\n        }\n        def merge(a : List[Long], b : List[Long]) : (List[Long], Long) = {\n            var x = a\n            var y = b\n            var c = List[Long]()\n            var count = 0L\n            while (!x.isEmpty && !y.isEmpty) {\n                if (x.head <= y.head) {\n                    c = c :+ x.head\n                    x = x.tail\n                }\n                else {\n                    c = c :+ y.head\n                    y = y.tail\n                    count += x.length\n                }\n            }\n            if (!x.isEmpty) c = c ::: x\n            if (!y.isEmpty) c = c ::: y\n            (c, count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = sortAndCount(left)\n            val (rightSorted, rightCount) = sortAndCount(right)\n            val (merged, mergeCount) = merge(leftSorted, rightSorted)\n            (merged, leftCount + rightCount + mergeCount)\n        }\n        sortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val mid = arr.length / 2\n            val left = mergeSort(arr.slice(0, mid))\n            val right = mergeSort(arr.slice(mid, arr.length))\n            merge(left, right)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.length == 0) return right\n            if (right.length == 0) return left\n            if (left(0) <= right(0)) return left(0) :: merge(left.slice(1, left.length), right)\n            else return right(0) :: merge(left, right.slice(1, right.length))\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val mid = arr.length / 2\n            val left = arr.slice(0, mid)\n            val right = arr.slice(mid, arr.length)\n            val leftInv = countInversions(left)\n            val rightInv = countInversions(right)\n            val splitInv = countSplitInversions(left, right)\n            leftInv + rightInv + splitInv\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    splitInv += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            splitInv\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpaykjznhj.scala:45)\n\tat Problem.main(tmpaykjznhj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) result = result ::: left.slice(i, left.length)\n            if (j < right.length) result = result ::: right.slice(j, right.length)\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var sorted = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    sorted = sorted :+ left(i)\n                    i += 1\n                } else {\n                    sorted = sorted :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                sorted = sorted :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                sorted = sorted :+ right(j)\n                j += 1\n            }\n            (sorted, invCount)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = sort(arr.slice(0, mid))\n            val (right, rightInvCount) = sort(arr.slice(mid, arr.length))\n            val (sorted, mergeInvCount) = merge(left, right)\n            (sorted, leftInvCount + rightInvCount + mergeInvCount)\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftInv = countInv(left)\n                val rightInv = countInv(right)\n                val splitInv = merge(left, right).zipWithIndex.map(x => (x._1, x._2 + 1)).filter(x => x._1 > arr(x._2 - 1)).map(x => x._1 - arr(x._2 - 1)).sum\n                leftInv + rightInv + splitInv\n            }\n        }\n        countInv(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplbkqstz2.scala:32)\n\tat Problem.main(tmplbkqstz2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (sorted, splitCount) = merge(leftSorted, rightSorted)\n                (sorted, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = left\n            var r = right\n            var result = List[Long]()\n            var count = 0L\n            while(!l.isEmpty && !r.isEmpty) {\n                if(l.head < r.head) {\n                    result = result :+ l.head\n                    l = l.tail\n                } else {\n                    result = result :+ r.head\n                    r = r.tail\n                    count += left.length\n                }\n            }\n            if(!l.isEmpty) result = result ::: l\n            if(!r.isEmpty) result = result ::: r\n            return (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            return (result, leftCount + rightCount + count)\n        }\n        val (result, count) = mergeSort(arr)\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp3rhfdg4w.scala:37)\n\tat Problem.main(tmp3rhfdg4w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr)\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmplry7etdr.scala:23)\n\tat Problem.main(tmplry7etdr.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (t, n) = merge(left.tail, right)\n                (left.head :: t, n)\n            } else {\n                val (t, n) = merge(left, right.tail)\n                (right.head :: t, n + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while(i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, count) = merge(left, right)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                (left, right) match {\n                    case (Nil, _) => right\n                    case (_, Nil) => left\n                    case (x :: xs, y :: ys) => if (x < y) x :: merge(xs, right) else y :: merge(left, ys)\n                }\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        mergeSort(arr).zipWithIndex.map(x => x._2 - x._1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpdiw0r07e.scala:24)\n\tat Problem.main(tmpdiw0r07e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = ListBuffer[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = sort(left)\n                val (rightSorted, rightCount) = sort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            }\n                            else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyfpagkvh.scala:29:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyfpagkvh.scala:29:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = ListBuffer[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitInvCount) = merge(left, right)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInvCount) = merge(left, right)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprm2hapwb.scala:43)\n\tat Problem.main(tmprm2hapwb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            var invCount = 0L\n            while(leftIndex < left.length && rightIndex < right.length) {\n                if(left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while(leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while(rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (result, splitInvCount) = merge(leftSorted, rightSorted)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var l = 0\n            var r = 0\n            var result = List[Long]()\n            while(l < left.length && r < right.length) {\n                if(left(l) <= right(r)) {\n                    result = result :+ left(l)\n                    l += 1\n                } else {\n                    result = result :+ right(r)\n                    r += 1\n                    count += left.length - l\n                }\n            }\n            if(l < left.length) {\n                result = result ::: left.slice(l, left.length)\n            }\n            if(r < right.length) {\n                result = result ::: right.slice(r, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) {\n                (arr, 0)\n            } else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (rest, inv) = merge(left.tail, right)\n                return (left.head :: rest, inv)\n            } else {\n                val (rest, inv) = merge(left, right.tail)\n                return (right.head :: rest, inv + left.length)\n            }\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, mergeInv) = merge(leftSorted, rightSorted)\n            return (merged, leftInv + rightInv + mergeInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInversions(left) + countInversions(right) + countSplitInversions(left, right)\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4gic0d9k.scala:42)\n\tat Problem.main(tmp4gic0d9k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else {\n                if (left.head < right.head) left.head :: merge(left.tail, right)\n                else right.head :: merge(left, right.tail)\n            }\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                val leftInv = countInversions(left)\n                val rightInv = countInversions(right)\n                val splitInv = merge(leftSorted, rightSorted).zipWithIndex.foldLeft(0L)((acc, x) => if (x._1 != arr(x._2)) acc + 1 else acc)\n                leftInv + rightInv + splitInv\n            }\n        }\n        countInversions(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpm12cb2fu.scala:38)\n\tat Problem.main(tmpm12cb2fu.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result : List[Long] = List()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, count) = merge(xs, right, invCount)\n                                (x :: zs, count)\n                            } else {\n                                val (zs, count) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, count)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sorted, mergeInvCount) = merge(sortedLeft, sortedRight, 0)\n                sorted\n            }\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp6ne933.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sorted, mergeInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp6ne933.scala:28:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sorted, mergeInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmplp6ne933.scala:32:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInversions(left) + countInversions(right) + countSplitInversions(left, right)\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4gic0d9k.scala:42)\n\tat Problem.main(tmp4gic0d9k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, splitCount) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length\n            if (n <= 1) return arr\n            val (left, right) = arr.splitAt(n / 2)\n            merge(mergeSort(left), mergeSort(right))\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var i = 0; var j = 0; var k = 0\n            val n1 = left.length; val n2 = right.length\n            val arr = new Array[Long](n1 + n2)\n            var invCount = 0L\n            while (i < n1 && j < n2) {\n                if (left(i) <= right(j)) {\n                    arr(k) = left(i)\n                    i += 1\n                } else {\n                    arr(k) = right(j)\n                    j += 1\n                    invCount += (n1 - i)\n                }\n                k += 1\n            }\n            while (i < n1) {\n                arr(k) = left(i)\n                i += 1; k += 1\n            }\n            while (j < n2) {\n                arr(k) = right(j)\n                j += 1; k += 1\n            }\n            invCount\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124078,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp943b_cv_.scala:36:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m            invCount\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (invCount : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp943b_cv_.scala:38:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m38 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (result, splitCount) = mergeAndCount(arr, leftSorted, rightSorted)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (rest, inv) = merge(left.tail, right)\n                (left.head :: rest, inv)\n            } else {\n                val (rest, inv) = merge(left, right.tail)\n                (right.head :: rest, inv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftInv = countInversions(left)\n                val rightInv = countInversions(right)\n                val splitInv = countSplitInversions(left, right)\n                leftInv + rightInv + splitInv\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    splitInv += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            splitInv\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpyxop43yo.scala:45)\n\tat Problem.main(tmpyxop43yo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    invCount += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0L)\n            val mid = arr.length / 2\n            val (left, leftInv) = mergeSort(arr.slice(0, mid))\n            val (right, rightInv) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInv) = merge(left, right)\n            (result, leftInv + rightInv + splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124078,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpck_h1nrd.scala:19:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m19 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            var inversions = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    inversions += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, inversions)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInversions) = mergeSort(left)\n            val (rightSorted, rightInversions) = mergeSort(right)\n            val (sorted, splitInversions) = merge(leftSorted, rightSorted)\n            (sorted, leftInversions + rightInversions + splitInversions)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(arr1 : List[Long], arr2 : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < arr1.length && j < arr2.length) {\n                if (arr1(i) <= arr2(j)) {\n                    result = result :+ arr1(i)\n                    i += 1\n                } else {\n                    result = result :+ arr2(j)\n                    j += 1\n                    count += arr1.length - i\n                }\n            }\n            while (i < arr1.length) {\n                result = result :+ arr1(i)\n                i += 1\n            }\n            while (j < arr2.length) {\n                result = result :+ arr2(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (arr1, count1) = mergeSort(arr.slice(0, arr.length / 2))\n                val (arr2, count2) = mergeSort(arr.slice(arr.length / 2, arr.length))\n                val (arr3, count3) = merge(arr1, arr2)\n                (arr3, count1 + count2 + count3)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (result, splitInvCount) = merge(leftSorted, rightSorted)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, count + leftCount + rightCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            var invCount = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4xcl0pc_.scala:43)\n\tat Problem.main(tmp4xcl0pc_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = (left, right) match {\n                    case (Nil, _) => (right, invCount)\n                    case (_, Nil) => (left, invCount)\n                    case (x :: xs, y :: ys) => if (x <= y) {\n                        val (left1, invCount1) = merge(xs, right, invCount)\n                        (x :: left1, invCount1)\n                    } else {\n                        val (left1, invCount1) = merge(left, ys, invCount + xs.length)\n                        (y :: left1, invCount1)\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (left1, invCount1) = mergeSort(left)\n                val (right1, invCount2) = mergeSort(right)\n                val (res, invCount3) = merge(left1, right1, 0)\n                res\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpswo4hknd.scala:24:45 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                \u001b[33mval\u001b[0m (res, invCount3) = merge(left1, right1, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                             ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                             Found:    (left1 : Any)\n\u001b[31m   |\u001b[0m                                             Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpswo4hknd.scala:24:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                \u001b[33mval\u001b[0m (res, invCount3) = merge(left1, right1, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (right1 : Any)\n\u001b[31m   |\u001b[0m                                                Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count : Long = 0\n            var result : List[Long] = List()\n            var leftIndex : Int = 0\n            var rightIndex : Int = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitCount) = merge(left, right)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = (left, right) match {\n                    case (Nil, _) => (right, invCount)\n                    case (_, Nil) => (left, invCount)\n                    case (l :: ls, r :: rs) =>\n                        if (l <= r) {\n                            val (m, c) = merge(ls, right, invCount)\n                            (l :: m, c)\n                        } else {\n                            val (m, c) = merge(left, rs, invCount + (left.length))\n                            (r :: m, c)\n                        }\n                }\n                val (left, right) = arr splitAt(n)\n                val (lSorted, lCount) = mergeSort(left)\n                val (rSorted, rCount) = mergeSort(right)\n                val (result, splitCount) = merge(lSorted, rSorted, 0)\n                result\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp64qcfcvp.scala:25:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33mval\u001b[0m (result, splitCount) = merge(lSorted, rSorted, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (lSorted : Any)\n\u001b[31m   |\u001b[0m                                               Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp64qcfcvp.scala:25:58 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33mval\u001b[0m (result, splitCount) = merge(lSorted, rSorted, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                          ^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                               Found:    (rSorted : Any)\n\u001b[31m   |\u001b[0m                                               Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (l :: ls, r :: rs) => {\n                            if (l <= r) {\n                                val (result, count) = merge(ls, right, invCount)\n                                (l :: result, count)\n                            } else {\n                                val (result, count) = merge(left, rs, invCount + ls.length)\n                                (r :: result, count)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, splitCount) = merge(leftSorted, rightSorted, 0)\n                result\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphzxpt8p0.scala:28:49 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (result, splitCount) = merge(leftSorted, rightSorted, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                 ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (leftSorted : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmphzxpt8p0.scala:28:61 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (result, splitCount) = merge(leftSorted, rightSorted, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                             ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (rightSorted : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitCount) = merge(left, right)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countSplitInv(left : List[Long], right : List[Long]) : Long = {\n            if (left.isEmpty) 0\n            else if (right.isEmpty) 0\n            else if (left.head <= right.head) countSplitInv(left.tail, right)\n            else 1 + countSplitInv(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInv(left) + countInv(right) + countSplitInv(left, right)\n            }\n        }\n        countInv(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmph_338cvt.scala:35)\n\tat Problem.main(tmph_338cvt.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) result = result ::: left.slice(i, left.length)\n            if (j < right.length) result = result ::: right.slice(j, right.length)\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124080,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) =>\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + (left.length))\n                                (y :: zs, newInvCount)\n                            }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1chxq3m.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1chxq3m.scala:27:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            merge(mergeSort(left), mergeSort(right))\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (leftIndex, rightIndex) = (0, 0)\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                }\n                else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                }\n            }\n            if (leftIndex < left.length) result = result ::: left.slice(leftIndex, left.length)\n            else if (rightIndex < right.length) result = result ::: right.slice(rightIndex, right.length)\n            result\n        }\n        mergeSort(arr).foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124089,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprl4za_5_.scala:31)\n\tat Problem.main(tmprl4za_5_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                if (left.isEmpty) right\n                else if (right.isEmpty) left\n                else if (left.head <= right.head) left.head :: merge(left.tail, right)\n                else right.head :: merge(left, right.tail)\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        mergeSort(arr).zipWithIndex.foldLeft(0L)((acc, x) => acc + (x._2 - x._1))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpkrkis71e.scala:23)\n\tat Problem.main(tmpkrkis71e.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                if (left.isEmpty) right\n                else if (right.isEmpty) left\n                else if (left.head <= right.head) left.head :: merge(left.tail, right)\n                else right.head :: merge(left, right.tail)\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def count(arr : List[Long]) : Long = {\n            def count(left : List[Long], right : List[Long], count : Long) : Long = {\n                if (left.isEmpty) count\n                else if (right.isEmpty) count\n                else if (left.head <= right.head) count(left.tail, right, count)\n                else count(left, right.tail, count + left.length)\n            }\n            val n = arr.length / 2\n            if (n == 0) 0\n            else {\n                val (left, right) = arr splitAt(n)\n                count(left, right, 0) + count(left) + count(right)\n            }\n        }\n        count(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpetli_x19.scala:24:50 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m24 |\u001b[0m                \u001b[33melse\u001b[0m \u001b[33mif\u001b[0m (left.head <= right.head) count(left.tail, right, count)\n\u001b[31m\u001b[31m   |\u001b[0m                                                  ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                \u001b[33mparameter\u001b[0m \u001b[35mcount\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E050] Type Error: /tmp/tmpetli_x19.scala:25:21 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33melse\u001b[0m count(left, right.tail, count + left.length)\n\u001b[31m\u001b[31m   |\u001b[0m                     ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                     \u001b[33mparameter\u001b[0m \u001b[35mcount\u001b[0m does not take parameters\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- Error: /tmp/tmpetli_x19.scala:31:45 -----------------------------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m                count(left, right, \u001b[31m0\u001b[0m) + count(left) + count(right)\n\u001b[31m\u001b[31m   |\u001b[0m                                        ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0mmissing argument for parameter right of \u001b[33mmethod\u001b[0m \u001b[35mcount\u001b[0m: (left: List[Long], right: List[Long], count: Long): Long\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = 0; var r = 0; var inv = 0L\n            var result = List[Long]()\n            while (l < left.length && r < right.length) {\n                if (left(l) <= right(r)) {\n                    result = result :+ left(l)\n                    l += 1\n                } else {\n                    result = result :+ right(r)\n                    r += 1\n                    inv += left.length - l\n                }\n            }\n            while (l < left.length) {\n                result = result :+ left(l)\n                l += 1\n            }\n            while (r < right.length) {\n                result = result :+ right(r)\n                r += 1\n            }\n            (result, inv)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0L)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = sort(left)\n            val (rightSorted, rightInv) = sort(right)\n            val (merged, mergeInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + mergeInv)\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (tail, count) = merge(left.tail, right)\n                (left.head :: tail, count)\n            } else {\n                val (tail, count) = merge(left, right.tail)\n                (right.head :: tail, count + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInversions(left) + countInversions(right) + countSplitInversions(left, right)\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4gic0d9k.scala:42)\n\tat Problem.main(tmp4gic0d9k.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                }\n            }\n            if (leftIndex < left.length) result = result ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) result = result ::: right.slice(rightIndex, right.length)\n            result\n        }\n        mergeSort(arr).foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpzvd1cd1y.scala:33)\n\tat Problem.main(tmpzvd1cd1y.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            var splitInv = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result ::= left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result ::= right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) {\n                result = result ::: left.slice(leftIndex, left.length)\n            } else if (rightIndex < right.length) {\n                result = result ::: right.slice(rightIndex, right.length)\n            }\n            (result.reverse, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpfmo5pm3o.scala:41)\n\tat Problem.main(tmpfmo5pm3o.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0\n            var j = 0\n            var count = 0L\n            var result = ListBuffer[Long]()\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                }\n                else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInv(left) + countInv(right) + countSplitInv(left, right)\n            }\n        }\n        def countSplitInv(left : List[Long], right : List[Long]) : Long = {\n            var inv = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    inv += left.length - i\n                    j += 1\n                }\n            }\n            inv\n        }\n        countInv(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpgqzvg4mx.scala:42)\n\tat Problem.main(tmpgqzvg4mx.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def mergeCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else if (left.head < right.head) {\n                val (l, c) = mergeCount(left.tail, right)\n                (left.head :: l, c)\n            }\n            else {\n                val (l, c) = mergeCount(left, right.tail)\n                (right.head :: l, c + left.length)\n            }\n        }\n        def mergeSortCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (l, c1) = mergeSortCount(left)\n                val (r, c2) = mergeSortCount(right)\n                val (m, c3) = mergeCount(l, r)\n                (m, c1 + c2 + c3)\n            }\n        }\n        mergeSortCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxt9muksm.scala:45)\n\tat Problem.main(tmpxt9muksm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (sorted, splitInv) = merge(leftSorted, rightSorted)\n                (sorted, leftInv + rightInv + splitInv)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var invCount = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            merged = merged ++ left.slice(leftIndex, left.length)\n            merged = merged ++ right.slice(rightIndex, right.length)\n            (merged, invCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            }\n            if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) {\n                (arr, 0)\n            } else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, count) = merge(left, right)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var invCount = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    invCount += 1\n                }\n            }\n        }\n        invCount\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, mergeCount) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (remaining, count) = merge(left.tail, right)\n                (left.head :: remaining, count)\n            } else {\n                val (remaining, count) = merge(left, right.tail)\n                (right.head :: remaining, count + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = new ListBuffer[Long]\n            var i = 0; var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    invCount += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            var result = List[Long]()\n            var count = 0L\n            var (leftHead, leftTail) = (left.head, left.tail)\n            var (rightHead, rightTail) = (right.head, right.tail)\n            while (!left.isEmpty && !right.isEmpty) {\n                if (leftHead <= rightHead) {\n                    result = result :+ leftHead\n                    left = leftTail\n                    if (!left.isEmpty) {\n                        leftHead = left.head\n                        leftTail = left.tail\n                    }\n                } else {\n                    result = result :+ rightHead\n                    right = rightTail\n                    count += left.length\n                    if (!right.isEmpty) {\n                        rightHead = right.head\n                        rightTail = right.tail\n                    }\n                }\n            }\n            if (!left.isEmpty) result = result ::: left\n            if (!right.isEmpty) result = result ::: right\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            var (left, right) = arr.splitAt(arr.length / 2)\n            var (leftSorted, leftCount) = mergeSortAndCount(left)\n            var (rightSorted, rightCount) = mergeSortAndCount(right)\n            var (result, splitCount) = mergeAndCount(leftSorted, rightSorted)\n            (result, leftCount + rightCount + splitCount)\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124094,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppd6dvcor.scala:16:25 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m16 |\u001b[0m                    left = leftTail\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val left\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E052] Type Error: /tmp/tmppd6dvcor.scala:23:26 -----------------------------\u001b[0m\u001b[0m\n\u001b[31m23 |\u001b[0m                    right = rightTail\n\u001b[31m\u001b[31m   |\u001b[0m                    ^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                    Reassignment to val right\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) result = result ++ left.slice(i, left.length)\n            if (j < right.length) result = result ++ right.slice(j, right.length)\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (i, j, invCount) = (0, 0, 0)\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            invCount\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124100,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwy339oj.scala:34:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m34 |\u001b[0m            invCount\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (invCount : Int)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpxwy339oj.scala:36:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m36 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124068,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprm2hapwb.scala:43)\n\tat Problem.main(tmprm2hapwb.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            }\n                            else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyfpagkvh.scala:29:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpyfpagkvh.scala:29:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m29 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124079,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp4xcl0pc_.scala:43)\n\tat Problem.main(tmp4xcl0pc_.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (merged, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftCount = countInversions(left)\n                val rightCount = countInversions(right)\n                val splitCount = countSplitInversions(left, right)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var count = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpv5d7y_i7.scala:47)\n\tat Problem.main(tmpv5d7y_i7.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (sorted, splitInv) = merge(leftSorted, rightSorted)\n                (sorted, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = if (left.head <= right.head) left else right\n                val (sorted, inv) = merge(if (left.head <= right.head) left.tail else left, if (left.head <= right.head) right else right.tail)\n                (head :: sorted, inv + (if (left.head <= right.head) 0 else left.length))\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = (left, right) match {\n                    case (Nil, _) => (right, invCount)\n                    case (_, Nil) => (left, invCount)\n                    case (h1 :: t1, h2 :: t2) =>\n                        if (h1 <= h2) {\n                            val (res, count) = merge(t1, right, invCount)\n                            (h1 :: res, count)\n                        } else {\n                            val (res, count) = merge(left, t2, invCount + (left.length))\n                            (h2 :: res, count)\n                        }\n                }\n                val (left, right) = arr splitAt(n)\n                val (res1, count1) = mergeSort(left)\n                val (res2, count2) = mergeSort(right)\n                val (res, count3) = merge(res1, res2, 0)\n                res\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6lsbfra.scala:25:42 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33mval\u001b[0m (res, count3) = merge(res1, res2, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                          ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                          Found:    (res1 : Any)\n\u001b[31m   |\u001b[0m                                          Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpk6lsbfra.scala:25:48 --------------------\u001b[0m\u001b[0m\n\u001b[31m25 |\u001b[0m                \u001b[33mval\u001b[0m (res, count3) = merge(res1, res2, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                ^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                                Found:    (res2 : Any)\n\u001b[31m   |\u001b[0m                                                Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                var result = List[Long]()\n                var i = 0\n                var j = 0\n                while (i < left.length && j < right.length) {\n                    if (left(i) <= right(j)) {\n                        result = result :+ left(i)\n                        i += 1\n                    } else {\n                        result = result :+ right(j)\n                        j += 1\n                    }\n                }\n                while (i < left.length) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                while (j < right.length) {\n                    result = result :+ right(j)\n                    j += 1\n                }\n                result\n            }\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        mergeSort(arr).zipWithIndex.foldLeft(0L)((acc, x) => acc + x._2 - x._1)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp_sjhogw6.scala:39)\n\tat Problem.main(tmp_sjhogw6.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftCount = countInversions(left)\n                val rightCount = countInversions(right)\n                val splitCount = countSplitInversions(left, right)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var i = 0; var j = 0; var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) i += 1\n                else {\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpu2120fuf.scala:43)\n\tat Problem.main(tmpu2120fuf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (z, c) = merge(xs, right, invCount)\n                                (x :: z, c)\n                            } else {\n                                val (z, c) = merge(left, ys, invCount + left.length)\n                                (y :: z, c)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr)\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3cq2offg.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp3cq2offg.scala:28:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = left\n            var r = right\n            var result = List[Long]()\n            var count = 0L\n            while(l.length > 0 && r.length > 0) {\n                if(l.head <= r.head) {\n                    result = result :+ l.head\n                    l = l.tail\n                } else {\n                    result = result :+ r.head\n                    r = r.tail\n                    count += left.length\n                }\n            }\n            if(l.length > 0) result = result ::: l\n            if(r.length > 0) result = result ::: r\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpifbwnao2.scala:38)\n\tat Problem.main(tmpifbwnao2.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                }\n            }\n            result ++ left.drop(leftIndex) ++ right.drop(rightIndex)\n        }\n        mergeSort(arr).foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpt6z5r3ls.scala:31)\n\tat Problem.main(tmpt6z5r3ls.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    invCount += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124098,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = sort(left)\n                val (rightSorted, rightCount) = sort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                }\n            }\n            if (leftIndex < left.length) result = result ::: left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) result = result ::: right.slice(rightIndex, right.length)\n            result\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124101,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpy7rqnj_3.scala:30:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m30 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            def mergeHelper(left : List[Long], right : List[Long], acc : List[Long]) : List[Long] = {\n                (left, right) match {\n                    case (Nil, Nil) => acc\n                    case (Nil, _) => acc ::: right\n                    case (_, Nil) => acc ::: left\n                    case (l :: ls, r :: rs) => {\n                        if (l < r) mergeHelper(ls, right, acc :+ l)\n                        else mergeHelper(left, rs, acc :+ r)\n                    }\n                }\n            }\n            mergeHelper(left, right, Nil)\n        }\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length\n            if (n <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(n / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        mergeSort(arr).foldLeft(0L)((acc, x) => acc + x)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpjbsgwzzv.scala:31)\n\tat Problem.main(tmpjbsgwzzv.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftSorted = mergeSort(left)\n            val rightSorted = mergeSort(right)\n            val merged = merge(leftSorted, rightSorted)\n            val leftInversions = countInversions(left)\n            val rightInversions = countInversions(right)\n            val splitInversions = merged.zipWithIndex.filter(x => x._2 < left.length && x._1 > right(x._2)).length\n            leftInversions + rightInversions + splitInversions\n        }\n        countInversions(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpwqbbf591.scala:33)\n\tat Problem.main(tmpwqbbf591.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124103,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (merged, mergedInvCount) = merge(leftSorted, rightSorted)\n            (merged, leftInvCount + rightInvCount + mergedInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124106,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124110,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp49wtkpdj.scala:41)\n\tat Problem.main(tmp49wtkpdj.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            val head :: tail = if (left.head <= right.head) left else right\n            val (merged, splitInv) = merge(if (left.head <= right.head) left.tail else left, if (left.head <= right.head) right else right.tail)\n            (head :: merged, if (left.head <= right.head) splitInv else splitInv + left.length)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.map(x => x._1 * (arr.length - x._2 - 1)).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp1h9a6b97.scala:22)\n\tat Problem.main(tmp1h9a6b97.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(arr : List[Long], left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (result, splitInvCount) = merge(arr, leftSorted, rightSorted)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (l, c) = merge(left.tail, right)\n                return (left.head :: l, c)\n            } else {\n                val (l, c) = merge(left, right.tail)\n                return (right.head :: l, c + left.length)\n            }\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (l, c1) = mergeSort(left)\n            val (r, c2) = mergeSort(right)\n            val (m, c3) = merge(l, r)\n            return (m, c1 + c2 + c3)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpmcj5p3ie.scala:43)\n\tat Problem.main(tmpmcj5p3ie.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, mergedInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + mergedInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124102,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) {\n                result = result ::: left.slice(leftIndex, left.length)\n            } else if (rightIndex < right.length) {\n                result = result ::: right.slice(rightIndex, right.length)\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftInvCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightInvCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, splitInvCount) = merge(left, right)\n            (result, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var inversions = 0L\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    inversions += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) {\n                result = result ::: left.slice(leftIndex, left.length)\n            } else if (rightIndex < right.length) {\n                result = result ::: right.slice(rightIndex, right.length)\n            }\n            (result, inversions)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInversions) = mergeSort(left)\n            val (rightSorted, rightInversions) = mergeSort(right)\n            val (sorted, splitInversions) = merge(leftSorted, rightSorted)\n            (sorted, leftInversions + rightInversions + splitInversions)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var (i, j, count) = (0, 0, 0L)\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            if (i < left.length) result = result ::: left.drop(i)\n            else if (j < right.length) result = result ::: right.drop(j)\n            (result, count)\n        }\n        val (result, count) = mergeSort(arr)\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124112,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnik2h224.scala:28:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m            (result, count)\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    \u001b[1m\u001b[31m(\u001b[0mList[Long]\u001b[1m\u001b[31m,\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31mLong\u001b[0m\u001b[1m\u001b[31m)\u001b[0m\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpnik2h224.scala:31:8 ---------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m        count\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    (count : Any)\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = if (left.head <= right.head) left else {\n                    (right.head :: left, right.tail)\n                }\n                val (merged, count) = merge(tail, right)\n                (head :: merged, count + (left.length - tail.length))\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "scala.MatchError: (List(4, 6),List(5)) (of class scala.Tuple2)\n\tat Problem$.merge$1(tmpbq0zx_rk.scala:20)\n\tat Problem$.mergeSort$1(tmpbq0zx_rk.scala:12)\n\tat Problem$.mergeSort$1(tmpbq0zx_rk.scala:11)\n\tat Problem$.getInvCount(tmpbq0zx_rk.scala:27)\n\tat Problem$.main(tmpbq0zx_rk.scala:30)\n\tat Problem.main(tmpbq0zx_rk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftSorted = mergeSort(left)\n                val rightSorted = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val leftCount = countInversions(left)\n                val rightCount = countInversions(right)\n                val splitCount = countSplitInversions(left, right)\n                leftCount + rightCount + splitCount\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var count = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    count += left.length - leftIndex\n                    rightIndex += 1\n                }\n            }\n            count\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpcvhgcj40.scala:47)\n\tat Problem.main(tmpcvhgcj40.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) return (arr, 0L)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            merge(leftSorted, rightSorted)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9ic0tuwe.scala:41)\n\tat Problem.main(tmp9ic0tuwe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) {\n                (arr, 0)\n            } else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitCount) = merge(left, right)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            var inversions = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    inversions += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) {\n                result = result ::: left.drop(leftIndex)\n            } else if (rightIndex < right.length) {\n                result = result ::: right.drop(rightIndex)\n            }\n            (result, inversions)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInversions) = mergeSort(left)\n            val (rightSorted, rightInversions) = mergeSort(right)\n            val (result, splitInversions) = merge(leftSorted, rightSorted)\n            (result, leftInversions + rightInversions + splitInversions)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInv(left) + countInv(right) + merge(left, right).zipWithIndex.filter(x => x._1 != arr(x._2)).length\n            }\n        }\n        countInv(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp9x104jbf.scala:29)\n\tat Problem.main(tmp9x104jbf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                if (left.isEmpty) right\n                else if (right.isEmpty) left\n                else if (left.head <= right.head) left.head :: merge(left.tail, right)\n                else right.head :: merge(left, right.tail)\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def mergeCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else if (left.head <= right.head) {\n                val (rest, count) = mergeCount(left.tail, right)\n                (left.head :: rest, count)\n            }\n            else {\n                val (rest, count) = mergeCount(left, right.tail)\n                (right.head :: rest, count + left.length)\n            }\n        }\n        val n = arr.length / 2\n        if (n == 0) 0\n        else {\n            val (left, right) = arr splitAt(n)\n            val (leftSorted, leftCount) = mergeCount(mergeSort(left), mergeSort(right))\n            leftCount\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmphw_pibq8.scala:41)\n\tat Problem.main(tmphw_pibq8.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = left\n            var r = right\n            var res = List[Long]()\n            var count = 0L\n            while (!l.isEmpty && !r.isEmpty) {\n                if (l.head < r.head) {\n                    res = res :+ l.head\n                    l = l.tail\n                } else {\n                    res = res :+ r.head\n                    r = r.tail\n                    count += left.length - l.length\n                }\n            }\n            if (!l.isEmpty) res = res ::: l\n            if (!r.isEmpty) res = res ::: r\n            (res, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (sorted, count) = merge(leftSorted, rightSorted)\n                (sorted, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2dvryzxf.scala:38)\n\tat Problem.main(tmp2dvryzxf.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var invCount = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    invCount += 1\n                }\n            }\n        }\n        invCount\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124091,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = left\n            var r = right\n            var result = List[Long]()\n            var count = 0L\n            while(l.length > 0 && r.length > 0) {\n                if(l.head < r.head) {\n                    result = result :+ l.head\n                    l = l.tail\n                } else {\n                    result = result :+ r.head\n                    r = r.tail\n                    count += left.length\n                }\n            }\n            if(l.length > 0) result = result ::: l\n            if(r.length > 0) result = result ::: r\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length == 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpqoyq2iuy.scala:36)\n\tat Problem.main(tmpqoyq2iuy.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, count) = merge(xs, right, invCount)\n                                (x :: zs, count)\n                            } else {\n                                val (zs, count) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, count)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftCount) = mergeSort(left)\n                val (sortedRight, rightCount) = mergeSort(right)\n                val (sortedArr, splitCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr)\n        0\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ut4c3dm.scala:28:52 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                    ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp_ut4c3dm.scala:28:64 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.map(x => x._2 - x._1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124116,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbqrdv26l.scala:22)\n\tat Problem.main(tmpbqrdv26l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            var invCount = 0L\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124121,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) {\n                    count += 1\n                }\n            }\n        }\n        return count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124122,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            } else if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ea9fugf.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ea9fugf.scala:28:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmp6ea9fugf.scala:32:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m32 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n3 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var (l, r) = (0, 0)\n            var (leftSize, rightSize) = (left.size, right.size)\n            var result = new ListBuffer[Long]\n            var invCount = 0L\n            while (l < leftSize && r < rightSize) {\n                if (left(l) <= right(r)) {\n                    result += left(l)\n                    l += 1\n                }\n                else {\n                    result += right(r)\n                    r += 1\n                    invCount += leftSize - l\n                }\n            }\n            while (l < leftSize) {\n                result += left(l)\n                l += 1\n            }\n            while (r < rightSize) {\n                result += right(r)\n                r += 1\n            }\n            (result.toList, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.size <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.size / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = sort(arr.slice(0, mid))\n            val (right, rightCount) = sort(arr.slice(mid, arr.length))\n            val (result, mergeCount) = merge(left, right)\n            (result, leftCount + rightCount + mergeCount)\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            if (i < left.length) {\n                result = result ::: left.slice(i, left.length)\n            }\n            if (j < right.length) {\n                result = result ::: right.slice(j, right.length)\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val mid = arr.length / 2\n            val (left, leftCount) = mergeSort(arr.slice(0, mid))\n            val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n            val (result, count) = merge(left, right)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var invCount = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) result = result ::: left.slice(i, left.length)\n            if (j < right.length) result = result ::: right.slice(j, right.length)\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (sorted, splitInv) = merge(leftSorted, rightSorted)\n            (sorted, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            if (left.head <= right.head) {\n                val (tail, inv) = merge(left.tail, right)\n                (left.head :: tail, inv)\n            } else {\n                val (tail, inv) = merge(left, right.tail)\n                (right.head :: tail, inv + left.length)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124123,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInv) = mergeSort(left)\n            val (rightSorted, rightInv) = mergeSort(right)\n            val (merged, splitInv) = merge(leftSorted, rightSorted)\n            (merged, leftInv + rightInv + splitInv)\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) return (right, 0)\n            if (right.isEmpty) return (left, 0)\n            val head :: tail = if (left.head <= right.head) left else right\n            val (merged, splitInv) = merge(if (left.head <= right.head) left.tail else left, if (left.head <= right.head) right else right.tail)\n            (head :: merged, if (left.head <= right.head) splitInv else splitInv + left.length)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124111,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ right(j)\n                    invCount += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val mid = arr.length / 2\n                val (left, leftCount) = mergeSort(arr.slice(0, mid))\n                val (right, rightCount) = mergeSort(arr.slice(mid, arr.length))\n                val (result, splitCount) = merge(left, right)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = ListBuffer[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result += left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result += right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result += left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result += right(rightIndex)\n                rightIndex += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (sorted, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (sorted, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def mergeSortInv(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSortInv(left)\n                val (rightSorted, rightInv) = mergeSortInv(right)\n                val (sorted, splitInv) = mergeInv(leftSorted, rightSorted)\n                (sorted, leftInv + rightInv + splitInv)\n            }\n        }\n        def mergeInv(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else if (left.head <= right.head) {\n                val (sorted, inv) = mergeInv(left.tail, right)\n                (left.head :: sorted, inv)\n            }\n            else {\n                val (sorted, inv) = mergeInv(left, right.tail)\n                (right.head :: sorted, inv + left.length)\n            }\n        }\n        mergeSortInv(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            if (i < left.length) result = result ::: left.drop(i)\n            if (j < right.length) result = result ::: right.drop(j)\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpclfva_ti.scala:37)\n\tat Problem.main(tmpclfva_ti.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count : Long = 0\n        for (i <- 0 until arr.length) {\n            for (j <- i until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else {\n                val head :: tail = if (left.head <= right.head) left else right\n                val (remaining, inv) = merge(if (left.head <= right.head) left.tail else left, if (left.head <= right.head) right else right.tail)\n                (head :: remaining, inv + (if (left.head <= right.head) 0 else left.length))\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    invCount += left.length - leftIndex\n                }\n            }\n            while (leftIndex < left.length) {\n                result = result :+ left(leftIndex)\n                leftIndex += 1\n            }\n            while (rightIndex < right.length) {\n                result = result :+ right(rightIndex)\n                rightIndex += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n            (sorted, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, mergeInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + mergeInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) {\n                (arr, 0)\n            } else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (result, count) = merge(leftSorted, rightSorted)\n                (result, leftCount + rightCount + count)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124124,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = ListBuffer[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        var count = 0L\n        for (i <- 0 until arr.length - 1) {\n            for (j <- i + 1 until arr.length) {\n                if (arr(i) > arr(j)) count += 1\n            }\n        }\n        count\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) =>\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + (left.length))\n                                (y :: zs, newInvCount)\n                            }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124087,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1chxq3m.scala:27:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpf1chxq3m.scala:27:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m27 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def mergeCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            if (left.isEmpty) (right, 0)\n            else if (right.isEmpty) (left, 0)\n            else if (left.head < right.head) {\n                val (tail, count) = mergeCount(left.tail, right)\n                (left.head :: tail, count)\n            }\n            else {\n                val (tail, count) = mergeCount(left, right.tail)\n                (right.head :: tail, count + left.length)\n            }\n        }\n        def mergeSortCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortCount(left)\n                val (rightSorted, rightCount) = mergeSortCount(right)\n                mergeCount(leftSorted, rightSorted)\n            }\n        }\n        mergeSortCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124125,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpxgsg16bh.scala:43)\n\tat Problem.main(tmpxgsg16bh.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftCount) = mergeSort(left)\n            val (rightSorted, rightCount) = mergeSort(right)\n            val (result, count) = merge(leftSorted, rightSorted)\n            (result, leftCount + rightCount + count)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var count = 0L\n            var leftIndex = 0\n            var rightIndex = 0\n            var result = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    result = result :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    result = result :+ right(rightIndex)\n                    rightIndex += 1\n                    count += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) result = result ::: left.slice(leftIndex, left.length)\n            else if (rightIndex < right.length) result = result ::: right.slice(rightIndex, right.length)\n            (result, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (sorted, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (sorted, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1665510593,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInv(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                countInv(left) + countInv(right) + merge(left, right).zipWithIndex.filter(x => x._1 != arr(x._2)).length\n            }\n        }\n        countInv(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpbhwmbg1l.scala:29)\n\tat Problem.main(tmpbhwmbg1l.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            def merge(left : List[Long], right : List[Long]) : List[Long] = {\n                (left, right) match {\n                    case (Nil, _) => right\n                    case (_, Nil) => left\n                    case (l :: ls, r :: rs) => if (l < r) l :: merge(ls, right) else r :: merge(left, rs)\n                }\n            }\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def mergeSortInv(arr : List[Long]) : (List[Long], Long) = {\n            def merge(left : (List[Long], Long), right : (List[Long], Long)) : (List[Long], Long) = {\n                (left, right) match {\n                    case ((Nil, _), _) => right\n                    case (_, (Nil, _)) => left\n                    case ((l :: ls, lc), (r :: rs, rc)) => if (l < r) (l :: merge(ls, right)._1, lc + merge(ls, right)._2) else (r :: merge(left, rs)._1, rc + merge(left, rs)._2 + ls.length)\n                }\n            }\n            val n = arr.length / 2\n            if (n == 0) (arr, 0)\n            else {\n                val (left, right) = arr splitAt(n)\n                merge(mergeSortInv(left), mergeSortInv(right))\n            }\n        }\n        mergeSortInv(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124132,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzlum0b5.scala:26:82 --------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    \u001b[33mcase\u001b[0m ((l :: ls, lc), (r :: rs, rc)) => \u001b[33mif\u001b[0m (l < r) (l :: merge(ls, right)._1, lc + merge(ls, right)._2) \u001b[33melse\u001b[0m (r :: merge(left, rs)._1, rc + merge(left, rs)._2 + ls.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                  ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (\u001b[1m\u001b[31mls\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m)\n\u001b[31m   |\u001b[0m                                            Required: (List[Long]\u001b[1m\u001b[32m,\u001b[0m\u001b[1m\u001b[32m \u001b[0m\u001b[1m\u001b[32mLong\u001b[0m)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzlum0b5.scala:26:108 -------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    \u001b[33mcase\u001b[0m ((l :: ls, lc), (r :: rs, rc)) => \u001b[33mif\u001b[0m (l < r) (l :: merge(ls, right)._1, lc + merge(ls, right)._2) \u001b[33melse\u001b[0m (r :: merge(left, rs)._1, rc + merge(left, rs)._2 + ls.length)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                                                            ^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (\u001b[1m\u001b[31mls\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31m:\u001b[0m\u001b[1m\u001b[31m \u001b[0m\u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m)\n\u001b[31m   |\u001b[0m                                            Required: (List[Long]\u001b[1m\u001b[32m,\u001b[0m\u001b[1m\u001b[32m \u001b[0m\u001b[1m\u001b[32mLong\u001b[0m)\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpgzlum0b5.scala:26:146 -------------------\u001b[0m\u001b[0m\n\u001b[31m26 |\u001b[0m                    \u001b[33mcase\u001b[0m ((l :: ls, lc), (r :: rs, rc)) => \u001b[33mif\u001b[0m (l < r) (l :: merge(ls, right)._1, lc + merge(ls, right)._2) \u001b[33melse\u001b[0m (r :: merge(left, rs)._1, rc + merge(left, rs)._2 + ls.length)\n\u001b[31m\u001b[31m   |\u001b[0m                      ",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (result, splitInvCount) = merge(leftSorted, rightSorted)\n                (result, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124090,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) return arr\n            val (left, right) = arr.splitAt(arr.length / 2)\n            merge(mergeSort(left), mergeSort(right))\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) return right\n            if (right.isEmpty) return left\n            if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def count(arr : List[Long]) : Long = {\n            if (arr.length <= 1) return 0\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val leftCount = count(left)\n            val rightCount = count(right)\n            val mergeCount = mergeCount(left, right)\n            leftCount + rightCount + mergeCount\n        }\n        def mergeCount(left : List[Long], right : List[Long]) : Long = {\n            if (left.isEmpty) return 0\n            if (right.isEmpty) return 0\n            if (left.head <= right.head) mergeCount(left.tail, right)\n            else 1 + mergeCount(left, right.tail)\n        }\n        count(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124128,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E045] Cyclic Error: /tmp/tmpxk6urdh8.scala:22:29 ---------------------------\u001b[0m\u001b[0m\n\u001b[31m22 |\u001b[0m            \u001b[33mval\u001b[0m \u001b[36mmergeCount\u001b[0m = mergeCount(left, right)\n\u001b[31m\u001b[31m   |\u001b[0m                             ^\u001b[0m\n\u001b[31m   |\u001b[0m                             Recursive \u001b[33mvalue\u001b[0m \u001b[35mmergeCount\u001b[0m needs type\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n1 error found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var inversions = 0L\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    inversions += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, inversions)\n        }\n        def count(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = count(left)\n                val (rightSorted, rightInv) = count(right)\n                val (result, splitInv) = mergeAndCount(leftSorted, rightSorted)\n                (result, leftInv + rightInv + splitInv)\n            }\n        }\n        count(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            val n = arr.length / 2\n            if (n == 0) arr\n            else {\n                def merge(left : List[Long], right : List[Long], invCount : Long) : (List[Long], Long) = {\n                    (left, right) match {\n                        case (Nil, _) => (right, invCount)\n                        case (_, Nil) => (left, invCount)\n                        case (x :: xs, y :: ys) => {\n                            if (x <= y) {\n                                val (zs, newInvCount) = merge(xs, right, invCount)\n                                (x :: zs, newInvCount)\n                            } else {\n                                val (zs, newInvCount) = merge(left, ys, invCount + xs.length)\n                                (y :: zs, newInvCount)\n                            }\n                        }\n                    }\n                }\n                val (left, right) = arr splitAt(n)\n                val (sortedLeft, leftInvCount) = mergeSort(left)\n                val (sortedRight, rightInvCount) = mergeSort(right)\n                val (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, 0)\n                sortedArr\n            }\n        }\n        mergeSort(arr).length\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124067,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:55 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                       ^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                            Found:    (sortedLeft : Any)\n\u001b[31m   |\u001b[0m                                            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpey0z6n06.scala:28:67 --------------------\u001b[0m\u001b[0m\n\u001b[31m28 |\u001b[0m                \u001b[33mval\u001b[0m (sortedArr, splitInvCount) = merge(sortedLeft, sortedRight, \u001b[31m0\u001b[0m)\n\u001b[31m\u001b[31m   |\u001b[0m                                                                   ^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m                                           Found:    (sortedRight : Any)\n\u001b[31m   |\u001b[0m                                           Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n                (merged, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length == 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInvCount) = mergeSort(left)\n                val (rightSorted, rightInvCount) = mergeSort(right)\n                val (sorted, splitInvCount) = merge(leftSorted, rightSorted)\n                (sorted, leftInvCount + rightInvCount + splitInvCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) {\n                (arr, 0)\n            } else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var invCount = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, invCount)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) return (arr, 0)\n            val (left, right) = arr.splitAt(arr.length / 2)\n            val (leftSorted, leftInvCount) = mergeSort(left)\n            val (rightSorted, rightInvCount) = mergeSort(right)\n            val (merged, splitInvCount) = merge(leftSorted, rightSorted)\n            (merged, leftInvCount + rightInvCount + splitInvCount)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            var i = 0\n            var j = 0\n            var invCount = 0L\n            var result = List[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                }\n                else {\n                    result = result :+ right(j)\n                    j += 1\n                    invCount += left.length - i\n                }\n            }\n            if (i < left.length) result = result ::: left.drop(i)\n            else result = result ::: right.drop(j)\n            invCount\n        }\n        mergeSort(arr)\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvh9_zwuk.scala:31:12 --------------------\u001b[0m\u001b[0m\n\u001b[31m31 |\u001b[0m            invCount\n\u001b[31m\u001b[31m   |\u001b[0m            ^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m            Found:    (invCount : Long)\n\u001b[31m   |\u001b[0m            Required: List[Long]\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n\u001b[31m\u001b[31m-- [E007] Type Mismatch Error: /tmp/tmpvh9_zwuk.scala:33:17 --------------------\u001b[0m\u001b[0m\n\u001b[31m33 |\u001b[0m        mergeSort(arr)\n\u001b[31m\u001b[31m   |\u001b[0m        ^^^^^^^^^^^^^^\u001b[0m\n\u001b[31m   |\u001b[0m        Found:    \u001b[1m\u001b[31mList\u001b[0m\u001b[1m\u001b[31m[\u001b[0mLong\u001b[1m\u001b[31m]\u001b[0m\n\u001b[31m   |\u001b[0m        Required: Long\n\u001b[31m   |\u001b[0m\n\u001b[31m   |\u001b[0m longer explanation available when compiling with `-explain`\n2 errors found\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeAndCount(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSortAndCount(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSortAndCount(left)\n                val (rightSorted, rightCount) = mergeSortAndCount(right)\n                val (result, splitCount) = mergeAndCount(leftSorted, rightSorted)\n                (result, leftCount + rightCount + splitCount)\n            }\n        }\n        mergeSortAndCount(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var i = 0\n            var j = 0\n            var count = 0L\n            while(i < left.length && j < right.length) {\n                if(left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while(i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while(j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def sort(arr : List[Long]) : (List[Long], Long) = {\n            if(arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (sortedLeft, countLeft) = sort(left)\n                val (sortedRight, countRight) = sort(right)\n                val (sorted, count) = merge(sortedLeft, sortedRight)\n                (sorted, count + countLeft + countRight)\n            }\n        }\n        sort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.size <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.size / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def countInversions(arr : List[Long]) : Long = {\n            if (arr.size <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.size / 2)\n                val leftInv = countInversions(left)\n                val rightInv = countInversions(right)\n                val splitInv = countSplitInversions(left, right)\n                leftInv + rightInv + splitInv\n            }\n        }\n        def countSplitInversions(left : List[Long], right : List[Long]) : Long = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var inversions = 0L\n            while (leftIndex < left.size && rightIndex < right.size) {\n                if (left(leftIndex) <= right(rightIndex)) leftIndex += 1\n                else {\n                    inversions += left.size - leftIndex\n                    rightIndex += 1\n                }\n            }\n            inversions\n        }\n        countInversions(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp0lcgcoln.scala:45)\n\tat Problem.main(tmp0lcgcoln.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head < right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        def count(arr : List[Long]) : Long = {\n            if (arr.length <= 1) 0\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                count(left) + count(right) + merge(left, right).zip(arr).count(p => p._1 != p._2)\n            }\n        }\n        count(mergeSort(arr))\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124133,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprd3x6n1t.scala:29)\n\tat Problem.main(tmprd3x6n1t.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftInv) = mergeSort(left)\n                val (rightSorted, rightInv) = mergeSort(right)\n                val (merged, splitInv) = merge(leftSorted, rightSorted)\n                (merged, leftInv + rightInv + splitInv)\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var leftIndex = 0\n            var rightIndex = 0\n            var splitInv = 0L\n            var merged = List[Long]()\n            while (leftIndex < left.length && rightIndex < right.length) {\n                if (left(leftIndex) <= right(rightIndex)) {\n                    merged = merged :+ left(leftIndex)\n                    leftIndex += 1\n                } else {\n                    merged = merged :+ right(rightIndex)\n                    rightIndex += 1\n                    splitInv += left.length - leftIndex\n                }\n            }\n            if (leftIndex < left.length) merged = merged ++ left.slice(leftIndex, left.length)\n            if (rightIndex < right.length) merged = merged ++ right.slice(rightIndex, right.length)\n            (merged, splitInv)\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var l = left\n            var r = right\n            var result = List[Long]()\n            var count = 0L\n            while (l.length > 0 && r.length > 0) {\n                if (l.head < r.head) {\n                    result = result :+ l.head\n                    l = l.tail\n                } else {\n                    result = result :+ r.head\n                    r = r.tail\n                    count += left.length\n                }\n            }\n            if (l.length > 0) result = result ::: l\n            if (r.length > 0) result = result ::: r\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmp2efyroku.scala:37)\n\tat Problem.main(tmp2efyroku.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var (i, j) = (0, 0)\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var result = List[Long]()\n            var count = 0L\n            var i = 0\n            var j = 0\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result = result :+ left(i)\n                    i += 1\n                } else {\n                    result = result :+ right(j)\n                    count += left.length - i\n                    j += 1\n                }\n            }\n            while (i < left.length) {\n                result = result :+ left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result = result :+ right(j)\n                j += 1\n            }\n            (result, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                merge(leftSorted, rightSorted)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmprbpg13hk.scala:43)\n\tat Problem.main(tmprbpg13hk.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def merge(left : List[Long], right : List[Long]) : (List[Long], Long) = {\n            var i = 0; var j = 0; var count = 0L\n            var result = ListBuffer[Long]()\n            while (i < left.length && j < right.length) {\n                if (left(i) <= right(j)) {\n                    result += left(i)\n                    i += 1\n                } else {\n                    result += right(j)\n                    j += 1\n                    count += left.length - i\n                }\n            }\n            while (i < left.length) {\n                result += left(i)\n                i += 1\n            }\n            while (j < right.length) {\n                result += right(j)\n                j += 1\n            }\n            (result.toList, count)\n        }\n        def mergeSort(arr : List[Long]) : (List[Long], Long) = {\n            if (arr.length <= 1) (arr, 0)\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                val (leftSorted, leftCount) = mergeSort(left)\n                val (rightSorted, rightCount) = mergeSort(right)\n                val (merged, mergeCount) = merge(leftSorted, rightSorted)\n                (merged, leftCount + rightCount + mergeCount)\n            }\n        }\n        mergeSort(arr)._2\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a scalathon function to count inversions in a list.\n    def getInvCount(arr : List[Long]) : Long = {\n        def mergeSort(arr : List[Long]) : List[Long] = {\n            if (arr.length <= 1) arr\n            else {\n                val (left, right) = arr.splitAt(arr.length / 2)\n                merge(mergeSort(left), mergeSort(right))\n            }\n        }\n        def merge(left : List[Long], right : List[Long]) : List[Long] = {\n            if (left.isEmpty) right\n            else if (right.isEmpty) left\n            else if (left.head <= right.head) left.head :: merge(left.tail, right)\n            else right.head :: merge(left, right.tail)\n        }\n        mergeSort(arr).zipWithIndex.map(x => x._1 - x._2 - 1).sum\n    }\n    def main(args: Array[String]) = {\n    assert(getInvCount((List[Long](1l.toLong, 20l.toLong, 6l.toLong, 4l.toLong, 5l.toLong))) == (5l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 1l.toLong))) == (1l));\n    assert(getInvCount((List[Long](1l.toLong, 2l.toLong, 5l.toLong, 6l.toLong, 1l.toLong))) == (3l));\n    }\n\n}\n",
      "timestamp": 1666124134,
      "stdout": "",
      "stderr": "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\tat Problem$.main(tmpr5o64yry.scala:22)\n\tat Problem.main(tmpr5o64yry.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n",
      "exit_code": 0,
      "status": "Exception"
    }
  ]
}