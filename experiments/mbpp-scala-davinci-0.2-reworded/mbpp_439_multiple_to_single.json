{
  "name": "mbpp_439_multiple_to_single",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to join a list of multiple integers into a single integer.\n    def multipleToSingle(L : List[Long]) : Long = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(multipleToSingle((List[Long](11l.toLong, 33l.toLong, 50l.toLong))) == (113350l));\n    assert(multipleToSingle((List[Long](-1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong))) == (-123456l));\n    assert(multipleToSingle((List[Long](10l.toLong, 15l.toLong, 20l.toLong, 25l.toLong))) == (10152025l));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        var res : Long = 0\n        for (i <- 0 until L.length) {\n            res += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return res",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var res = 0L\n        for (i <- 0 until L.length) res += L(i) * pow(10, L.length - i - 1).toLong\n        res",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        L.foldLeft(0L)((x, y) => x * 10 + y)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var res : Long = 0\n        for (i <- 0 until L.length) {\n            res += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        res",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result *= 10\n            result += L(i)\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        while (i < L.length) {\n            result = result * 10 + L(i)\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result = 0L\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        L.foldLeft(0L)((x, y) => x * 10 + y)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result = 0L\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result = 0L\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        result",
    "        var result = 0L\n        for (i <- L.indices) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var s : String = \"\"\n        for (i <- L) {\n            s += i.toString\n        }\n        s.toLong",
    "        // L.foldLeft(0)((x, y) => x * 10 + y)\n        L.foldLeft(0)(_ * 10 + _)",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i\n        s.toLong",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 to L.length - 1) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var res : Long = 0\n        for (i <- 0 to L.length - 1) {\n            res += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return res",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        while (i < L.length) {\n            result = result * 10 + L(i)\n            i += 1\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i\n        s.toLong",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (n <- L) s += n.toString\n        s.toLong",
    "        var result = 0L\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 to L.length - 1) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i\n        s.toLong",
    "        var result = 0L\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result = 0L\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 to L.length - 1) {\n            result += L(i) * pow(10, L.length - 1 - i).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result = 0L\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result = 0L\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        L.foldLeft(0L)((x, y) => x * 10 + y)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var result : Long = 0\n        var i = 0\n        for (i <- 0 to L.length - 1) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s : String = \"\"\n        for (i <- L) s += i.toString\n        return s.toLong",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result = 0L\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        L.foldLeft(0L)((a, b) => a * 10 + b)",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        def helper(L : List[Long], acc : Long) : Long = {\n            if (L.isEmpty) acc\n            else helper(L.tail, acc * 10 + L.head)\n        }\n        helper(L, 0)",
    "        var result : Long = 0\n        var i : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result = 0L\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        var i : Int = 0\n        for (i <- 0 to L.length - 1) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 to L.length - 1) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- L) {\n            result = result * 10 + i\n        }\n        return result",
    "        var result : Long = 0\n        var multiplier : Long = 1\n        for (i <- L.length - 1 to 0 by -1) {\n            result += L(i) * multiplier\n            multiplier *= 10\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result",
    "        var s = \"\"\n        for (i <- L) s += i.toString\n        s.toLong",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result = result * 10 + L(i)\n        }\n        return result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        result",
    "        var result : Long = 0\n        for (i <- 0 until L.length) {\n            result += L(i) * pow(10, L.length - i - 1).toLong\n        }\n        return result"
  ]
}