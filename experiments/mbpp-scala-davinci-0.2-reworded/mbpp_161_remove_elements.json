{
  "name": "mbpp_161_remove_elements",
  "language": "scala",
  "prompt": "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n    // Write a function to remove all elements from a given list present in another list.\n    def removeElements(list1 : List[Long], list2 : List[Long]) : List[Long] = {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py",
  "prompt_terminology": "reworded",
  "tests": "    }\n    def main(args: Array[String]) = {\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong))).equals((List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](1l.toLong, 3l.toLong, 5l.toLong, 7l.toLong))).equals((List[Long](2l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    assert(removeElements((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 5l.toLong, 6l.toLong, 7l.toLong, 8l.toLong, 9l.toLong, 10l.toLong)), (List[Long](5l.toLong, 7l.toLong))).equals((List[Long](1l.toLong, 2l.toLong, 3l.toLong, 4l.toLong, 6l.toLong, 8l.toLong, 9l.toLong, 10l.toLong))));\n    }\n\n}\n",
  "stop_tokens": [
    "\n    }\n"
  ],
  "completions": [
    "        list1.filter(x => !list2.contains(x))",
    "        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) {\n                result = i :: result\n            }\n        }\n        result.reverse",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(!list2.contains(_))",
    "        list1.filter(!list2.contains(_))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(!list2.contains(_))",
    "        var result = List[Long]()\n        for (i <- list1) {\n            if (!list2.contains(i)) result = i :: result\n        }\n        result.reverse",
    "        list1.filter(!list2.contains(_))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(!list2.contains(_))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(x => !list2.contains(x))",
    "        list1.filter(!list2.contains(_))",
    "        list1.filter(x => !list2.contains(x))"
  ]
}